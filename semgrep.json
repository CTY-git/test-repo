{"errors": [{"code": 3, "level": "warn", "message": "Syntax error at line gradlew:177:\n `for i do` was unexpected", "path": "gradlew", "spans": [{"end": {"col": 13, "line": 177, "offset": 8}, "file": "gradlew", "start": {"col": 5, "line": 177, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 13, "line": 177, "offset": 8}, "path": "gradlew", "start": {"col": 5, "line": 177, "offset": 0}}]]}], "interfile_languages_used": [], "paths": {"scanned": ["CODE_OF_CONDUCT.md", "CONTRIBUTING.md", "LICENSE", "README.md", "build.gradle", "docker-compose.yml", "docs/ComponentDiagram VulnerableApp.png", "docs/DesignDocumentation.md", "docs/Gemfile", "docs/HOW-TO-USE.md", "docs/ProjectUsage.md", "docs/ReleaseVulnerableApp.md", "docs/Vulnerability list Description.jpg", "docs/VulnerabilityLevel Description.jpg", "docs/_config.yml", "docs/_config_local.yml", "docs/blogs/Overview_of_Owasp-VulnerableApp.md", "docs/blogs/blogs.md", "docs/i18n/hi/README.md", "docs/i18n/locale.md", "docs/i18n/pa/README.md", "docs/i18n/pt-BR/Readme.md", "docs/i18n/ru/README.md", "docs/i18n/zh-CN/README.md", "docs/index.md", "docs/logos/BW/iconColoured.png", "docs/logos/BW/iconColoured@2x-8.png", "docs/logos/BW/iconColoured@3x-8.png", "docs/logos/Coloured/iconColoured.png", "docs/logos/Coloured/iconColoured@2x-8.png", "docs/logos/Coloured/iconColoured@3x-8.png", "docs/logos/EPS/logoBW.eps", "docs/logos/EPS/logoColoured.eps", "docs/logos/SVG/logoBW.svg", "docs/logos/SVG/logoColoured.svg", "gradle/wrapper/gradle-wrapper.jar", "gradle/wrapper/gradle-wrapper.properties", "gradlew", "gradlew.bat", "json", "scanner/sast/expectedIssues.csv", "semgrep.json", "src/main/java/org/sasanlabs/Application.java", "src/main/java/org/sasanlabs/beans/AllEndPointsResponseBean.java", "src/main/java/org/sasanlabs/beans/AttackVectorResponseBean.java", "src/main/java/org/sasanlabs/beans/LevelResponseBean.java", "src/main/java/org/sasanlabs/beans/ScannerMetaResponseBean.java", "src/main/java/org/sasanlabs/beans/ScannerResponseBean.java", "src/main/java/org/sasanlabs/configuration/VulnerableAppConfiguration.java", "src/main/java/org/sasanlabs/configuration/VulnerableAppProperties.java", "src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java", "src/main/java/org/sasanlabs/controller/exception/ControllerException.java", "src/main/java/org/sasanlabs/controller/exception/ControllerExceptionHandler.java", "src/main/java/org/sasanlabs/internal/utility/EnvUtils.java", "src/main/java/org/sasanlabs/internal/utility/FrameworkConstants.java", "src/main/java/org/sasanlabs/internal/utility/GenericUtils.java", "src/main/java/org/sasanlabs/internal/utility/JSONSerializationUtils.java", "src/main/java/org/sasanlabs/internal/utility/LevelConstants.java", "src/main/java/org/sasanlabs/internal/utility/MessageBundle.java", "src/main/java/org/sasanlabs/internal/utility/Variant.java", "src/main/java/org/sasanlabs/internal/utility/annotations/AttackVector.java", "src/main/java/org/sasanlabs/internal/utility/annotations/RequestParameterLocation.java", "src/main/java/org/sasanlabs/internal/utility/annotations/ResponseType.java", "src/main/java/org/sasanlabs/internal/utility/annotations/VulnerableAppRequestMapping.java", "src/main/java/org/sasanlabs/internal/utility/annotations/VulnerableAppRestController.java", "src/main/java/org/sasanlabs/service/IEndPointsInformationProvider.java", "src/main/java/org/sasanlabs/service/exception/ExceptionStatusCodeEnum.java", "src/main/java/org/sasanlabs/service/exception/ServiceApplicationException.java", "src/main/java/org/sasanlabs/service/impl/EndPointsInformationProvider.java", "src/main/java/org/sasanlabs/service/vulnerability/bean/GenericVulnerabilityResponseBean.java", "src/main/java/org/sasanlabs/service/vulnerability/commandInjection/CommandInjection.java", "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java", "src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java", "src/main/java/org/sasanlabs/service/vulnerability/jwt/IJWTTokenGenerator.java", "src/main/java/org/sasanlabs/service/vulnerability/jwt/IJWTValidator.java", "src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java", "src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java", "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java", "src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java", "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java", "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/KeyStrength.java", "src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/SymmetricAlgorithmKey.java", "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/ClientSideInjection.java", "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java", "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/MetaTagBasedInjection.java", "src/main/java/org/sasanlabs/service/vulnerability/openRedirect/RefreshHeaderBasedInjection.java", "src/main/java/org/sasanlabs/service/vulnerability/pathTraversal/PathTraversalVulnerability.java", "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/CarInformation.java", "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "src/main/java/org/sasanlabs/service/vulnerability/ssrf/MetaDataServiceMock.java", "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/PersistentXSSInHTMLTagVulnerability.java", "src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/Post.java", "src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/PostRepository.java", "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java", "src/main/java/org/sasanlabs/service/vulnerability/xxe/bean/Book.java", "src/main/java/org/sasanlabs/service/vulnerability/xxe/bean/ObjectFactory.java", "src/main/java/org/sasanlabs/service/vulnerability/xxe/dao/BookEntity.java", "src/main/java/org/sasanlabs/service/vulnerability/xxe/dao/BookEntityRepository.java", "src/main/java/org/sasanlabs/vulnerability/types/VulnerabilityType.java", "src/main/java/org/sasanlabs/vulnerability/utils/Constants.java", "src/main/resources/application.properties", "src/main/resources/attackvectors/BlindSQLInjectionVulnerabilityPayload.properties", "src/main/resources/attackvectors/ErrorBasedSQLInjectionPayload.properties", "src/main/resources/attackvectors/GeneralVulnerabilityPayload.properties", "src/main/resources/attackvectors/JWTVulnerabilityPayload.properties", "src/main/resources/attackvectors/SSRFVulnerabilityPayload.properties", "src/main/resources/attackvectors/UnionBasedSQLInjectionVulnerabilityPayload.properties", "src/main/resources/attackvectors/UnrestrictedFileUploadPayload.properties", "src/main/resources/i18n/messages.properties", "src/main/resources/i18n/messages_en_US.properties", "src/main/resources/i18n/messages_es.properties", "src/main/resources/i18n/messages_hi.properties", "src/main/resources/i18n/messages_it.properties", "src/main/resources/i18n/messages_sv.properties", "src/main/resources/i18n/messages_zh_TW.properties", "src/main/resources/log4j2.xml", "src/main/resources/sampleVulnerability/sampleVulnerability/SampleVulnerability.java", "src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.css", "src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.html", "src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js", "src/main/resources/sasanlabs.p12", "src/main/resources/scripts/JWT/SymmetricAlgoKeys.json", "src/main/resources/scripts/PathTraversal/OwaspAppInfo.json", "src/main/resources/scripts/PathTraversal/UserInfo.json", "src/main/resources/scripts/PathTraversal/secret.json", "src/main/resources/scripts/SQLInjection/db/data.sql", "src/main/resources/scripts/SQLInjection/db/schema.sql", "src/main/resources/scripts/XXEVulnerability/books.xsd", "src/main/resources/scripts/XXEVulnerability/schema.sql", "src/main/resources/scripts/xss/PersistentXSS/db/schema.sql", "src/main/resources/static/error.css", "src/main/resources/static/error.html", "src/main/resources/static/images/GitHub-Mark-32px.png", "src/main/resources/static/images/OWASP.png", "src/main/resources/static/images/ZAP.png", "src/main/resources/static/images/cars/Audi.jpg", "src/main/resources/static/index.html", "src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css", "src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html", "src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js", "src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.css", "src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.html", "src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js", "src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css", "src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html", "src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js", "src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.css", "src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.html", "src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js", "src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.css", "src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.html", "src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js", "src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.css", "src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.html", "src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js", "src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.css", "src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.html", "src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js", "src/main/resources/static/templates/JWTVulnerability/keys/private_key.pem", "src/main/resources/static/templates/JWTVulnerability/keys/public_crt.pem", "src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.css", "src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.html", "src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js", "src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.css", "src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.html", "src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js", "src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.css", "src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.html", "src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js", "src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.css", "src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.html", "src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js", "src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css", "src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html", "src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js", "src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.css", "src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.html", "src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js", "src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.css", "src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.html", "src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js", "src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.css", "src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.html", "src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js", "src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.css", "src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.html", "src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js", "src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.css", "src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.html", "src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js", "src/main/resources/static/vectors/secure.svg", "src/main/resources/static/vectors/unsecure.svg", "src/main/resources/static/vulnerableApp.css", "src/main/resources/static/vulnerableApp.js"]}, "results": [{"check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "end": {"col": 23, "line": 3, "offset": 47}, "extra": {"engine_kind": "OSS", "fingerprint": "3921a3947f49c9b257d08210fd7d6448fc620df6cce2ec4bfe0bab7aece2741c7ac256c58b74be009f05ed7162c229a71efe0f8b0d69ca639873e5982ef4a7d9_0", "is_ignored": false, "lines": "    VulnerableApp-base:", "message": "Service 'VulnerableApp-base' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUoWr", "url": "https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "version_id": "qkT2BLp"}}, "shortlink": "https://sg.run/0n8q", "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "VulnerableApp-base", "end": {"col": 23, "line": 3, "offset": 47}, "start": {"col": 5, "line": 3, "offset": 29}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "docker-compose.yml", "start": {"col": 5, "line": 3, "offset": 29}}, {"check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "end": {"col": 23, "line": 3, "offset": 47}, "extra": {"engine_kind": "OSS", "fingerprint": "9d1e3edaee0535a439f7a5a02cd4f3a3b26fb3a8e043699dee389f48f0ab1cc0f357401bfd914ce9ff415efa1a841bbaa25d8c503663160acfbceeec58840e83_0", "is_ignored": false, "lines": "    VulnerableApp-base:", "message": "Service 'VulnerableApp-base' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir", "https://blog.atomist.com/security-of-docker-kubernetes/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "v8U5vN", "url": "https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "version_id": "o5Tg9ob"}}, "shortlink": "https://sg.run/e4JE", "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "VulnerableApp-base", "end": {"col": 23, "line": 3, "offset": 47}, "start": {"col": 5, "line": 3, "offset": 29}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "docker-compose.yml", "start": {"col": 5, "line": 3, "offset": 29}}, {"check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "end": {"col": 22, "line": 6, "offset": 131}, "extra": {"engine_kind": "OSS", "fingerprint": "af7e980dad7fec983238139a98c4705b107dd3acc110a3fd3ac951b867e95ea6f870c7d955fb505af2fd00dc2e28d844d9bb70bc67d60932d31fc9256f8a999a_0", "is_ignored": false, "lines": "    VulnerableApp-jsp:", "message": "Service 'VulnerableApp-jsp' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUoWr", "url": "https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "version_id": "qkT2BLp"}}, "shortlink": "https://sg.run/0n8q", "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "VulnerableApp-jsp", "end": {"col": 22, "line": 6, "offset": 131}, "start": {"col": 5, "line": 6, "offset": 114}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "docker-compose.yml", "start": {"col": 5, "line": 6, "offset": 114}}, {"check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "end": {"col": 22, "line": 6, "offset": 131}, "extra": {"engine_kind": "OSS", "fingerprint": "d15ec8c04e312421413fb88e298c418253cccfa110b5e9e0a8914f84f221dbac8b8564ce7a4e847680d2861fece4352a91f06f51233c60501e6747f439102a66_0", "is_ignored": false, "lines": "    VulnerableApp-jsp:", "message": "Service 'VulnerableApp-jsp' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir", "https://blog.atomist.com/security-of-docker-kubernetes/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "v8U5vN", "url": "https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "version_id": "o5Tg9ob"}}, "shortlink": "https://sg.run/e4JE", "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "VulnerableApp-jsp", "end": {"col": 22, "line": 6, "offset": 131}, "start": {"col": 5, "line": 6, "offset": 114}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "docker-compose.yml", "start": {"col": 5, "line": 6, "offset": 114}}, {"check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "end": {"col": 22, "line": 9, "offset": 210}, "extra": {"engine_kind": "OSS", "fingerprint": "b82e7e9f1fa5752e251942ad0a139ca9aff9de173f9b3019f241bfdfab96268c927943ea990ab945f93d9329ca17bd82f26f640e99cc6439682139686fe15eba_0", "is_ignored": false, "lines": "    VulnerableApp-php:", "message": "Service 'VulnerableApp-php' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUoWr", "url": "https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "version_id": "qkT2BLp"}}, "shortlink": "https://sg.run/0n8q", "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "VulnerableApp-php", "end": {"col": 22, "line": 9, "offset": 210}, "start": {"col": 5, "line": 9, "offset": 193}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "docker-compose.yml", "start": {"col": 5, "line": 9, "offset": 193}}, {"check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "end": {"col": 22, "line": 9, "offset": 210}, "extra": {"engine_kind": "OSS", "fingerprint": "c1d55de60ef62c5588fab89fb0a0df035fff4d12750100c62b88f0512047f3c3843f1cc24b8baf879f95cd7604b2825d3f17daddbff67ff30b8ec8299f3b683b_0", "is_ignored": false, "lines": "    VulnerableApp-php:", "message": "Service 'VulnerableApp-php' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir", "https://blog.atomist.com/security-of-docker-kubernetes/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "v8U5vN", "url": "https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "version_id": "o5Tg9ob"}}, "shortlink": "https://sg.run/e4JE", "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "VulnerableApp-php", "end": {"col": 22, "line": 9, "offset": 210}, "start": {"col": 5, "line": 9, "offset": 193}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "docker-compose.yml", "start": {"col": 5, "line": 9, "offset": 193}}, {"check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "end": {"col": 25, "line": 12, "offset": 295}, "extra": {"engine_kind": "OSS", "fingerprint": "5949e9ab5c8ee557186914529637c50d2dd7b4011f236c6bcf490d0e80823d7c769e5a300e0214fcf9122f64019fca1c95608b1180c7194501bea8fb896ce40f_0", "is_ignored": false, "lines": "    VulnerableApp-facade:", "message": "Service 'VulnerableApp-facade' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUoWr", "url": "https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "version_id": "qkT2BLp"}}, "shortlink": "https://sg.run/0n8q", "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "VulnerableApp-facade", "end": {"col": 25, "line": 12, "offset": 295}, "start": {"col": 5, "line": 12, "offset": 275}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "docker-compose.yml", "start": {"col": 5, "line": 12, "offset": 275}}, {"check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "end": {"col": 25, "line": 12, "offset": 295}, "extra": {"engine_kind": "OSS", "fingerprint": "03de6839c7238a1ffe3012b3196fb6d54de068f685675e71c88c18b2a1c9744b97ab60a95d6ada7900eddcb8533b547ced85d4c5a2bb88781d074c2faad2b3d7_0", "is_ignored": false, "lines": "    VulnerableApp-facade:", "message": "Service 'VulnerableApp-facade' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir", "https://blog.atomist.com/security-of-docker-kubernetes/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "v8U5vN", "url": "https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "version_id": "o5Tg9ob"}}, "shortlink": "https://sg.run/e4JE", "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "VulnerableApp-facade", "end": {"col": 25, "line": 12, "offset": 295}, "start": {"col": 5, "line": 12, "offset": 275}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "docker-compose.yml", "start": {"col": 5, "line": 12, "offset": 275}}, {"check_id": "generic.secrets.security.detected-jwt-token.detected-jwt-token", "end": {"col": 123, "line": 249, "offset": 22648}, "extra": {"engine_kind": "OSS", "fingerprint": "1333d5c6b69e5b7389540c2c73fa2aed56dd2a11f6774ae39826dd45378774fc7be75e2568adc0b2c8e255b8a6d387c9f3d4b19d53e4c861cb6759c493c8d466_0", "is_ignored": false, "lines": "  \u001b[1m\u001b[24meyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\u001b", "message": "JWT token detected", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-321: Use of Hard-coded Cryptographic Key"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "kxU8E8", "url": "https://semgrep.dev/playground/r/o5Tgljp/generic.secrets.security.detected-jwt-token.detected-jwt-token", "version_id": "o5Tgljp"}}, "shortlink": "https://sg.run/05N5", "source": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token", "source-rule-url": "https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py", "subcategory": ["audit"], "technology": ["secrets", "jwt"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "json", "start": {"col": 12, "line": 249, "offset": 22537}}, {"check_id": "generic.secrets.security.detected-jwt-token.detected-jwt-token", "end": {"col": 31084, "line": 1, "offset": 31083}, "extra": {"engine_kind": "OSS", "fingerprint": "7946f85c90d9569e819e51283b0dbb153c7e0fb37b4284046257f17c15f36f4cf65e3216eb03ca3c564a5f095671a5ca60cf24d113635fbbfd059acba6076cc9_0", "is_ignored": false, "lines": "{\"errors\": [{\"code\": 3, \"level\": \"warn\", \"message\": \"Syntax error at line gradlew:177:\\n `for i do` was unexpected\", \"path\": \"gradlew\", \"spans\": [{\"end\": {\"col\": 13, \"line\": 177, \"offset\": 8}, \"file\": \"gradlew\", \"start\": {\"col\": 5, \"line\": 177, \"offset\": 0}}], \"type\": [\"PartialParsing\", [{\"end\": {\"col\": 13, \"line\": 177, \"offset\": 8}, \"path\": \"gradlew\", \"start\": {\"col\": 5, \"line\": 177, \"offset\": 0}}]]}], \"interfile_languages_used\": [], \"paths\": {\"scanned\": [\"CODE_OF_CONDUCT.md\", \"CONTRIBUTING.md\", \"LICENSE\", \"README.md\", \"build.gradle\", \"docker-compose.yml\", \"docs/ComponentDiagram VulnerableApp.png\", \"docs/DesignDocumentation.md\", \"docs/Gemfile\", \"docs/HOW-TO-USE.md\", \"docs/ProjectUsage.md\", \"docs/ReleaseVulnerableApp.md\", \"docs/Vulnerability list Description.jpg\", \"docs/VulnerabilityLevel Description.jpg\", \"docs/_config.yml\", \"docs/_config_local.yml\", \"docs/blogs/Overview_of_Owasp-VulnerableApp.md\", \"docs/blogs/blogs.md\", \"docs/i18n/hi/README.md\", \"docs/i18n/locale.md\", \"docs/i18n/pa/README.md\", \"docs/i18n/pt-BR/Readme.md\", \"docs/i18n/ru/README.md\", \"docs/i18n/zh-CN/README.md\", \"docs/index.md\", \"docs/logos/BW/iconColoured.png\", \"docs/logos/BW/iconColoured@2x-8.png\", \"docs/logos/BW/iconColoured@3x-8.png\", \"docs/logos/Coloured/iconColoured.png\", \"docs/logos/Coloured/iconColoured@2x-8.png\", \"docs/logos/Coloured/iconColoured@3x-8.png\", \"docs/logos/EPS/logoBW.eps\", \"docs/logos/EPS/logoColoured.eps\", \"docs/logos/SVG/logoBW.svg\", \"docs/logos/SVG/logoColoured.svg\", \"gradle/wrapper/gradle-wrapper.jar\", \"gradle/wrapper/gradle-wrapper.properties\", \"gradlew\", \"gradlew.bat\", \"json\", \"scanner/sast/expectedIssues.csv\", \"src/main/java/org/sasanlabs/Application.java\", \"src/main/java/org/sasanlabs/beans/AllEndPointsResponseBean.java\", \"src/main/java/org/sasanlabs/beans/AttackVectorResponseBean.java\", \"src/main/java/org/sasanlabs/beans/LevelResponseBean.java\", \"src/main/java/org/sasanlabs/beans/ScannerMetaResponseBean.java\", \"src/main/java/org/sasanlabs/beans/ScannerResponseBean.java\", \"src/main/java/org/sasanlabs/configuration/VulnerableAppConfiguration.java\", \"src/main/java/org/sasanlabs/configuration/VulnerableAppProperties.java\", \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"src/main/java/org/sasanlabs/controller/exception/ControllerException.java\", \"src/main/java/org/sasanlabs/controller/exception/ControllerExceptionHandler.java\", \"src/main/java/org/sasanlabs/internal/utility/EnvUtils.java\", \"src/main/java/org/sasanlabs/internal/utility/FrameworkConstants.java\", \"src/main/java/org/sasanlabs/internal/utility/GenericUtils.java\", \"src/main/java/org/sasanlabs/internal/utility/JSONSerializationUtils.java\", \"src/main/java/org/sasanlabs/internal/utility/LevelConstants.java\", \"src/main/java/org/sasanlabs/internal/utility/MessageBundle.java\", \"src/main/java/org/sasanlabs/internal/utility/Variant.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/AttackVector.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/RequestParameterLocation.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/ResponseType.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/VulnerableAppRequestMapping.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/VulnerableAppRestController.java\", \"src/main/java/org/sasanlabs/service/IEndPointsInformationProvider.java\", \"src/main/java/org/sasanlabs/service/exception/ExceptionStatusCodeEnum.java\", \"src/main/java/org/sasanlabs/service/exception/ServiceApplicationException.java\", \"src/main/java/org/sasanlabs/service/impl/EndPointsInformationProvider.java\", \"src/main/java/org/sasanlabs/service/vulnerability/bean/GenericVulnerabilityResponseBean.java\", \"src/main/java/org/sasanlabs/service/vulnerability/commandInjection/CommandInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/IJWTTokenGenerator.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/IJWTValidator.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/KeyStrength.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/SymmetricAlgorithmKey.java\", \"src/main/java/org/sasanlabs/service/vulnerability/openRedirect/ClientSideInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/openRedirect/MetaTagBasedInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/openRedirect/RefreshHeaderBasedInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/pathTraversal/PathTraversalVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/CarInformation.java\", \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/MetaDataServiceMock.java\", \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/PersistentXSSInHTMLTagVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/Post.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/PostRepository.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/bean/Book.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/bean/ObjectFactory.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/dao/BookEntity.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/dao/BookEntityRepository.java\", \"src/main/java/org/sasanlabs/vulnerability/types/VulnerabilityType.java\", \"src/main/java/org/sasanlabs/vulnerability/utils/Constants.java\", \"src/main/resources/application.properties\", \"src/main/resources/attackvectors/BlindSQLInjectionVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/ErrorBasedSQLInjectionPayload.properties\", \"src/main/resources/attackvectors/GeneralVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/JWTVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/SSRFVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/UnionBasedSQLInjectionVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/UnrestrictedFileUploadPayload.properties\", \"src/main/resources/i18n/messages.properties\", \"src/main/resources/i18n/messages_en_US.properties\", \"src/main/resources/i18n/messages_es.properties\", \"src/main/resources/i18n/messages_hi.properties\", \"src/main/resources/i18n/messages_it.properties\", \"src/main/resources/i18n/messages_sv.properties\", \"src/main/resources/i18n/messages_zh_TW.properties\", \"src/main/resources/log4j2.xml\", \"src/main/resources/sampleVulnerability/sampleVulnerability/SampleVulnerability.java\", \"src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.css\", \"src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.html\", \"src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js\", \"src/main/resources/sasanlabs.p12\", \"src/main/resources/scripts/JWT/SymmetricAlgoKeys.json\", \"src/main/resources/scripts/PathTraversal/OwaspAppInfo.json\", \"src/main/resources/scripts/PathTraversal/UserInfo.json\", \"src/main/resources/scripts/PathTraversal/secret.json\", \"src/main/resources/scripts/SQLInjection/db/data.sql\", \"src/main/resources/scripts/SQLInjection/db/schema.sql\", \"src/main/resources/scripts/XXEVulnerability/books.xsd\", \"src/main/resources/scripts/XXEVulnerability/schema.sql\", \"src/main/resources/scripts/xss/PersistentXSS/db/schema.sql\", \"src/main/resources/static/error.css\", \"src/main/resources/static/error.html\", \"src/main/resources/static/images/GitHub-Mark-32px.png\", \"src/main/resources/static/images/OWASP.png\", \"src/main/resources/static/images/ZAP.png\", \"src/main/resources/static/images/cars/Audi.jpg\", \"src/main/resources/static/index.html\", \"src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css\", \"src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html\", \"src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.css\", \"src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.html\", \"src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js\", \"src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css\", \"src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html\", \"src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.css\", \"src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.html\", \"src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.css\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.html\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.css\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.html\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.css\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.html\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js\", \"src/main/resources/static/templates/JWTVulnerability/keys/private_key.pem\", \"src/main/resources/static/templates/JWTVulnerability/keys/public_crt.pem\", \"src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.css\", \"src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.html\", \"src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js\", \"src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.css\", \"src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.html\", \"src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js\", \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.css\", \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.html\", \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js\", \"src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.css\", \"src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.html\", \"src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js\", \"src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css\", \"src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html\", \"src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.css\", \"src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.html\", \"src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js\", \"src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.css\", \"src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.html\", \"src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js\", \"src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.css\", \"src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.html\", \"src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js\", \"src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.css\", \"src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.html\", \"src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js\", \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.css\", \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.html\", \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"src/main/resources/static/vectors/secure.svg\", \"src/main/resources/static/vectors/unsecure.svg\", \"src/main/resources/static/vulnerableApp.css\", \"src/main/resources/static/vulnerableApp.js\"]}, \"results\": [{\"check_id\": \"yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"end\": {\"col\": 23, \"line\": 3, \"offset\": 47}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3921a3947f49c9b257d08210fd7d6448fc620df6cce2ec4bfe0bab7aece2741c7ac256c58b74be009f05ed7162c229a71efe0f8b0d69ca639873e5982ef4a7d9_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-base:\", \"message\": \"Service 'VulnerableApp-base' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/\", \"https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"qNUoWr\", \"url\": \"https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"version_id\": \"qkT2BLp\"}}, \"shortlink\": \"https://sg.run/0n8q\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-base\", \"end\": {\"col\": 23, \"line\": 3, \"offset\": 47}, \"start\": {\"col\": 5, \"line\": 3, \"offset\": 29}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 3, \"offset\": 29}}, {\"check_id\": \"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"end\": {\"col\": 23, \"line\": 3, \"offset\": 47}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"9d1e3edaee0535a439f7a5a02cd4f3a3b26fb3a8e043699dee389f48f0ab1cc0f357401bfd914ce9ff415efa1a841bbaa25d8c503663160acfbceeec58840e83_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-base:\", \"message\": \"Service 'VulnerableApp-base' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir\", \"https://blog.atomist.com/security-of-docker-kubernetes/\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"v8U5vN\", \"url\": \"https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"version_id\": \"o5Tg9ob\"}}, \"shortlink\": \"https://sg.run/e4JE\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-base\", \"end\": {\"col\": 23, \"line\": 3, \"offset\": 47}, \"start\": {\"col\": 5, \"line\": 3, \"offset\": 29}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 3, \"offset\": 29}}, {\"check_id\": \"yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"end\": {\"col\": 22, \"line\": 6, \"offset\": 131}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"af7e980dad7fec983238139a98c4705b107dd3acc110a3fd3ac951b867e95ea6f870c7d955fb505af2fd00dc2e28d844d9bb70bc67d60932d31fc9256f8a999a_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-jsp:\", \"message\": \"Service 'VulnerableApp-jsp' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/\", \"https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"qNUoWr\", \"url\": \"https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"version_id\": \"qkT2BLp\"}}, \"shortlink\": \"https://sg.run/0n8q\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-jsp\", \"end\": {\"col\": 22, \"line\": 6, \"offset\": 131}, \"start\": {\"col\": 5, \"line\": 6, \"offset\": 114}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 6, \"offset\": 114}}, {\"check_id\": \"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"end\": {\"col\": 22, \"line\": 6, \"offset\": 131}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"d15ec8c04e312421413fb88e298c418253cccfa110b5e9e0a8914f84f221dbac8b8564ce7a4e847680d2861fece4352a91f06f51233c60501e6747f439102a66_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-jsp:\", \"message\": \"Service 'VulnerableApp-jsp' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir\", \"https://blog.atomist.com/security-of-docker-kubernetes/\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"v8U5vN\", \"url\": \"https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"version_id\": \"o5Tg9ob\"}}, \"shortlink\": \"https://sg.run/e4JE\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-jsp\", \"end\": {\"col\": 22, \"line\": 6, \"offset\": 131}, \"start\": {\"col\": 5, \"line\": 6, \"offset\": 114}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 6, \"offset\": 114}}, {\"check_id\": \"yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"end\": {\"col\": 22, \"line\": 9, \"offset\": 210}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"b82e7e9f1fa5752e251942ad0a139ca9aff9de173f9b3019f241bfdfab96268c927943ea990ab945f93d9329ca17bd82f26f640e99cc6439682139686fe15eba_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-php:\", \"message\": \"Service 'VulnerableApp-php' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/\", \"https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"qNUoWr\", \"url\": \"https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"version_id\": \"qkT2BLp\"}}, \"shortlink\": \"https://sg.run/0n8q\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-php\", \"end\": {\"col\": 22, \"line\": 9, \"offset\": 210}, \"start\": {\"col\": 5, \"line\": 9, \"offset\": 193}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 9, \"offset\": 193}}, {\"check_id\": \"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"end\": {\"col\": 22, \"line\": 9, \"offset\": 210}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"c1d55de60ef62c5588fab89fb0a0df035fff4d12750100c62b88f0512047f3c3843f1cc24b8baf879f95cd7604b2825d3f17daddbff67ff30b8ec8299f3b683b_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-php:\", \"message\": \"Service 'VulnerableApp-php' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir\", \"https://blog.atomist.com/security-of-docker-kubernetes/\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"v8U5vN\", \"url\": \"https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"version_id\": \"o5Tg9ob\"}}, \"shortlink\": \"https://sg.run/e4JE\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-php\", \"end\": {\"col\": 22, \"line\": 9, \"offset\": 210}, \"start\": {\"col\": 5, \"line\": 9, \"offset\": 193}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 9, \"offset\": 193}}, {\"check_id\": \"yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"end\": {\"col\": 25, \"line\": 12, \"offset\": 295}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"5949e9ab5c8ee557186914529637c50d2dd7b4011f236c6bcf490d0e80823d7c769e5a300e0214fcf9122f64019fca1c95608b1180c7194501bea8fb896ce40f_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-facade:\", \"message\": \"Service 'VulnerableApp-facade' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/\", \"https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"qNUoWr\", \"url\": \"https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"version_id\": \"qkT2BLp\"}}, \"shortlink\": \"https://sg.run/0n8q\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-facade\", \"end\": {\"col\": 25, \"line\": 12, \"offset\": 295}, \"start\": {\"col\": 5, \"line\": 12, \"offset\": 275}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 12, \"offset\": 275}}, {\"check_id\": \"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"end\": {\"col\": 25, \"line\": 12, \"offset\": 295}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"03de6839c7238a1ffe3012b3196fb6d54de068f685675e71c88c18b2a1c9744b97ab60a95d6ada7900eddcb8533b547ced85d4c5a2bb88781d074c2faad2b3d7_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-facade:\", \"message\": \"Service 'VulnerableApp-facade' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir\", \"https://blog.atomist.com/security-of-docker-kubernetes/\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"v8U5vN\", \"url\": \"https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"version_id\": \"o5Tg9ob\"}}, \"shortlink\": \"https://sg.run/e4JE\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-facade\", \"end\": {\"col\": 25, \"line\": 12, \"offset\": 295}, \"start\": {\"col\": 5, \"line\": 12, \"offset\": 275}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 12, \"offset\": 275}}, {\"check_id\": \"generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"end\": {\"col\": 123, \"line\": 249, \"offset\": 22648}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"1333d5c6b69e5b7389540c2c73fa2aed56dd2a11f6774ae39826dd45378774fc7be75e2568adc0b2c8e255b8a6d387c9f3d4b19d53e4c861cb6759c493c8d466_0\", \"is_ignored\": false, \"lines\": \"  \\u001b[1m\\u001b[24meyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\\u001b\", \"message\": \"JWT token detected\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-321: Use of Hard-coded Cryptographic Key\"], \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A02:2021 - Cryptographic Failures\"], \"references\": [\"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"kxU8E8\", \"url\": \"https://semgrep.dev/playground/r/o5Tgljp/generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"version_id\": \"o5Tgljp\"}}, \"shortlink\": \"https://sg.run/05N5\", \"source\": \"https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"source-rule-url\": \"https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py\", \"subcategory\": [\"audit\"], \"technology\": [\"secrets\", \"jwt\"], \"vulnerability_class\": [\"Cryptographic Issues\"]}, \"metavars\": {}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"json\", \"start\": {\"col\": 12, \"line\": 249, \"offset\": 22537}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 42, \"offset\": 1618}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"db0e9841b1183fb8764d633715cd7b2ca8e52cc980abede0f8bbe2eddf93c45bcdf3ead825f19e1c79d01c21d351c831a561820d8dce4b453e7e96893aba4157_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/allEndPoint\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"allEndPoints\", \"end\": {\"col\": 31, \"line\": 43, \"offset\": 1665}, \"start\": {\"col\": 19, \"line\": 43, \"offset\": 1653}}, \"$RETURNTYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 18, \"line\": 43, \"offset\": 1652}, \"start\": {\"col\": 12, \"line\": 43, \"offset\": 1646}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 42, \"offset\": 1604}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 57, \"offset\": 2109}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"8b80541eb876c22a01e966f487fd6ec7f2573a04ac1b6c65465c14601a8796a0be60158d599fbfbfa4ac764e53f8630deb25789694001d1c83df3496ed582768_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/VulnerabilityDefinitions\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"getVulnerabilityDefinitions\", \"end\": {\"col\": 69, \"line\": 58, \"offset\": 2207}, \"start\": {\"col\": 42, \"line\": 58, \"offset\": 2180}}, \"$RETURNTYPE\": {\"abstract_content\": \"List<VulnerabilityDefinition>\", \"end\": {\"col\": 41, \"line\": 58, \"offset\": 2179}, \"start\": {\"col\": 12, \"line\": 58, \"offset\": 2150}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 57, \"offset\": 2095}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 75, \"offset\": 2887}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"4d79c9d97d33e0489d181aec3b23a5772a8877f834f7a0285a6806a5022b808c9d3a7a6f79a70a7b77824ef1663c4769095cfc5c4dbfd466a4a3b2e3c775d669_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/allEndPointJson\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"allEndPointsJsonResponse\", \"end\": {\"col\": 67, \"line\": 76, \"offset\": 2974}, \"start\": {\"col\": 43, \"line\": 76, \"offset\": 2950}}, \"$RETURNTYPE\": {\"abstract_content\": \"List<AllEndPointsResponseBean>\", \"end\": {\"col\": 42, \"line\": 76, \"offset\": 2949}, \"start\": {\"col\": 12, \"line\": 76, \"offset\": 2919}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 75, \"offset\": 2873}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 90, \"offset\": 3399}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"f5c98169269200088cf322e0a264130c13d768aad55c39ead71e6f4b69729a5d3ade3487645d18cc70efc0c8cd62fa4d327f1971896cb8ac3a67975a2eb1ab31_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/scanner\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"getScannerRelatedInformation\", \"end\": {\"col\": 66, \"line\": 91, \"offset\": 3477}, \"start\": {\"col\": 38, \"line\": 91, \"offset\": 3449}}, \"$RETURNTYPE\": {\"abstract_content\": \"List<ScannerResponseBean>\", \"end\": {\"col\": 37, \"line\": 91, \"offset\": 3448}, \"start\": {\"col\": 12, \"line\": 91, \"offset\": 3423}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 90, \"offset\": 3385}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 105, \"offset\": 3974}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"985ffaac5f5de025cd03a2cb65ad8a1dd409ce99caf6cf890572bd6ceb345553ca71a763ab19e6fa993199d5732b38a671736b1b35ae8e62e38070799e01852c_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/scanner/metadata\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"getScannerRelatedMetaInformation\", \"end\": {\"col\": 68, \"line\": 106, \"offset\": 4063}, \"start\": {\"col\": 36, \"line\": 106, \"offset\": 4031}}, \"$RETURNTYPE\": {\"abstract_content\": \"ScannerMetaResponseBean ScannerMetaResponseBean ScannerMetaResponseBean ScannerMetaResponseBean\", \"end\": {\"col\": 35, \"line\": 106, \"offset\": 4030}, \"start\": {\"col\": 12, \"line\": 106, \"offset\": 4007}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 105, \"offset\": 3960}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 121, \"offset\": 4647}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"25a667c319d112d86e31f76653b2849dbf43b124cb4ad042892484949104c96fb9a5b01e5155977eedf275f51f73fc85ff950e4e8a825d7c25cd324c720b1391_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/sitemap.xml\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"sitemapForPassiveScanners\", \"end\": {\"col\": 44, \"line\": 122, \"offset\": 4707}, \"start\": {\"col\": 19, \"line\": 122, \"offset\": 4682}}, \"$RETURNTYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 18, \"line\": 122, \"offset\": 4681}, \"start\": {\"col\": 12, \"line\": 122, \"offset\": 4675}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 121, \"offset\": 4633}}, {\"check_id\": \"java.lang.security.audit.command-injection-process-builder.command-injection-process-builder\", \"end\": {\"col\": 97, \"line\": 50, \"offset\": 2383}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"66b15e3164096e997267bc1db5a79ed98b6cd129242da59f41eaca998130a656b117a12d2244b90fef21ebf951e37b615fa432e06d088a8b3a52fa7278f61fff_0\", \"is_ignored\": false, \"lines\": \"                        new ProcessBuilder(new String[] {\\\"cmd\\\", \\\"/c\\\", \\\"ping -n 2 \\\" + ipAddress})\", \"message\": \"A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"4bUzzo\", \"url\": \"https://semgrep.dev/playground/r/YDTp2B7/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder\", \"version_id\": \"YDTp2B7\"}}, \"shortlink\": \"https://sg.run/gJJe\", \"source\": \"https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder\", \"subcategory\": [\"audit\"], \"technology\": [\"java\"], \"vulnerability_class\": [\"Command Injection\"]}, \"metavars\": {\"$ARG\": {\"abstract_content\": \"\\\"ping -n 2 \\\"+ipAddress\", \"end\": {\"col\": 95, \"line\": 50, \"offset\": 2381}, \"start\": {\"col\": 71, \"line\": 50, \"offset\": 2357}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/commandInjection/CommandInjection.java\", \"start\": {\"col\": 25, \"line\": 50, \"offset\": 2311}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 33, \"offset\": 1344}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"d9218cae413101ae89df6202faeb17dd2c9ea14a19e4775f84838a20ab18a0bc67f040f758c32220cb206bd3e2516860a2ad2cc8c4740958c6eaa989bf5654de_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"fetchFile\", \"end\": {\"col\": 44, \"line\": 35, \"offset\": 1485}, \"start\": {\"col\": 35, \"line\": 35, \"offset\": 1476}}, \"$RETURNTYPE\": {\"abstract_content\": \"ResponseEntity<byte[]>\", \"end\": {\"col\": 34, \"line\": 35, \"offset\": 1475}, \"start\": {\"col\": 12, \"line\": 35, \"offset\": 1453}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 6, \"line\": 33, \"offset\": 1330}}, {\"check_id\": \"java.spring.security.injection.tainted-file-path.tainted-file-path\", \"end\": {\"col\": 44, \"line\": 41, \"offset\": 1819}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"fileName\", \"location\": {\"end\": {\"col\": 86, \"line\": 35, \"offset\": 1527}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 78, \"line\": 35, \"offset\": 1519}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 44, \"line\": 41, \"offset\": 1819}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 17, \"line\": 38, \"offset\": 1612}}, \"new FileInputStream(\\n                        unrestrictedFileUpload.getContentDispositionRoot().toFile()\\n                                + FrameworkConstants.SLASH\\n                                + fileName)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 86, \"line\": 35, \"offset\": 1527}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 78, \"line\": 35, \"offset\": 1519}}, \"fileName\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"8ed5edd577e74ccd84366e6155e64a1996e45c93b509cbb091c42247add8d04d4e237e5132f3dbbd243622824f23eea4e78499ed925c6448b709f5f5c30506f9_0\", \"is_ignored\": false, \"lines\": \"                new FileInputStream(\\n                        unrestrictedFileUpload.getContentDispositionRoot().toFile()\\n                                + FrameworkConstants.SLASH\\n                                + fileName);\", \"message\": \"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"HIGH\", \"cwe\": [\"CWE-23: Relative Path Traversal\"], \"impact\": \"HIGH\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://owasp.org/www-community/attacks/Path_Traversal\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"lBUxok\", \"url\": \"https://semgrep.dev/playground/r/DkT6nEd/java.spring.security.injection.tainted-file-path.tainted-file-path\", \"version_id\": \"DkT6nEd\"}}, \"shortlink\": \"https://sg.run/x9o0\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Path Traversal\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"PathVariable\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"fetchFile\", \"end\": {\"col\": 44, \"line\": 35, \"offset\": 1485}, \"start\": {\"col\": 35, \"line\": 35, \"offset\": 1476}}, \"$REQ\": {\"abstract_content\": \"PathVariable PathVariable PathVariable PathVariable PathVariable PathVariable\", \"end\": {\"col\": 58, \"line\": 35, \"offset\": 1499}, \"start\": {\"col\": 46, \"line\": 35, \"offset\": 1487}}, \"$SOURCE\": {\"abstract_content\": \"fileName\", \"end\": {\"col\": 86, \"line\": 35, \"offset\": 1527}, \"start\": {\"col\": 78, \"line\": 35, \"offset\": 1519}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 77, \"line\": 35, \"offset\": 1518}, \"start\": {\"col\": 71, \"line\": 35, \"offset\": 1512}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 17, \"line\": 38, \"offset\": 1612}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 53, \"line\": 39, \"offset\": 1679}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 34, \"offset\": 1444}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 47, \"line\": 34, \"offset\": 1433}}}, {\"content\": \"queryParameterURL\", \"location\": {\"end\": {\"col\": 33, \"line\": 36, \"offset\": 1533}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 16, \"line\": 36, \"offset\": 1516}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 53, \"line\": 39, \"offset\": 1679}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 27, \"line\": 39, \"offset\": 1653}}, \"new URL(queryParameterURL)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 34, \"offset\": 1444}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 47, \"line\": 34, \"offset\": 1433}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"924dbbb13be25f803a3594c26b4d354125e50239d376622a21b03baa04a285f93b43efc3c76d5e3f4c067865f36207ff3e12ad2d0b541deefe99ded0e5282c72_0\", \"is_ignored\": false, \"lines\": \"                URL url = new URL(queryParameterURL);\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevelUnsecure\", \"end\": {\"col\": 68, \"line\": 33, \"offset\": 1385}, \"start\": {\"col\": 35, \"line\": 33, \"offset\": 1352}}, \"$ONEARG\": {\"abstract_content\": \"queryParameterURL\", \"end\": {\"col\": 52, \"line\": 39, \"offset\": 1678}, \"propagated_value\": {\"svalue_abstract_content\": \"queryParams.get(URL_PARAM_KEY)\", \"svalue_end\": {\"col\": 66, \"line\": 36, \"offset\": 1566}, \"svalue_start\": {\"col\": 36, \"line\": 36, \"offset\": 1536}}, \"start\": {\"col\": 35, \"line\": 39, \"offset\": 1661}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 34, \"offset\": 1412}, \"start\": {\"col\": 14, \"line\": 34, \"offset\": 1400}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 34, \"offset\": 1444}, \"start\": {\"col\": 47, \"line\": 34, \"offset\": 1433}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 34, \"offset\": 1432}, \"start\": {\"col\": 27, \"line\": 34, \"offset\": 1413}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 27, \"line\": 39, \"offset\": 1653}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 53, \"line\": 59, \"offset\": 2628}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 54, \"offset\": 2342}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 47, \"line\": 54, \"offset\": 2331}}}, {\"content\": \"queryParameterURL\", \"location\": {\"end\": {\"col\": 33, \"line\": 56, \"offset\": 2431}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 16, \"line\": 56, \"offset\": 2414}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 53, \"line\": 59, \"offset\": 2628}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 27, \"line\": 59, \"offset\": 2602}}, \"new URL(queryParameterURL)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 54, \"offset\": 2342}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 47, \"line\": 54, \"offset\": 2331}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"3c826404f24c32fe1169f21bbcdf89a30dada46f43b833317edaffc9089c97be732c1e8e7159314c23a5368044008bae842815e6f0d3a6ae9e15562aad54aaee_0\", \"is_ignored\": false, \"lines\": \"                URL url = new URL(queryParameterURL);\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevelUnsecureLevel2\", \"end\": {\"col\": 74, \"line\": 53, \"offset\": 2283}, \"start\": {\"col\": 35, \"line\": 53, \"offset\": 2244}}, \"$ONEARG\": {\"abstract_content\": \"queryParameterURL\", \"end\": {\"col\": 52, \"line\": 59, \"offset\": 2627}, \"propagated_value\": {\"svalue_abstract_content\": \"queryParams.get(URL_PARAM_KEY)\", \"svalue_end\": {\"col\": 66, \"line\": 56, \"offset\": 2464}, \"svalue_start\": {\"col\": 36, \"line\": 56, \"offset\": 2434}}, \"start\": {\"col\": 35, \"line\": 59, \"offset\": 2610}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 54, \"offset\": 2310}, \"start\": {\"col\": 14, \"line\": 54, \"offset\": 2298}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 54, \"offset\": 2342}, \"start\": {\"col\": 47, \"line\": 54, \"offset\": 2331}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 54, \"offset\": 2330}, \"start\": {\"col\": 27, \"line\": 54, \"offset\": 2311}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 27, \"line\": 59, \"offset\": 2602}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 52, \"line\": 53, \"offset\": 2577}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 49, \"offset\": 2353}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 49, \"offset\": 2342}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 50, \"offset\": 2374}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 50, \"offset\": 2372}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 52, \"line\": 53, \"offset\": 2577}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 53, \"offset\": 2542}}, \"\\\"select * from cars where id=\\\" + id\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 49, \"offset\": 2353}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 49, \"offset\": 2342}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"806cfd929b5dae6dd398a2348ed8d9781ea670269a3ad39e11e54df32d7670ab5ddbfd0f88922181ca0308f17921e5ce0d8ec29d4778839877350585a3f3a378_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id=\\\" + id,\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel1\", \"end\": {\"col\": 58, \"line\": 48, \"offset\": 2294}, \"start\": {\"col\": 35, \"line\": 48, \"offset\": 2271}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 49, \"offset\": 2321}, \"start\": {\"col\": 14, \"line\": 49, \"offset\": 2309}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 49, \"offset\": 2353}, \"start\": {\"col\": 47, \"line\": 49, \"offset\": 2342}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id=\", \"end\": {\"col\": 46, \"line\": 53, \"offset\": 2571}, \"start\": {\"col\": 18, \"line\": 53, \"offset\": 2543}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 49, \"offset\": 2341}, \"start\": {\"col\": 27, \"line\": 49, \"offset\": 2322}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 53, \"offset\": 2542}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 59, \"line\": 77, \"offset\": 3755}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 72, \"offset\": 3433}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 72, \"offset\": 3422}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 73, \"offset\": 3454}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 73, \"offset\": 3452}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 59, \"line\": 77, \"offset\": 3755}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 77, \"offset\": 3713}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 72, \"offset\": 3433}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 72, \"offset\": 3422}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"85401b8e6803f0c014696d60069343d62793bec4132cd3fef227234b6cfb4db5e6dc13fc38ad796df20696e14d1412e41a0a25705888cd39c9a8c5f3c073fe1c_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id='\\\" + id + \\\"'\\\",\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel2\", \"end\": {\"col\": 58, \"line\": 71, \"offset\": 3374}, \"start\": {\"col\": 35, \"line\": 71, \"offset\": 3351}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 72, \"offset\": 3401}, \"start\": {\"col\": 14, \"line\": 72, \"offset\": 3389}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 72, \"offset\": 3433}, \"start\": {\"col\": 47, \"line\": 72, \"offset\": 3422}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 47, \"line\": 77, \"offset\": 3743}, \"start\": {\"col\": 18, \"line\": 77, \"offset\": 3714}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 72, \"offset\": 3421}, \"start\": {\"col\": 27, \"line\": 72, \"offset\": 3402}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 77, \"offset\": 3713}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 64, \"line\": 65, \"offset\": 3157}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 59, \"offset\": 2856}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 59, \"offset\": 2845}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 60, \"offset\": 2877}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 60, \"offset\": 2875}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 64, \"line\": 65, \"offset\": 3157}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 65, \"offset\": 3122}}, \"\\\"select * from cars where id=\\\" + id\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 59, \"offset\": 2856}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 59, \"offset\": 2845}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"8aeba9eecaf16daf777a25ef297ae980bb86383473a895d20af843e0e8590ea79f72b6f1c3a21904bddb76dff965b9d96aaa0efdebd2cb16d6e833869c49bf4f_0\", \"is_ignored\": false, \"lines\": \"                            \\\"select * from cars where id=\\\" + id,\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"doesCarInformationExistsLevel1\", \"end\": {\"col\": 65, \"line\": 58, \"offset\": 2797}, \"start\": {\"col\": 35, \"line\": 58, \"offset\": 2767}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 59, \"offset\": 2824}, \"start\": {\"col\": 14, \"line\": 59, \"offset\": 2812}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 59, \"offset\": 2856}, \"start\": {\"col\": 47, \"line\": 59, \"offset\": 2845}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id=\", \"end\": {\"col\": 58, \"line\": 65, \"offset\": 3151}, \"start\": {\"col\": 30, \"line\": 65, \"offset\": 3123}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 59, \"offset\": 2844}, \"start\": {\"col\": 27, \"line\": 59, \"offset\": 2825}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 65, \"offset\": 3122}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 71, \"line\": 110, \"offset\": 5691}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 104, \"offset\": 5383}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 104, \"offset\": 5372}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 105, \"offset\": 5404}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 105, \"offset\": 5402}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 71, \"line\": 110, \"offset\": 5691}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 110, \"offset\": 5649}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 104, \"offset\": 5383}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 104, \"offset\": 5372}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"70219803503a17ba21ff8264bbf548c7ef3c4980ab273833814e072b25b545834048c66b3e6783513533dd84b21a167aa6b08b45040013c0dbbc52be6d0e6508_0\", \"is_ignored\": false, \"lines\": \"                            \\\"select * from cars where id='\\\" + id + \\\"'\\\",\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"doesCarInformationExistsLevel2\", \"end\": {\"col\": 65, \"line\": 103, \"offset\": 5324}, \"start\": {\"col\": 35, \"line\": 103, \"offset\": 5294}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 104, \"offset\": 5351}, \"start\": {\"col\": 14, \"line\": 104, \"offset\": 5339}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 104, \"offset\": 5383}, \"start\": {\"col\": 47, \"line\": 104, \"offset\": 5372}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 59, \"line\": 110, \"offset\": 5679}, \"start\": {\"col\": 30, \"line\": 110, \"offset\": 5650}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 104, \"offset\": 5371}, \"start\": {\"col\": 27, \"line\": 104, \"offset\": 5352}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 110, \"offset\": 5649}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 71, \"line\": 158, \"offset\": 8507}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 150, \"offset\": 8071}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 150, \"offset\": 8060}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 151, \"offset\": 8092}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 151, \"offset\": 8090}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 71, \"line\": 158, \"offset\": 8507}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 158, \"offset\": 8465}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 150, \"offset\": 8071}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 150, \"offset\": 8060}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"bb10c71ea3a4be145d3774c86570c9f5267de6d2985f2a1a3ea6ec48e3e23656933571d45179f282c6ccba4e67ff465fffafcacfc1ff332b62d7203f37af0e23_0\", \"is_ignored\": false, \"lines\": \"                            \\\"select * from cars where id='\\\" + id + \\\"'\\\",\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"doesCarInformationExistsLevel3\", \"end\": {\"col\": 65, \"line\": 149, \"offset\": 8012}, \"start\": {\"col\": 35, \"line\": 149, \"offset\": 7982}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 150, \"offset\": 8039}, \"start\": {\"col\": 14, \"line\": 150, \"offset\": 8027}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 150, \"offset\": 8071}, \"start\": {\"col\": 47, \"line\": 150, \"offset\": 8060}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 59, \"line\": 158, \"offset\": 8495}, \"start\": {\"col\": 30, \"line\": 158, \"offset\": 8466}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 150, \"offset\": 8059}, \"start\": {\"col\": 27, \"line\": 150, \"offset\": 8040}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 158, \"offset\": 8465}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 87, \"line\": 209, \"offset\": 11379}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 200, \"offset\": 10841}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 200, \"offset\": 10830}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 24, \"line\": 201, \"offset\": 10868}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 22, \"line\": 201, \"offset\": 10866}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 87, \"line\": 209, \"offset\": 11379}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 45, \"line\": 209, \"offset\": 11337}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 200, \"offset\": 10841}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 200, \"offset\": 10830}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"73aa27e6fb50b5dc93ee75916c81602f6ec4d96d037212424395b4cf9e5dc5b54e941879519dfe6177e73de4b91921dcf4b8113023ed7503187f5aa30dc2c227_0\", \"is_ignored\": false, \"lines\": \"                                            \\\"select * from cars where id='\\\" + id + \\\"'\\\"),\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"doesCarInformationExistsLevel4\", \"end\": {\"col\": 65, \"line\": 199, \"offset\": 10782}, \"start\": {\"col\": 35, \"line\": 199, \"offset\": 10752}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 200, \"offset\": 10809}, \"start\": {\"col\": 14, \"line\": 200, \"offset\": 10797}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 200, \"offset\": 10841}, \"start\": {\"col\": 47, \"line\": 200, \"offset\": 10830}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 75, \"line\": 209, \"offset\": 11367}, \"start\": {\"col\": 46, \"line\": 209, \"offset\": 11338}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 200, \"offset\": 10829}, \"start\": {\"col\": 27, \"line\": 200, \"offset\": 10810}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 45, \"line\": 209, \"offset\": 11337}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 52, \"line\": 48, \"offset\": 2225}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 64, \"line\": 45, \"offset\": 2075}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 45, \"offset\": 2064}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 24, \"line\": 46, \"offset\": 2102}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 22, \"line\": 46, \"offset\": 2100}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 52, \"line\": 48, \"offset\": 2225}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 48, \"offset\": 2190}}, \"\\\"select * from cars where id=\\\" + id\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 64, \"line\": 45, \"offset\": 2075}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 45, \"offset\": 2064}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"fea467c7aace1e579c115f3e5f49b32b57c9c4612a1528f74dc8961e713eff7e04719435ec09bc15368538976f0b7fb3808c561a7a4652e0f9718cc34ec5b6bd_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id=\\\" + id, this::resultSetToResponse);\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel1\", \"end\": {\"col\": 66, \"line\": 44, \"offset\": 2010}, \"start\": {\"col\": 43, \"line\": 44, \"offset\": 1987}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 45, \"offset\": 2037}, \"start\": {\"col\": 14, \"line\": 45, \"offset\": 2025}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 64, \"line\": 45, \"offset\": 2075}, \"start\": {\"col\": 53, \"line\": 45, \"offset\": 2064}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id=\", \"end\": {\"col\": 46, \"line\": 48, \"offset\": 2219}, \"start\": {\"col\": 18, \"line\": 48, \"offset\": 2191}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 52, \"line\": 45, \"offset\": 2063}, \"start\": {\"col\": 33, \"line\": 45, \"offset\": 2044}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 48, \"offset\": 2190}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 59, \"line\": 63, \"offset\": 2974}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 64, \"line\": 60, \"offset\": 2817}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 60, \"offset\": 2806}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 24, \"line\": 61, \"offset\": 2844}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 22, \"line\": 61, \"offset\": 2842}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 59, \"line\": 63, \"offset\": 2974}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 63, \"offset\": 2932}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 64, \"line\": 60, \"offset\": 2817}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 60, \"offset\": 2806}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"063c4e0cb45eb014ed4de48340b8d8cebc4052d2ea82ec61929d347722f40b1e3ae025fa84d59ea18f5c02a1e87ea64efbe58748413dc92eb6898cde016fd20c_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id='\\\" + id + \\\"'\\\", this::resultSetToResponse);\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel2\", \"end\": {\"col\": 66, \"line\": 59, \"offset\": 2752}, \"start\": {\"col\": 43, \"line\": 59, \"offset\": 2729}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 60, \"offset\": 2779}, \"start\": {\"col\": 14, \"line\": 60, \"offset\": 2767}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 64, \"line\": 60, \"offset\": 2817}, \"start\": {\"col\": 53, \"line\": 60, \"offset\": 2806}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 47, \"line\": 63, \"offset\": 2962}, \"start\": {\"col\": 18, \"line\": 63, \"offset\": 2933}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 52, \"line\": 60, \"offset\": 2805}, \"start\": {\"col\": 33, \"line\": 60, \"offset\": 2786}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 63, \"offset\": 2932}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 59, \"line\": 78, \"offset\": 3727}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 64, \"line\": 75, \"offset\": 3550}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 75, \"offset\": 3539}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 24, \"line\": 76, \"offset\": 3577}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 22, \"line\": 76, \"offset\": 3575}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 59, \"line\": 78, \"offset\": 3727}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 78, \"offset\": 3685}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 64, \"line\": 75, \"offset\": 3550}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 75, \"offset\": 3539}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"87e936120c0a99aba88cc381809f13fe4efa5145c931b0088e470ff0bee49f6a089b8a2a675711a408ffc244f9fb03a447aec67202b35959517fa46fd91e729f_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id='\\\" + id + \\\"'\\\", this::resultSetToResponse);\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel3\", \"end\": {\"col\": 66, \"line\": 74, \"offset\": 3485}, \"start\": {\"col\": 43, \"line\": 74, \"offset\": 3462}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 75, \"offset\": 3512}, \"start\": {\"col\": 14, \"line\": 75, \"offset\": 3500}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 64, \"line\": 75, \"offset\": 3550}, \"start\": {\"col\": 53, \"line\": 75, \"offset\": 3539}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 47, \"line\": 78, \"offset\": 3715}, \"start\": {\"col\": 18, \"line\": 78, \"offset\": 3686}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 52, \"line\": 75, \"offset\": 3538}, \"start\": {\"col\": 33, \"line\": 75, \"offset\": 3519}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 78, \"offset\": 3685}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 33, \"line\": 64, \"offset\": 2574}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"url\", \"location\": {\"end\": {\"col\": 86, \"line\": 61, \"offset\": 2468}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 83, \"line\": 61, \"offset\": 2465}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 33, \"line\": 64, \"offset\": 2574}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 21, \"line\": 64, \"offset\": 2562}}, \"new URL(url)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 86, \"line\": 61, \"offset\": 2468}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 83, \"line\": 61, \"offset\": 2465}}, \"url\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"2b1ac4780ef79bf693ff9798dc8877cbdce6767cb0f340f705d1caa2549bf0765bcd70efb981c92365117df469e6254122c58a7d05c51f6eb5d9281282dab787_0\", \"is_ignored\": false, \"lines\": \"            URL u = new URL(url);\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getGenericVulnerabilityResponseWhenURL\", \"end\": {\"col\": 51, \"line\": 61, \"offset\": 2433}, \"start\": {\"col\": 13, \"line\": 61, \"offset\": 2395}}, \"$ONEARG\": {\"abstract_content\": \"url\", \"end\": {\"col\": 32, \"line\": 64, \"offset\": 2573}, \"start\": {\"col\": 29, \"line\": 64, \"offset\": 2570}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 65, \"line\": 61, \"offset\": 2447}, \"start\": {\"col\": 53, \"line\": 61, \"offset\": 2435}}, \"$SOURCE\": {\"abstract_content\": \"url\", \"end\": {\"col\": 86, \"line\": 61, \"offset\": 2468}, \"start\": {\"col\": 83, \"line\": 61, \"offset\": 2465}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 82, \"line\": 61, \"offset\": 2464}, \"start\": {\"col\": 76, \"line\": 61, \"offset\": 2458}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 21, \"line\": 64, \"offset\": 2562}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 29, \"line\": 127, \"offset\": 5396}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"url\", \"location\": {\"end\": {\"col\": 47, \"line\": 125, \"offset\": 5280}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 44, \"line\": 125, \"offset\": 5277}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 29, \"line\": 127, \"offset\": 5396}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 17, \"line\": 127, \"offset\": 5384}}, \"new URL(url)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 47, \"line\": 125, \"offset\": 5280}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 44, \"line\": 125, \"offset\": 5277}}, \"url\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"3564117d0407e0f414b8ded443ce8b2c629949c79d4a3018bb2b620cab1834bce9fc800b8d4fd484dd21f2eef53a1e7604470096031e980ad1fc0ebde939ec73_0\", \"is_ignored\": false, \"lines\": \"            if (new URL(url).getHost().equals(\\\"169.254.169.254\\\")) {\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel3\", \"end\": {\"col\": 95, \"line\": 124, \"offset\": 5232}, \"start\": {\"col\": 69, \"line\": 124, \"offset\": 5206}}, \"$ONEARG\": {\"abstract_content\": \"url\", \"end\": {\"col\": 28, \"line\": 127, \"offset\": 5395}, \"start\": {\"col\": 25, \"line\": 127, \"offset\": 5392}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 125, \"offset\": 5259}, \"start\": {\"col\": 14, \"line\": 125, \"offset\": 5247}}, \"$SOURCE\": {\"abstract_content\": \"url\", \"end\": {\"col\": 47, \"line\": 125, \"offset\": 5280}, \"start\": {\"col\": 44, \"line\": 125, \"offset\": 5277}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 43, \"line\": 125, \"offset\": 5276}, \"start\": {\"col\": 37, \"line\": 125, \"offset\": 5270}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 17, \"line\": 127, \"offset\": 5384}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 59, \"line\": 144, \"offset\": 6258}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"url\", \"location\": {\"end\": {\"col\": 47, \"line\": 142, \"offset\": 6112}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 44, \"line\": 142, \"offset\": 6109}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 59, \"line\": 144, \"offset\": 6258}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 47, \"line\": 144, \"offset\": 6246}}, \"new URL(url)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 47, \"line\": 142, \"offset\": 6112}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 44, \"line\": 142, \"offset\": 6109}}, \"url\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"992946b2e6ab66db40657c48034240eec0ea6a434b4f575912fe822db91bf7ca590e04c9efaa342b485794efd0187c8f69cfbeb2b4555788f324c30f74587638_0\", \"is_ignored\": false, \"lines\": \"            if (MetaDataServiceMock.isPresent(new URL(url))) {\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel4\", \"end\": {\"col\": 95, \"line\": 141, \"offset\": 6064}, \"start\": {\"col\": 69, \"line\": 141, \"offset\": 6038}}, \"$ONEARG\": {\"abstract_content\": \"url\", \"end\": {\"col\": 58, \"line\": 144, \"offset\": 6257}, \"start\": {\"col\": 55, \"line\": 144, \"offset\": 6254}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 142, \"offset\": 6091}, \"start\": {\"col\": 14, \"line\": 142, \"offset\": 6079}}, \"$SOURCE\": {\"abstract_content\": \"url\", \"end\": {\"col\": 47, \"line\": 142, \"offset\": 6112}, \"start\": {\"col\": 44, \"line\": 142, \"offset\": 6109}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 43, \"line\": 142, \"offset\": 6108}, \"start\": {\"col\": 37, \"line\": 142, \"offset\": 6102}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 47, \"line\": 144, \"offset\": 6246}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 79, \"line\": 54, \"offset\": 2442}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 49, \"offset\": 2225}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 49, \"offset\": 2212}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 79, \"line\": 54, \"offset\": 2442}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 17, \"line\": 54, \"offset\": 2380}}, \"String.format(vulnerablePayloadWithPlaceHolder, imageLocation)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 49, \"offset\": 2225}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 49, \"offset\": 2212}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_0\", \"is_ignored\": false, \"lines\": \"                String.format(vulnerablePayloadWithPlaceHolder, imageLocation), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 94, \"line\": 51, \"offset\": 2323}, \"start\": {\"col\": 52, \"line\": 51, \"offset\": 2281}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel1\", \"end\": {\"col\": 61, \"line\": 48, \"offset\": 2161}, \"start\": {\"col\": 35, \"line\": 48, \"offset\": 2135}}, \"$PAYLOAD\": {\"abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder imageLocation)\", \"end\": {\"col\": 79, \"line\": 54, \"offset\": 2442}, \"start\": {\"col\": 17, \"line\": 54, \"offset\": 2380}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 49, \"offset\": 2225}, \"start\": {\"col\": 50, \"line\": 49, \"offset\": 2212}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 49, \"offset\": 2211}, \"start\": {\"col\": 43, \"line\": 49, \"offset\": 2205}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 63, \"line\": 54, \"offset\": 2426}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 95, \"line\": 51, \"offset\": 2324}, \"svalue_start\": {\"col\": 51, \"line\": 51, \"offset\": 2280}}, \"start\": {\"col\": 31, \"line\": 54, \"offset\": 2394}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 17, \"line\": 54, \"offset\": 2380}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 44, \"line\": 70, \"offset\": 3196}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 64, \"offset\": 2957}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 64, \"offset\": 2944}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 23, \"line\": 68, \"offset\": 3085}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 16, \"line\": 68, \"offset\": 3078}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 44, \"line\": 70, \"offset\": 3196}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 70, \"offset\": 3189}}, \"payload\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 64, \"offset\": 2957}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 64, \"offset\": 2944}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_1\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<>(payload, HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 98, \"line\": 66, \"offset\": 3059}, \"start\": {\"col\": 52, \"line\": 66, \"offset\": 3013}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel2\", \"end\": {\"col\": 61, \"line\": 63, \"offset\": 2893}, \"start\": {\"col\": 35, \"line\": 63, \"offset\": 2867}}, \"$PAYLOAD\": {\"abstract_content\": \"payload\", \"end\": {\"col\": 44, \"line\": 70, \"offset\": 3196}, \"propagated_value\": {\"svalue_abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder imageLocation)\", \"svalue_end\": {\"col\": 88, \"line\": 68, \"offset\": 3150}, \"svalue_start\": {\"col\": 26, \"line\": 68, \"offset\": 3088}}, \"start\": {\"col\": 37, \"line\": 70, \"offset\": 3189}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 64, \"offset\": 2957}, \"start\": {\"col\": 50, \"line\": 64, \"offset\": 2944}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 64, \"offset\": 2943}, \"start\": {\"col\": 43, \"line\": 64, \"offset\": 2937}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 72, \"line\": 68, \"offset\": 3134}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 99, \"line\": 66, \"offset\": 3060}, \"svalue_start\": {\"col\": 51, \"line\": 66, \"offset\": 3012}}, \"start\": {\"col\": 40, \"line\": 68, \"offset\": 3102}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 70, \"offset\": 3189}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 44, \"line\": 89, \"offset\": 4085}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 80, \"offset\": 3754}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 80, \"offset\": 3741}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 23, \"line\": 84, \"offset\": 3878}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 16, \"line\": 84, \"offset\": 3871}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 44, \"line\": 89, \"offset\": 4085}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 89, \"offset\": 4078}}, \"payload\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 80, \"offset\": 3754}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 80, \"offset\": 3741}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_2\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<>(payload, HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 94, \"line\": 82, \"offset\": 3852}, \"start\": {\"col\": 52, \"line\": 82, \"offset\": 3810}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel3\", \"end\": {\"col\": 61, \"line\": 79, \"offset\": 3690}, \"start\": {\"col\": 35, \"line\": 79, \"offset\": 3664}}, \"$PAYLOAD\": {\"abstract_content\": \"payload\", \"end\": {\"col\": 44, \"line\": 89, \"offset\": 4085}, \"propagated_value\": {\"svalue_abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder StringEscapeUtils.escapeHtml4(imageLocation))\", \"svalue_end\": {\"col\": 70, \"line\": 87, \"offset\": 4039}, \"svalue_start\": {\"col\": 17, \"line\": 85, \"offset\": 3897}}, \"start\": {\"col\": 37, \"line\": 89, \"offset\": 4078}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 80, \"offset\": 3754}, \"start\": {\"col\": 50, \"line\": 80, \"offset\": 3741}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 80, \"offset\": 3740}, \"start\": {\"col\": 43, \"line\": 80, \"offset\": 3734}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 57, \"line\": 86, \"offset\": 3968}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 95, \"line\": 82, \"offset\": 3853}, \"svalue_start\": {\"col\": 51, \"line\": 82, \"offset\": 3809}}, \"start\": {\"col\": 25, \"line\": 86, \"offset\": 3936}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 89, \"offset\": 4078}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 55, \"line\": 113, \"offset\": 5251}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 101, \"offset\": 4754}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 101, \"offset\": 4741}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 20, \"line\": 107, \"offset\": 5004}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 13, \"line\": 107, \"offset\": 4997}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 55, \"line\": 113, \"offset\": 5251}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 113, \"offset\": 5233}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 101, \"offset\": 4754}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 101, \"offset\": 4741}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_3\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 94, \"line\": 103, \"offset\": 4852}, \"start\": {\"col\": 52, \"line\": 103, \"offset\": 4810}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel4\", \"end\": {\"col\": 61, \"line\": 100, \"offset\": 4690}, \"start\": {\"col\": 35, \"line\": 100, \"offset\": 4664}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 55, \"line\": 113, \"offset\": 5251}, \"start\": {\"col\": 37, \"line\": 113, \"offset\": 5233}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 101, \"offset\": 4754}, \"start\": {\"col\": 50, \"line\": 101, \"offset\": 4741}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 101, \"offset\": 4740}, \"start\": {\"col\": 43, \"line\": 101, \"offset\": 4734}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 61, \"line\": 109, \"offset\": 5108}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 95, \"line\": 103, \"offset\": 4853}, \"svalue_start\": {\"col\": 51, \"line\": 103, \"offset\": 4809}}, \"start\": {\"col\": 29, \"line\": 109, \"offset\": 5076}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 113, \"offset\": 5233}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 55, \"line\": 145, \"offset\": 6683}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 124, \"offset\": 5844}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 124, \"offset\": 5831}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 20, \"line\": 139, \"offset\": 6436}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 13, \"line\": 139, \"offset\": 6429}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 55, \"line\": 145, \"offset\": 6683}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 145, \"offset\": 6665}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 124, \"offset\": 5844}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 124, \"offset\": 5831}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_4\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 94, \"line\": 126, \"offset\": 5942}, \"start\": {\"col\": 52, \"line\": 126, \"offset\": 5900}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel5\", \"end\": {\"col\": 61, \"line\": 123, \"offset\": 5780}, \"start\": {\"col\": 35, \"line\": 123, \"offset\": 5754}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 55, \"line\": 145, \"offset\": 6683}, \"start\": {\"col\": 37, \"line\": 145, \"offset\": 6665}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 124, \"offset\": 5844}, \"start\": {\"col\": 50, \"line\": 124, \"offset\": 5831}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 124, \"offset\": 5830}, \"start\": {\"col\": 43, \"line\": 124, \"offset\": 5824}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 61, \"line\": 141, \"offset\": 6540}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 95, \"line\": 126, \"offset\": 5943}, \"svalue_start\": {\"col\": 51, \"line\": 126, \"offset\": 5899}}, \"start\": {\"col\": 29, \"line\": 141, \"offset\": 6508}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 145, \"offset\": 6665}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 48, \"line\": 168, \"offset\": 7705}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 158, \"offset\": 7297}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 158, \"offset\": 7284}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 27, \"line\": 163, \"offset\": 7482}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 20, \"line\": 163, \"offset\": 7475}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 48, \"line\": 168, \"offset\": 7705}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 41, \"line\": 168, \"offset\": 7698}}, \"payload\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 158, \"offset\": 7297}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 158, \"offset\": 7284}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_5\", \"is_ignored\": false, \"lines\": \"            return new ResponseEntity<>(payload, HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 98, \"line\": 160, \"offset\": 7399}, \"start\": {\"col\": 52, \"line\": 160, \"offset\": 7353}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel6\", \"end\": {\"col\": 61, \"line\": 157, \"offset\": 7233}, \"start\": {\"col\": 35, \"line\": 157, \"offset\": 7207}}, \"$PAYLOAD\": {\"abstract_content\": \"payload\", \"end\": {\"col\": 48, \"line\": 168, \"offset\": 7705}, \"propagated_value\": {\"svalue_abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder StringEscapeUtils.escapeHtml4(imageLocation))\", \"svalue_end\": {\"col\": 74, \"line\": 166, \"offset\": 7655}, \"svalue_start\": {\"col\": 21, \"line\": 164, \"offset\": 7505}}, \"start\": {\"col\": 41, \"line\": 168, \"offset\": 7698}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 158, \"offset\": 7297}, \"start\": {\"col\": 50, \"line\": 158, \"offset\": 7284}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 158, \"offset\": 7283}, \"start\": {\"col\": 43, \"line\": 158, \"offset\": 7277}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 61, \"line\": 165, \"offset\": 7580}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 99, \"line\": 160, \"offset\": 7400}, \"svalue_start\": {\"col\": 51, \"line\": 160, \"offset\": 7352}}, \"start\": {\"col\": 29, \"line\": 165, \"offset\": 7548}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 41, \"line\": 168, \"offset\": 7698}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 48, \"line\": 198, \"offset\": 9010}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 186, \"offset\": 8475}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 186, \"offset\": 8462}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 27, \"line\": 193, \"offset\": 8793}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 20, \"line\": 193, \"offset\": 8786}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 48, \"line\": 198, \"offset\": 9010}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 41, \"line\": 198, \"offset\": 9003}}, \"payload\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 186, \"offset\": 8475}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 186, \"offset\": 8462}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_6\", \"is_ignored\": false, \"lines\": \"            return new ResponseEntity<>(payload, HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 98, \"line\": 187, \"offset\": 8576}, \"start\": {\"col\": 52, \"line\": 187, \"offset\": 8530}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevelSecure\", \"end\": {\"col\": 66, \"line\": 185, \"offset\": 8411}, \"start\": {\"col\": 35, \"line\": 185, \"offset\": 8380}}, \"$PAYLOAD\": {\"abstract_content\": \"payload\", \"end\": {\"col\": 48, \"line\": 198, \"offset\": 9010}, \"propagated_value\": {\"svalue_abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder HtmlUtils.htmlEscapeHex(imageLocation))\", \"svalue_end\": {\"col\": 68, \"line\": 196, \"offset\": 8960}, \"svalue_start\": {\"col\": 21, \"line\": 194, \"offset\": 8816}}, \"start\": {\"col\": 41, \"line\": 198, \"offset\": 9003}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 186, \"offset\": 8475}, \"start\": {\"col\": 50, \"line\": 186, \"offset\": 8462}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 186, \"offset\": 8461}, \"start\": {\"col\": 43, \"line\": 186, \"offset\": 8455}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 61, \"line\": 195, \"offset\": 8891}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 99, \"line\": 187, \"offset\": 8577}, \"svalue_start\": {\"col\": 51, \"line\": 187, \"offset\": 8529}}, \"start\": {\"col\": 29, \"line\": 195, \"offset\": 8859}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 41, \"line\": 198, \"offset\": 9003}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 61, \"line\": 38, \"offset\": 1728}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 32, \"offset\": 1371}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 32, \"offset\": 1360}}}, {\"content\": \"map\", \"location\": {\"end\": {\"col\": 43, \"line\": 35, \"offset\": 1536}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 40, \"line\": 35, \"offset\": 1533}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 20, \"line\": 36, \"offset\": 1584}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 13, \"line\": 36, \"offset\": 1577}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 61, \"line\": 38, \"offset\": 1728}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 38, \"offset\": 1710}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 32, \"offset\": 1371}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 32, \"offset\": 1360}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"d04b36f55a78a09c4524a8b9363418f097d56f5b3273cb8d7c012b2089939244526e181a38bae1f82371799feb9fba6071d7f60fd0a46dadf9a3eea40ea1938a_0\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$ERROR\": {\"abstract_content\": \"String\", \"end\": {\"col\": 41, \"line\": 38, \"offset\": 1708}, \"start\": {\"col\": 35, \"line\": 38, \"offset\": 1702}}, \"$HTMLSTR\": {\"abstract_content\": \"<div>%s<div>\", \"end\": {\"col\": 64, \"line\": 33, \"offset\": 1438}, \"start\": {\"col\": 52, \"line\": 33, \"offset\": 1426}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel1\", \"end\": {\"col\": 61, \"line\": 31, \"offset\": 1312}, \"start\": {\"col\": 35, \"line\": 31, \"offset\": 1286}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 61, \"line\": 38, \"offset\": 1728}, \"start\": {\"col\": 43, \"line\": 38, \"offset\": 1710}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 32, \"offset\": 1371}, \"start\": {\"col\": 47, \"line\": 32, \"offset\": 1360}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 32, \"offset\": 1359}, \"start\": {\"col\": 27, \"line\": 32, \"offset\": 1340}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 74, \"line\": 36, \"offset\": 1638}, \"start\": {\"col\": 42, \"line\": 36, \"offset\": 1606}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 38, \"offset\": 1710}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 61, \"line\": 61, \"offset\": 2948}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 51, \"offset\": 2399}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 51, \"offset\": 2388}}}, {\"content\": \"map\", \"location\": {\"end\": {\"col\": 43, \"line\": 55, \"offset\": 2640}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 40, \"line\": 55, \"offset\": 2637}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 24, \"line\": 58, \"offset\": 2790}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 17, \"line\": 58, \"offset\": 2783}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 61, \"line\": 61, \"offset\": 2948}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 61, \"offset\": 2930}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 51, \"offset\": 2399}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 51, \"offset\": 2388}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"d04b36f55a78a09c4524a8b9363418f097d56f5b3273cb8d7c012b2089939244526e181a38bae1f82371799feb9fba6071d7f60fd0a46dadf9a3eea40ea1938a_1\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$ERROR\": {\"abstract_content\": \"String\", \"end\": {\"col\": 41, \"line\": 61, \"offset\": 2928}, \"start\": {\"col\": 35, \"line\": 61, \"offset\": 2922}}, \"$HTMLSTR\": {\"abstract_content\": \"<div>%s<div>\", \"end\": {\"col\": 64, \"line\": 52, \"offset\": 2466}, \"start\": {\"col\": 52, \"line\": 52, \"offset\": 2454}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel2\", \"end\": {\"col\": 61, \"line\": 50, \"offset\": 2340}, \"start\": {\"col\": 35, \"line\": 50, \"offset\": 2314}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 61, \"line\": 61, \"offset\": 2948}, \"start\": {\"col\": 43, \"line\": 61, \"offset\": 2930}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 51, \"offset\": 2399}, \"start\": {\"col\": 47, \"line\": 51, \"offset\": 2388}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 51, \"offset\": 2387}, \"start\": {\"col\": 27, \"line\": 51, \"offset\": 2368}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 78, \"line\": 58, \"offset\": 2844}, \"start\": {\"col\": 46, \"line\": 58, \"offset\": 2812}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 61, \"offset\": 2930}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 61, \"line\": 86, \"offset\": 4373}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 74, \"offset\": 3705}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 74, \"offset\": 3694}}}, {\"content\": \"map\", \"location\": {\"end\": {\"col\": 43, \"line\": 78, \"offset\": 3946}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 40, \"line\": 78, \"offset\": 3943}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 24, \"line\": 83, \"offset\": 4215}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 17, \"line\": 83, \"offset\": 4208}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 61, \"line\": 86, \"offset\": 4373}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 86, \"offset\": 4355}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 74, \"offset\": 3705}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 74, \"offset\": 3694}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"d04b36f55a78a09c4524a8b9363418f097d56f5b3273cb8d7c012b2089939244526e181a38bae1f82371799feb9fba6071d7f60fd0a46dadf9a3eea40ea1938a_2\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$ERROR\": {\"abstract_content\": \"String\", \"end\": {\"col\": 41, \"line\": 86, \"offset\": 4353}, \"start\": {\"col\": 35, \"line\": 86, \"offset\": 4347}}, \"$HTMLSTR\": {\"abstract_content\": \"<div>%s<div>\", \"end\": {\"col\": 64, \"line\": 75, \"offset\": 3772}, \"start\": {\"col\": 52, \"line\": 75, \"offset\": 3760}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel3\", \"end\": {\"col\": 61, \"line\": 73, \"offset\": 3646}, \"start\": {\"col\": 35, \"line\": 73, \"offset\": 3620}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 61, \"line\": 86, \"offset\": 4373}, \"start\": {\"col\": 43, \"line\": 86, \"offset\": 4355}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 74, \"offset\": 3705}, \"start\": {\"col\": 47, \"line\": 74, \"offset\": 3694}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 74, \"offset\": 3693}, \"start\": {\"col\": 27, \"line\": 74, \"offset\": 3674}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 78, \"line\": 83, \"offset\": 4269}, \"start\": {\"col\": 46, \"line\": 83, \"offset\": 4237}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 86, \"offset\": 4355}}, {\"check_id\": \"generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"end\": {\"col\": 233, \"line\": 1, \"offset\": 232}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3cd667e7e3f7218614f8cb73bd3d5d63a4bfa545aad29345db78b79d976639770eb2fbb5406b4788db94a738371dfc410a45ed6edbcdaec4a36e5c4c20ef50d7_0\", \"is_ignored\": false, \"lines\": \"NONE_ALGORITHM_ATTACK_CURL_PAYLOAD=curl 'http://localhost:9090/vulnerable/JWTVulnerability/LEVEL_6' -H 'Cookie: JWTToken=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.'\", \"message\": \"JWT token detected\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-321: Use of Hard-coded Cryptographic Key\"], \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A02:2021 - Cryptographic Failures\"], \"references\": [\"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"kxU8E8\", \"url\": \"https://semgrep.dev/playground/r/o5Tgljp/generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"version_id\": \"o5Tgljp\"}}, \"shortlink\": \"https://sg.run/05N5\", \"source\": \"https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"source-rule-url\": \"https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py\", \"subcategory\": [\"audit\"], \"technology\": [\"secrets\", \"jwt\"], \"vulnerability_class\": [\"Cryptographic Issues\"]}, \"metavars\": {}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/attackvectors/JWTVulnerabilityPayload.properties\", \"start\": {\"col\": 122, \"line\": 1, \"offset\": 121}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 64, \"line\": 22, \"offset\": 850}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"6750d594cda4be2d290f4f3fb009cd0216fb400a3ec83efc5ae6fc684580c7ebdc927370901b13d39687503e46e531fed3a51810bde4d40cb474e645f82c0b7b_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"response\\\").innerHTML = data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"response\\\")\", \"end\": {\"col\": 38, \"line\": 22, \"offset\": 824}, \"start\": {\"col\": 3, \"line\": 22, \"offset\": 789}}, \"$HTML\": {\"abstract_content\": \"data.content\", \"end\": {\"col\": 63, \"line\": 22, \"offset\": 849}, \"start\": {\"col\": 51, \"line\": 22, \"offset\": 837}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js\", \"start\": {\"col\": 3, \"line\": 22, \"offset\": 789}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 75, \"line\": 14, \"offset\": 458}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"976f8a40e2838a4206a5400b7fa9514fd5903f5a4dba06b6ab2a25fe44e9085bcdcce972be07e13b3a79fa7bbb65f6c759dcb922e6eba9d2edbdd63011233ab7_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"pingUtilityResponse\\\").innerHTML = data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"pingUtilityResponse\\\")\", \"end\": {\"col\": 49, \"line\": 14, \"offset\": 432}, \"start\": {\"col\": 3, \"line\": 14, \"offset\": 386}}, \"$HTML\": {\"abstract_content\": \"data.content\", \"end\": {\"col\": 74, \"line\": 14, \"offset\": 457}, \"start\": {\"col\": 62, \"line\": 14, \"offset\": 445}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js\", \"start\": {\"col\": 3, \"line\": 14, \"offset\": 386}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 72, \"line\": 18, \"offset\": 583}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"c3c1fd587f14433f7f6b1536b996ee540e0dc565b706a202b92cc365342252b714b8481a2c303d3422743dca3368426aeb3cdf56f464f7e3526cb50d7fc717a1_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"carInformation\\\").innerHTML =\\n      \\\"<img src='\\\" + data.carInformation.imagePath + \\\"' width='900'/>\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"carInformation\\\")\", \"end\": {\"col\": 46, \"line\": 17, \"offset\": 499}, \"start\": {\"col\": 5, \"line\": 17, \"offset\": 458}}, \"$HTML\": {\"abstract_content\": \"\\\"<img src='\\\"+data.carInformation.imagePath+\\\"' width='900'/>\\\"\", \"end\": {\"col\": 71, \"line\": 18, \"offset\": 582}, \"start\": {\"col\": 7, \"line\": 18, \"offset\": 518}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"start\": {\"col\": 5, \"line\": 17, \"offset\": 458}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 66, \"line\": 26, \"offset\": 979}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"186ec1bb444dd21eb99ca35437a46f90dac2099747f4a8c5eb126e4adf219b72877b42c6a0017bede5a2f290945d7d4c320b572a236f1a45474e6b8bad8ffd5a_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"verificationResponse\\\").innerHTML =\\n      \\\"JWT: \\\" + data.content + \\\" is not valid. Please try again\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"verificationResponse\\\")\", \"end\": {\"col\": 52, \"line\": 25, \"offset\": 901}, \"start\": {\"col\": 5, \"line\": 25, \"offset\": 854}}, \"$HTML\": {\"abstract_content\": \"\\\"JWT: \\\"+data.content+\\\" is not valid. Please try again\\\"\", \"end\": {\"col\": 65, \"line\": 26, \"offset\": 978}, \"start\": {\"col\": 7, \"line\": 26, \"offset\": 920}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js\", \"start\": {\"col\": 5, \"line\": 25, \"offset\": 854}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 66, \"line\": 25, \"offset\": 892}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"936498b5ef4e5546b1b8ee8156cd454346a54e95924d9c20114ebdc5d0dafadff87e30f508a11f85bf178fed4cabd019576043535a1f7cb9f047dfb01508c007_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"verificationResponse\\\").innerHTML =\\n      \\\"JWT: \\\" + data.content + \\\" is not valid. Please try again\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"verificationResponse\\\")\", \"end\": {\"col\": 52, \"line\": 24, \"offset\": 814}, \"start\": {\"col\": 5, \"line\": 24, \"offset\": 767}}, \"$HTML\": {\"abstract_content\": \"\\\"JWT: \\\"+data.content+\\\" is not valid. Please try again\\\"\", \"end\": {\"col\": 65, \"line\": 25, \"offset\": 891}, \"start\": {\"col\": 7, \"line\": 25, \"offset\": 833}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js\", \"start\": {\"col\": 5, \"line\": 24, \"offset\": 767}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 59, \"line\": 30, \"offset\": 994}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"12369a4254f305299ec328745c5e9fb76ee9921b6bcfd4e4a66273d9780cd9e83b994efd6c73e9ce035781493ace5dcaf31bb110837a203b49c82f972e8efc3b_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"jwt\\\").innerHTML = data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"jwt\\\")\", \"end\": {\"col\": 33, \"line\": 30, \"offset\": 968}, \"start\": {\"col\": 3, \"line\": 30, \"offset\": 938}}, \"$HTML\": {\"abstract_content\": \"data.content\", \"end\": {\"col\": 58, \"line\": 30, \"offset\": 993}, \"start\": {\"col\": 46, \"line\": 30, \"offset\": 981}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js\", \"start\": {\"col\": 3, \"line\": 30, \"offset\": 938}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 66, \"line\": 36, \"offset\": 1137}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"e0619fe07c2a78bc53022c739f7ab0179ec55a9be247afd2ed40fd74811214d65959063defd33017db548a0f179eb3b45a5f350ff8ea849ba03c3e1b86a4492a_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"verificationResponse\\\").innerHTML =\\n      \\\"JWT: \\\" + data.content + \\\" is not valid. Please try again\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"verificationResponse\\\")\", \"end\": {\"col\": 52, \"line\": 35, \"offset\": 1059}, \"start\": {\"col\": 5, \"line\": 35, \"offset\": 1012}}, \"$HTML\": {\"abstract_content\": \"\\\"JWT: \\\"+data.content+\\\" is not valid. Please try again\\\"\", \"end\": {\"col\": 65, \"line\": 36, \"offset\": 1136}, \"start\": {\"col\": 7, \"line\": 36, \"offset\": 1078}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js\", \"start\": {\"col\": 5, \"line\": 35, \"offset\": 1012}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 59, \"line\": 41, \"offset\": 1239}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"0e0e533b4d75ec124a5e4961d53295c2120bda1d78b24ca75a7b560809ef9981ee9e3e22021ed8f5742a880c82a131a55fd8faa0fd6c15e32018ee4c2bb38aaa_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"jwt\\\").innerHTML = data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"jwt\\\")\", \"end\": {\"col\": 33, \"line\": 41, \"offset\": 1213}, \"start\": {\"col\": 3, \"line\": 41, \"offset\": 1183}}, \"$HTML\": {\"abstract_content\": \"data.content\", \"end\": {\"col\": 58, \"line\": 41, \"offset\": 1238}, \"start\": {\"col\": 46, \"line\": 41, \"offset\": 1226}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js\", \"start\": {\"col\": 3, \"line\": 41, \"offset\": 1183}}, {\"check_id\": \"generic.secrets.security.detected-private-key.detected-private-key\", \"end\": {\"col\": 65, \"line\": 6, \"offset\": 238}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3f0c09a03b811710b3c47f9d883925c5811e10838b97751ea15c88455d9a66eafd27e301302dd7aa2f0013f3850c4cf737a79a211c4cfa6ba0f939c4e71a0b7b_0\", \"is_ignored\": false, \"lines\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDG86CoStCZbgTi\", \"message\": \"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-798: Use of Hard-coded Credentials\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2021 - Identification and Authentication Failures\"], \"references\": [\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"7KUQ0p\", \"url\": \"https://semgrep.dev/playground/r/rxTyLRv/generic.secrets.security.detected-private-key.detected-private-key\", \"version_id\": \"rxTyLRv\"}}, \"shortlink\": \"https://sg.run/b7dr\", \"source\": \"https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key\", \"source-rule-url\": \"https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\", \"subcategory\": [\"audit\"], \"technology\": [\"secrets\"], \"vulnerability_class\": [\"Hard-coded Secrets\"]}, \"metavars\": {\"$KEY\": {\"abstract_content\": \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDG86CoStCZbgTi\", \"end\": {\"col\": 65, \"line\": 6, \"offset\": 238}, \"start\": {\"col\": 1, \"line\": 6, \"offset\": 174}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/keys/private_key.pem\", \"start\": {\"col\": 1, \"line\": 5, \"offset\": 146}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 73, \"line\": 35, \"offset\": 1166}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"7a7ea3600f5359f7988e2ade0c5e3a75f82e654ff36c62a003c3529f08e83d29b65f2e580408129f47aefca2af980d47fd85287885c7ccba414dfeec9ae8d6bc_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"Information\\\").innerHTML = tableInformation;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"Information\\\")\", \"end\": {\"col\": 43, \"line\": 35, \"offset\": 1136}, \"start\": {\"col\": 5, \"line\": 35, \"offset\": 1098}}, \"$HTML\": {\"abstract_content\": \"tableInformation\", \"end\": {\"col\": 72, \"line\": 35, \"offset\": 1165}, \"propagated_value\": {\"svalue_abstract_content\": \"tableInformation+\\\"</table>\\\"\", \"svalue_end\": {\"col\": 53, \"line\": 34, \"offset\": 1092}, \"svalue_start\": {\"col\": 24, \"line\": 34, \"offset\": 1063}}, \"start\": {\"col\": 56, \"line\": 35, \"offset\": 1149}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js\", \"start\": {\"col\": 5, \"line\": 35, \"offset\": 1098}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 36, \"line\": 17, \"offset\": 453}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"13eb77cce81e51eaf8f8fdc540da11e2324fe4556750ce493d0e08e3f5c2fd22697731ebbbf291e3ed0f748da5ba13e7dd923d5c3d7b42f49e76ffb5f9fc7ed5_0\", \"is_ignored\": false, \"lines\": \"  postDiv.innerHTML = post.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"postDiv\", \"end\": {\"col\": 10, \"line\": 17, \"offset\": 427}, \"start\": {\"col\": 3, \"line\": 17, \"offset\": 420}}, \"$HTML\": {\"abstract_content\": \"post.content\", \"end\": {\"col\": 35, \"line\": 17, \"offset\": 452}, \"start\": {\"col\": 23, \"line\": 17, \"offset\": 440}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js\", \"start\": {\"col\": 3, \"line\": 17, \"offset\": 420}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 56, \"line\": 22, \"offset\": 612}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3ac16783e7b4b42dcd7ea9942da239e5e83b8074f8b71d0d45c6c7d6e6d988feb304061869157d94454bbdd8a2fa6e9604fb561f1156d522c8f9db1ff1d4dc3d_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"allPosts\\\").innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"allPosts\\\")\", \"end\": {\"col\": 38, \"line\": 22, \"offset\": 594}, \"start\": {\"col\": 3, \"line\": 22, \"offset\": 559}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 55, \"line\": 22, \"offset\": 611}, \"start\": {\"col\": 51, \"line\": 22, \"offset\": 607}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js\", \"start\": {\"col\": 3, \"line\": 22, \"offset\": 559}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 78, \"line\": 24, \"offset\": 793}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"063f0b45a6d61a20cc8bd779ecdb927d1f724b4e09d979d691903395246437372370af37a418bf4259d4f0795e47e63eff894a8eae369eaabf6f6d66f33ef182_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"projectsResponse\\\").innerHTML = tableInformation;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"projectsResponse\\\")\", \"end\": {\"col\": 48, \"line\": 24, \"offset\": 763}, \"start\": {\"col\": 5, \"line\": 24, \"offset\": 720}}, \"$HTML\": {\"abstract_content\": \"tableInformation\", \"end\": {\"col\": 77, \"line\": 24, \"offset\": 792}, \"propagated_value\": {\"svalue_abstract_content\": \"tableInformation+\\\"</tr>\\\"\", \"svalue_end\": {\"col\": 50, \"line\": 23, \"offset\": 714}, \"svalue_start\": {\"col\": 24, \"line\": 23, \"offset\": 688}}, \"start\": {\"col\": 61, \"line\": 24, \"offset\": 776}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js\", \"start\": {\"col\": 5, \"line\": 24, \"offset\": 720}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 55, \"line\": 17, \"offset\": 537}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"4789c55af64d74f7efdefe093e8b4e47213f2038b1ad4f6ea4a1065840cd167255c7756fe6a802fd23609c5fe70c28decaf8ec997cff069b5aff9bab0c928752_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"carInformation\\\").innerHTML =\\n    \\\"<img src='\\\" + data.imagePath + \\\"' width='900'/>\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"carInformation\\\")\", \"end\": {\"col\": 44, \"line\": 16, \"offset\": 470}, \"start\": {\"col\": 3, \"line\": 16, \"offset\": 429}}, \"$HTML\": {\"abstract_content\": \"\\\"<img src='\\\"+data.imagePath+\\\"' width='900'/>\\\"\", \"end\": {\"col\": 54, \"line\": 17, \"offset\": 536}, \"start\": {\"col\": 5, \"line\": 17, \"offset\": 487}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"start\": {\"col\": 3, \"line\": 16, \"offset\": 429}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 20, \"line\": 16, \"offset\": 585}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"e8823ff4a0b9a10ce6cee70e178fefffb6a4a11e5965628718b867fea90e3502d8ed77e792b8a920ae1d6b65c9daefe0bac33a624ff36a9215ba5cfc20d7e084_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"uploaded_file_info\\\").innerHTML = data.isValid\\n    ? \\\"File uploaded at location:\\\" + data.content\\n    : data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"uploaded_file_info\\\")\", \"end\": {\"col\": 48, \"line\": 14, \"offset\": 490}, \"start\": {\"col\": 3, \"line\": 14, \"offset\": 445}}, \"$HTML\": {\"abstract_content\": \"data.isValid\\\"File uploaded at location:\\\"+data.content data.content\", \"end\": {\"col\": 19, \"line\": 16, \"offset\": 584}, \"start\": {\"col\": 61, \"line\": 14, \"offset\": 503}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js\", \"start\": {\"col\": 3, \"line\": 14, \"offset\": 445}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 53, \"line\": 16, \"offset\": 484}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"e120f1bde64fd24bedb04807140b6acc99741d4eb0e31b7966ad96c9c1d52cf36a8b110af3bd3e721db86fd6da4a8dd930e64423d1e16a00cf621a11b33bb239_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"image\\\").innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"image\\\")\", \"end\": {\"col\": 35, \"line\": 16, \"offset\": 466}, \"start\": {\"col\": 3, \"line\": 16, \"offset\": 434}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 52, \"line\": 16, \"offset\": 483}, \"start\": {\"col\": 48, \"line\": 16, \"offset\": 479}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js\", \"start\": {\"col\": 3, \"line\": 16, \"offset\": 434}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 36, \"line\": 15, \"offset\": 499}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"6c8d47cab3be0c79385ec928b3ce78b6ad6b24cc1244f4cdc80b68e86c02f0f271df7c9d848a08b2f05c9451fd56e252a58bc225a9a5ea1dc208d6a63ebc9562_0\", \"is_ignored\": false, \"lines\": \"  parentContainer.innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"parentContainer\", \"end\": {\"col\": 18, \"line\": 15, \"offset\": 481}, \"propagated_value\": {\"svalue_abstract_content\": \"document.getElementById(\\\"parentContainer\\\")\", \"svalue_end\": {\"col\": 67, \"line\": 14, \"offset\": 462}, \"svalue_start\": {\"col\": 25, \"line\": 14, \"offset\": 420}}, \"start\": {\"col\": 3, \"line\": 15, \"offset\": 466}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 35, \"line\": 15, \"offset\": 498}, \"start\": {\"col\": 31, \"line\": 15, \"offset\": 494}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js\", \"start\": {\"col\": 3, \"line\": 15, \"offset\": 466}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 53, \"line\": 14, \"offset\": 455}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"7ce57ebd246c20b9d2fbb13ff82ec6386439828650f5e8302280a206fe1e81fd8a916073cd2aadff1de50b36e82ba573ec8608d83c15ca878664624654af21a2_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"image\\\").innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"image\\\")\", \"end\": {\"col\": 35, \"line\": 14, \"offset\": 437}, \"start\": {\"col\": 3, \"line\": 14, \"offset\": 405}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 52, \"line\": 14, \"offset\": 454}, \"start\": {\"col\": 48, \"line\": 14, \"offset\": 450}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js\", \"start\": {\"col\": 3, \"line\": 14, \"offset\": 405}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 40, \"line\": 18, \"offset\": 550}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"5cb50b2ec19b0660b454d607d8e2bc874b071fc76575c469c287cfbb4590376e81955d273c9aa26459963b0807ea0857df05523bae3cf76afe39acd03b11072f_0\", \"is_ignored\": false, \"lines\": \"  bookNameElement.innerHTML = bookName;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"bookNameElement\", \"end\": {\"col\": 18, \"line\": 18, \"offset\": 528}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"name\\\")\", \"svalue_end\": {\"col\": 65, \"line\": 17, \"offset\": 509}, \"svalue_start\": {\"col\": 25, \"line\": 17, \"offset\": 469}}, \"start\": {\"col\": 3, \"line\": 18, \"offset\": 513}}, \"$HTML\": {\"abstract_content\": \"bookName\", \"end\": {\"col\": 39, \"line\": 18, \"offset\": 549}, \"start\": {\"col\": 31, \"line\": 18, \"offset\": 541}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 18, \"offset\": 513}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 36, \"line\": 22, \"offset\": 697}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"e3f9474d8a859ff4559edfae7953e1c9accc1f995a1254a8a218e3c89d70ea20afe6c5a318122f35bfd71ebeefa766e7f74f7d56fd7c8d8dcc4020d3f3efd31d_0\", \"is_ignored\": false, \"lines\": \"  authorElement.innerHTML = author;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"authorElement\", \"end\": {\"col\": 16, \"line\": 22, \"offset\": 677}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"author\\\")\", \"svalue_end\": {\"col\": 65, \"line\": 21, \"offset\": 660}, \"svalue_start\": {\"col\": 23, \"line\": 21, \"offset\": 618}}, \"start\": {\"col\": 3, \"line\": 22, \"offset\": 664}}, \"$HTML\": {\"abstract_content\": \"author\", \"end\": {\"col\": 35, \"line\": 22, \"offset\": 696}, \"start\": {\"col\": 29, \"line\": 22, \"offset\": 690}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 22, \"offset\": 664}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 32, \"line\": 26, \"offset\": 834}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"ebc16eeb9b20f914470de7c5889a88679de3c9771814384e9e4327f4568c96bf4f975cb7a1474f49552900162c8b3a54d4b6b1c78a2af0965796b0950b9b516e_0\", \"is_ignored\": false, \"lines\": \"  isbnElement.innerHTML = isbn;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"isbnElement\", \"end\": {\"col\": 14, \"line\": 26, \"offset\": 816}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"isbn\\\")\", \"svalue_end\": {\"col\": 61, \"line\": 25, \"offset\": 801}, \"svalue_start\": {\"col\": 21, \"line\": 25, \"offset\": 761}}, \"start\": {\"col\": 3, \"line\": 26, \"offset\": 805}}, \"$HTML\": {\"abstract_content\": \"isbn\", \"end\": {\"col\": 31, \"line\": 26, \"offset\": 833}, \"start\": {\"col\": 27, \"line\": 26, \"offset\": 829}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 26, \"offset\": 805}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 42, \"line\": 30, \"offset\": 989}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3f80e3df9d29aac867699a7f408742ed6f4625611a5c5b0b0d8c75291bcebb2babd7a9a2e553f692d5a45ed127351fa9cceef864efb52bcbc2d0af127cb71f22_0\", \"is_ignored\": false, \"lines\": \"  publisherElement.innerHTML = publisher;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"publisherElement\", \"end\": {\"col\": 19, \"line\": 30, \"offset\": 966}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"publisher\\\")\", \"svalue_end\": {\"col\": 71, \"line\": 29, \"offset\": 946}, \"svalue_start\": {\"col\": 26, \"line\": 29, \"offset\": 901}}, \"start\": {\"col\": 3, \"line\": 30, \"offset\": 950}}, \"$HTML\": {\"abstract_content\": \"publisher\", \"end\": {\"col\": 41, \"line\": 30, \"offset\": 988}, \"start\": {\"col\": 32, \"line\": 30, \"offset\": 979}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 30, \"offset\": 950}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 42, \"line\": 34, \"offset\": 1142}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"1c06a2b567a5064aa8b76c8eeb9cefe55ec930cb36fd04c026b83012cc5a87c13835c412ca52a320573f6b1d7e90e0987ddc19c367a0f06831392e89ddf7bb7f_0\", \"is_ignored\": false, \"lines\": \"  otherElement.innerHTML = otherComments;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"otherElement\", \"end\": {\"col\": 15, \"line\": 34, \"offset\": 1115}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"others\\\")\", \"svalue_end\": {\"col\": 64, \"line\": 33, \"offset\": 1099}, \"svalue_start\": {\"col\": 22, \"line\": 33, \"offset\": 1057}}, \"start\": {\"col\": 3, \"line\": 34, \"offset\": 1103}}, \"$HTML\": {\"abstract_content\": \"otherComments\", \"end\": {\"col\": 41, \"line\": 34, \"offset\": 1141}, \"start\": {\"col\": 28, \"line\": 34, \"offset\": 1128}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 34, \"offset\": 1103}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 63, \"line\": 78, \"offset\": 2393}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"43232b43885df337c3f95a19694192d48623c3a094dec04a58b292250b8c4b35f64852dd479438efe1a181576508c3dea49d49e71d50c0e5deb002be1eb0a8d6_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"bookInformation\\\").innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"bookInformation\\\")\", \"end\": {\"col\": 45, \"line\": 78, \"offset\": 2375}, \"start\": {\"col\": 3, \"line\": 78, \"offset\": 2333}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 62, \"line\": 78, \"offset\": 2392}, \"start\": {\"col\": 58, \"line\": 78, \"offset\": 2388}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 78, \"offset\": 2333}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 52, \"line\": 58, \"offset\": 1990}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"386f691e5ae145fe641a800b6481b11408654da135b63c0853e75f6b3e3f49828ee3fd3d8af497c9e9441f3a3c08a9c668967fa7031fa5f30c3e7cc8c2e2cc4a_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"vulnerabilityDescription\\\").innerHTML =\\n      vulnerableAppEndPointData[id][\\\"Description\\\"];\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"vulnerabilityDescription\\\")\", \"end\": {\"col\": 56, \"line\": 57, \"offset\": 1926}, \"start\": {\"col\": 5, \"line\": 57, \"offset\": 1875}}, \"$HTML\": {\"abstract_content\": \"vulnerableAppEndPointData[id][\\\"Description\\\"]\", \"end\": {\"col\": 51, \"line\": 58, \"offset\": 1989}, \"start\": {\"col\": 7, \"line\": 58, \"offset\": 1945}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 5, \"line\": 57, \"offset\": 1875}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 44, \"line\": 72, \"offset\": 2640}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"513e2df88c08d76621160ec98c0370d152f61e3cc49d61720af407016a3669c654fabee6040e130fda3c649b9ee4d990430473bb10948e5d4afb0d35ef736354_0\", \"is_ignored\": false, \"lines\": \"      detailTitle.innerHTML = responseText;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"detailTitle\", \"end\": {\"col\": 18, \"line\": 72, \"offset\": 2614}, \"start\": {\"col\": 7, \"line\": 72, \"offset\": 2603}}, \"$HTML\": {\"abstract_content\": \"responseText\", \"end\": {\"col\": 43, \"line\": 72, \"offset\": 2639}, \"start\": {\"col\": 31, \"line\": 72, \"offset\": 2627}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 7, \"line\": 72, \"offset\": 2603}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 79, \"line\": 108, \"offset\": 3753}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"fcffed7e036b8561bce1c9ec1852f3ca02f53c69e332438c9741ce9f06d86ccec84d7c6476c406e70af4217157fab497c11f645454604d47ba8dbce287f398ba_0\", \"is_ignored\": false, \"lines\": \"  span.innerHTML = isSecure ? variantTooltip.secure : variantTooltip.unsecure;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"span\", \"end\": {\"col\": 7, \"line\": 108, \"offset\": 3681}, \"start\": {\"col\": 3, \"line\": 108, \"offset\": 3677}}, \"$HTML\": {\"abstract_content\": \"isSecure variantTooltip.secure variantTooltip.unsecure\", \"end\": {\"col\": 78, \"line\": 108, \"offset\": 3752}, \"start\": {\"col\": 20, \"line\": 108, \"offset\": 3694}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 3, \"line\": 108, \"offset\": 3677}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 74, \"line\": 163, \"offset\": 5341}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"4458aa98cde7481ef24b6189c40b98743f70d45069b2c2025f43a1249037ea3c6096c4c25ee549046b78d5be533cf77ef21c48df36cd1431d956f9e3fffa7b86_0\", \"is_ignored\": false, \"lines\": \"    detailTitle.innerHTML = vulnerableAppEndPointData[id][\\\"Description\\\"];\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"detailTitle\", \"end\": {\"col\": 16, \"line\": 163, \"offset\": 5283}, \"start\": {\"col\": 5, \"line\": 163, \"offset\": 5272}}, \"$HTML\": {\"abstract_content\": \"vulnerableAppEndPointData[id][\\\"Description\\\"]\", \"end\": {\"col\": 73, \"line\": 163, \"offset\": 5340}, \"start\": {\"col\": 29, \"line\": 163, \"offset\": 5296}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 5, \"line\": 163, \"offset\": 5272}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 72, \"line\": 169, \"offset\": 5526}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"4458aa98cde7481ef24b6189c40b98743f70d45069b2c2025f43a1249037ea3c6096c4c25ee549046b78d5be533cf77ef21c48df36cd1431d956f9e3fffa7b86_1\", \"is_ignored\": false, \"lines\": \"  detailTitle.innerHTML = vulnerableAppEndPointData[id][\\\"Description\\\"];\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"detailTitle\", \"end\": {\"col\": 14, \"line\": 169, \"offset\": 5468}, \"start\": {\"col\": 3, \"line\": 169, \"offset\": 5457}}, \"$HTML\": {\"abstract_content\": \"vulnerableAppEndPointData[id][\\\"Description\\\"]\", \"end\": {\"col\": 71, \"line\": 169, \"offset\": 5525}, \"start\": {\"col\": 27, \"line\": 169, \"offset\": 5481}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 3, \"line\": 169, \"offset\": 5457}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 62, \"line\": 308, \"offset\": 9891}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"12cbb93df3339a028803e1e63167a59486459f97ce38bd67127c81c6b407d16920627f7dfad654f9ad4ad5af215bb3b7651318491026d49756a8fff4c8324c6a_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"helpText\\\").innerHTML = helpText;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"helpText\\\")\", \"end\": {\"col\": 40, \"line\": 308, \"offset\": 9869}, \"start\": {\"col\": 5, \"line\": 308, \"offset\": 9834}}, \"$HTML\": {\"abstract_content\": \"helpText\", \"end\": {\"col\": 61, \"line\": 308, \"offset\": 9890}, \"propagated_value\": {\"svalue_abstract_content\": \"helpText+\\\"</ol>\\\"\", \"svalue_end\": {\"col\": 34, \"line\": 307, \"offset\": 9828}, \"svalue_start\": {\"col\": 16, \"line\": 307, \"offset\": 9810}}, \"start\": {\"col\": 53, \"line\": 308, \"offset\": 9882}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 5, \"line\": 308, \"offset\": 9834}}], \"skipped_rules\": [], \"version\": \"1.51.0\"}", "message": "JWT token detected", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-321: Use of Hard-coded Cryptographic Key"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "kxU8E8", "url": "https://semgrep.dev/playground/r/o5Tgljp/generic.secrets.security.detected-jwt-token.detected-jwt-token", "version_id": "o5Tgljp"}}, "shortlink": "https://sg.run/05N5", "source": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token", "source-rule-url": "https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py", "subcategory": ["audit"], "technology": ["secrets", "jwt"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "semgrep.json", "start": {"col": 30973, "line": 1, "offset": 30972}}, {"check_id": "generic.secrets.security.detected-jwt-token.detected-jwt-token", "end": {"col": 157244, "line": 1, "offset": 157243}, "extra": {"engine_kind": "OSS", "fingerprint": "7946f85c90d9569e819e51283b0dbb153c7e0fb37b4284046257f17c15f36f4cf65e3216eb03ca3c564a5f095671a5ca60cf24d113635fbbfd059acba6076cc9_1", "is_ignored": false, "lines": "{\"errors\": [{\"code\": 3, \"level\": \"warn\", \"message\": \"Syntax error at line gradlew:177:\\n `for i do` was unexpected\", \"path\": \"gradlew\", \"spans\": [{\"end\": {\"col\": 13, \"line\": 177, \"offset\": 8}, \"file\": \"gradlew\", \"start\": {\"col\": 5, \"line\": 177, \"offset\": 0}}], \"type\": [\"PartialParsing\", [{\"end\": {\"col\": 13, \"line\": 177, \"offset\": 8}, \"path\": \"gradlew\", \"start\": {\"col\": 5, \"line\": 177, \"offset\": 0}}]]}], \"interfile_languages_used\": [], \"paths\": {\"scanned\": [\"CODE_OF_CONDUCT.md\", \"CONTRIBUTING.md\", \"LICENSE\", \"README.md\", \"build.gradle\", \"docker-compose.yml\", \"docs/ComponentDiagram VulnerableApp.png\", \"docs/DesignDocumentation.md\", \"docs/Gemfile\", \"docs/HOW-TO-USE.md\", \"docs/ProjectUsage.md\", \"docs/ReleaseVulnerableApp.md\", \"docs/Vulnerability list Description.jpg\", \"docs/VulnerabilityLevel Description.jpg\", \"docs/_config.yml\", \"docs/_config_local.yml\", \"docs/blogs/Overview_of_Owasp-VulnerableApp.md\", \"docs/blogs/blogs.md\", \"docs/i18n/hi/README.md\", \"docs/i18n/locale.md\", \"docs/i18n/pa/README.md\", \"docs/i18n/pt-BR/Readme.md\", \"docs/i18n/ru/README.md\", \"docs/i18n/zh-CN/README.md\", \"docs/index.md\", \"docs/logos/BW/iconColoured.png\", \"docs/logos/BW/iconColoured@2x-8.png\", \"docs/logos/BW/iconColoured@3x-8.png\", \"docs/logos/Coloured/iconColoured.png\", \"docs/logos/Coloured/iconColoured@2x-8.png\", \"docs/logos/Coloured/iconColoured@3x-8.png\", \"docs/logos/EPS/logoBW.eps\", \"docs/logos/EPS/logoColoured.eps\", \"docs/logos/SVG/logoBW.svg\", \"docs/logos/SVG/logoColoured.svg\", \"gradle/wrapper/gradle-wrapper.jar\", \"gradle/wrapper/gradle-wrapper.properties\", \"gradlew\", \"gradlew.bat\", \"json\", \"scanner/sast/expectedIssues.csv\", \"src/main/java/org/sasanlabs/Application.java\", \"src/main/java/org/sasanlabs/beans/AllEndPointsResponseBean.java\", \"src/main/java/org/sasanlabs/beans/AttackVectorResponseBean.java\", \"src/main/java/org/sasanlabs/beans/LevelResponseBean.java\", \"src/main/java/org/sasanlabs/beans/ScannerMetaResponseBean.java\", \"src/main/java/org/sasanlabs/beans/ScannerResponseBean.java\", \"src/main/java/org/sasanlabs/configuration/VulnerableAppConfiguration.java\", \"src/main/java/org/sasanlabs/configuration/VulnerableAppProperties.java\", \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"src/main/java/org/sasanlabs/controller/exception/ControllerException.java\", \"src/main/java/org/sasanlabs/controller/exception/ControllerExceptionHandler.java\", \"src/main/java/org/sasanlabs/internal/utility/EnvUtils.java\", \"src/main/java/org/sasanlabs/internal/utility/FrameworkConstants.java\", \"src/main/java/org/sasanlabs/internal/utility/GenericUtils.java\", \"src/main/java/org/sasanlabs/internal/utility/JSONSerializationUtils.java\", \"src/main/java/org/sasanlabs/internal/utility/LevelConstants.java\", \"src/main/java/org/sasanlabs/internal/utility/MessageBundle.java\", \"src/main/java/org/sasanlabs/internal/utility/Variant.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/AttackVector.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/RequestParameterLocation.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/ResponseType.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/VulnerableAppRequestMapping.java\", \"src/main/java/org/sasanlabs/internal/utility/annotations/VulnerableAppRestController.java\", \"src/main/java/org/sasanlabs/service/IEndPointsInformationProvider.java\", \"src/main/java/org/sasanlabs/service/exception/ExceptionStatusCodeEnum.java\", \"src/main/java/org/sasanlabs/service/exception/ServiceApplicationException.java\", \"src/main/java/org/sasanlabs/service/impl/EndPointsInformationProvider.java\", \"src/main/java/org/sasanlabs/service/vulnerability/bean/GenericVulnerabilityResponseBean.java\", \"src/main/java/org/sasanlabs/service/vulnerability/commandInjection/CommandInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/IJWTTokenGenerator.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/IJWTValidator.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/KeyStrength.java\", \"src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/SymmetricAlgorithmKey.java\", \"src/main/java/org/sasanlabs/service/vulnerability/openRedirect/ClientSideInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/openRedirect/MetaTagBasedInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/openRedirect/RefreshHeaderBasedInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/pathTraversal/PathTraversalVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/CarInformation.java\", \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/MetaDataServiceMock.java\", \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/PersistentXSSInHTMLTagVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/Post.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/PostRepository.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/bean/Book.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/bean/ObjectFactory.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/dao/BookEntity.java\", \"src/main/java/org/sasanlabs/service/vulnerability/xxe/dao/BookEntityRepository.java\", \"src/main/java/org/sasanlabs/vulnerability/types/VulnerabilityType.java\", \"src/main/java/org/sasanlabs/vulnerability/utils/Constants.java\", \"src/main/resources/application.properties\", \"src/main/resources/attackvectors/BlindSQLInjectionVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/ErrorBasedSQLInjectionPayload.properties\", \"src/main/resources/attackvectors/GeneralVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/JWTVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/SSRFVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/UnionBasedSQLInjectionVulnerabilityPayload.properties\", \"src/main/resources/attackvectors/UnrestrictedFileUploadPayload.properties\", \"src/main/resources/i18n/messages.properties\", \"src/main/resources/i18n/messages_en_US.properties\", \"src/main/resources/i18n/messages_es.properties\", \"src/main/resources/i18n/messages_hi.properties\", \"src/main/resources/i18n/messages_it.properties\", \"src/main/resources/i18n/messages_sv.properties\", \"src/main/resources/i18n/messages_zh_TW.properties\", \"src/main/resources/log4j2.xml\", \"src/main/resources/sampleVulnerability/sampleVulnerability/SampleVulnerability.java\", \"src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.css\", \"src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.html\", \"src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js\", \"src/main/resources/sasanlabs.p12\", \"src/main/resources/scripts/JWT/SymmetricAlgoKeys.json\", \"src/main/resources/scripts/PathTraversal/OwaspAppInfo.json\", \"src/main/resources/scripts/PathTraversal/UserInfo.json\", \"src/main/resources/scripts/PathTraversal/secret.json\", \"src/main/resources/scripts/SQLInjection/db/data.sql\", \"src/main/resources/scripts/SQLInjection/db/schema.sql\", \"src/main/resources/scripts/XXEVulnerability/books.xsd\", \"src/main/resources/scripts/XXEVulnerability/schema.sql\", \"src/main/resources/scripts/xss/PersistentXSS/db/schema.sql\", \"src/main/resources/static/error.css\", \"src/main/resources/static/error.html\", \"src/main/resources/static/images/GitHub-Mark-32px.png\", \"src/main/resources/static/images/OWASP.png\", \"src/main/resources/static/images/ZAP.png\", \"src/main/resources/static/images/cars/Audi.jpg\", \"src/main/resources/static/index.html\", \"src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css\", \"src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html\", \"src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.css\", \"src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.html\", \"src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js\", \"src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css\", \"src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html\", \"src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.css\", \"src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.html\", \"src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.css\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.html\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.css\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.html\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.css\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.html\", \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js\", \"src/main/resources/static/templates/JWTVulnerability/keys/private_key.pem\", \"src/main/resources/static/templates/JWTVulnerability/keys/public_crt.pem\", \"src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.css\", \"src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.html\", \"src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js\", \"src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.css\", \"src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.html\", \"src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js\", \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.css\", \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.html\", \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js\", \"src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.css\", \"src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.html\", \"src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js\", \"src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css\", \"src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html\", \"src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.css\", \"src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.html\", \"src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js\", \"src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.css\", \"src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.html\", \"src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js\", \"src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.css\", \"src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.html\", \"src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js\", \"src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.css\", \"src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.html\", \"src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js\", \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.css\", \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.html\", \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"src/main/resources/static/vectors/secure.svg\", \"src/main/resources/static/vectors/unsecure.svg\", \"src/main/resources/static/vulnerableApp.css\", \"src/main/resources/static/vulnerableApp.js\"]}, \"results\": [{\"check_id\": \"yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"end\": {\"col\": 23, \"line\": 3, \"offset\": 47}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3921a3947f49c9b257d08210fd7d6448fc620df6cce2ec4bfe0bab7aece2741c7ac256c58b74be009f05ed7162c229a71efe0f8b0d69ca639873e5982ef4a7d9_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-base:\", \"message\": \"Service 'VulnerableApp-base' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/\", \"https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"qNUoWr\", \"url\": \"https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"version_id\": \"qkT2BLp\"}}, \"shortlink\": \"https://sg.run/0n8q\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-base\", \"end\": {\"col\": 23, \"line\": 3, \"offset\": 47}, \"start\": {\"col\": 5, \"line\": 3, \"offset\": 29}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 3, \"offset\": 29}}, {\"check_id\": \"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"end\": {\"col\": 23, \"line\": 3, \"offset\": 47}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"9d1e3edaee0535a439f7a5a02cd4f3a3b26fb3a8e043699dee389f48f0ab1cc0f357401bfd914ce9ff415efa1a841bbaa25d8c503663160acfbceeec58840e83_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-base:\", \"message\": \"Service 'VulnerableApp-base' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir\", \"https://blog.atomist.com/security-of-docker-kubernetes/\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"v8U5vN\", \"url\": \"https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"version_id\": \"o5Tg9ob\"}}, \"shortlink\": \"https://sg.run/e4JE\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-base\", \"end\": {\"col\": 23, \"line\": 3, \"offset\": 47}, \"start\": {\"col\": 5, \"line\": 3, \"offset\": 29}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 3, \"offset\": 29}}, {\"check_id\": \"yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"end\": {\"col\": 22, \"line\": 6, \"offset\": 131}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"af7e980dad7fec983238139a98c4705b107dd3acc110a3fd3ac951b867e95ea6f870c7d955fb505af2fd00dc2e28d844d9bb70bc67d60932d31fc9256f8a999a_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-jsp:\", \"message\": \"Service 'VulnerableApp-jsp' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/\", \"https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"qNUoWr\", \"url\": \"https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"version_id\": \"qkT2BLp\"}}, \"shortlink\": \"https://sg.run/0n8q\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-jsp\", \"end\": {\"col\": 22, \"line\": 6, \"offset\": 131}, \"start\": {\"col\": 5, \"line\": 6, \"offset\": 114}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 6, \"offset\": 114}}, {\"check_id\": \"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"end\": {\"col\": 22, \"line\": 6, \"offset\": 131}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"d15ec8c04e312421413fb88e298c418253cccfa110b5e9e0a8914f84f221dbac8b8564ce7a4e847680d2861fece4352a91f06f51233c60501e6747f439102a66_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-jsp:\", \"message\": \"Service 'VulnerableApp-jsp' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir\", \"https://blog.atomist.com/security-of-docker-kubernetes/\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"v8U5vN\", \"url\": \"https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"version_id\": \"o5Tg9ob\"}}, \"shortlink\": \"https://sg.run/e4JE\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-jsp\", \"end\": {\"col\": 22, \"line\": 6, \"offset\": 131}, \"start\": {\"col\": 5, \"line\": 6, \"offset\": 114}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 6, \"offset\": 114}}, {\"check_id\": \"yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"end\": {\"col\": 22, \"line\": 9, \"offset\": 210}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"b82e7e9f1fa5752e251942ad0a139ca9aff9de173f9b3019f241bfdfab96268c927943ea990ab945f93d9329ca17bd82f26f640e99cc6439682139686fe15eba_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-php:\", \"message\": \"Service 'VulnerableApp-php' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/\", \"https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"qNUoWr\", \"url\": \"https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"version_id\": \"qkT2BLp\"}}, \"shortlink\": \"https://sg.run/0n8q\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-php\", \"end\": {\"col\": 22, \"line\": 9, \"offset\": 210}, \"start\": {\"col\": 5, \"line\": 9, \"offset\": 193}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 9, \"offset\": 193}}, {\"check_id\": \"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"end\": {\"col\": 22, \"line\": 9, \"offset\": 210}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"c1d55de60ef62c5588fab89fb0a0df035fff4d12750100c62b88f0512047f3c3843f1cc24b8baf879f95cd7604b2825d3f17daddbff67ff30b8ec8299f3b683b_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-php:\", \"message\": \"Service 'VulnerableApp-php' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir\", \"https://blog.atomist.com/security-of-docker-kubernetes/\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"v8U5vN\", \"url\": \"https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"version_id\": \"o5Tg9ob\"}}, \"shortlink\": \"https://sg.run/e4JE\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-php\", \"end\": {\"col\": 22, \"line\": 9, \"offset\": 210}, \"start\": {\"col\": 5, \"line\": 9, \"offset\": 193}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 9, \"offset\": 193}}, {\"check_id\": \"yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"end\": {\"col\": 25, \"line\": 12, \"offset\": 295}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"5949e9ab5c8ee557186914529637c50d2dd7b4011f236c6bcf490d0e80823d7c769e5a300e0214fcf9122f64019fca1c95608b1180c7194501bea8fb896ce40f_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-facade:\", \"message\": \"Service 'VulnerableApp-facade' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/\", \"https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"qNUoWr\", \"url\": \"https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"version_id\": \"qkT2BLp\"}}, \"shortlink\": \"https://sg.run/0n8q\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-facade\", \"end\": {\"col\": 25, \"line\": 12, \"offset\": 295}, \"start\": {\"col\": 5, \"line\": 12, \"offset\": 275}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 12, \"offset\": 275}}, {\"check_id\": \"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"end\": {\"col\": 25, \"line\": 12, \"offset\": 295}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"03de6839c7238a1ffe3012b3196fb6d54de068f685675e71c88c18b2a1c9744b97ab60a95d6ada7900eddcb8533b547ced85d4c5a2bb88781d074c2faad2b3d7_0\", \"is_ignored\": false, \"lines\": \"    VulnerableApp-facade:\", \"message\": \"Service 'VulnerableApp-facade' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-732: Incorrect Permission Assignment for Critical Resource\"], \"cwe2021-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A05:2021 - Security Misconfiguration\", \"A06:2017 - Security Misconfiguration\"], \"references\": [\"https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir\", \"https://blog.atomist.com/security-of-docker-kubernetes/\", \"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"v8U5vN\", \"url\": \"https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"version_id\": \"o5Tg9ob\"}}, \"shortlink\": \"https://sg.run/e4JE\", \"source\": \"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service\", \"subcategory\": [\"audit\"], \"technology\": [\"docker-compose\"], \"vulnerability_class\": [\"Improper Authorization\"]}, \"metavars\": {\"$SERVICE\": {\"abstract_content\": \"VulnerableApp-facade\", \"end\": {\"col\": 25, \"line\": 12, \"offset\": 295}, \"start\": {\"col\": 5, \"line\": 12, \"offset\": 275}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"docker-compose.yml\", \"start\": {\"col\": 5, \"line\": 12, \"offset\": 275}}, {\"check_id\": \"generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"end\": {\"col\": 123, \"line\": 249, \"offset\": 22648}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"1333d5c6b69e5b7389540c2c73fa2aed56dd2a11f6774ae39826dd45378774fc7be75e2568adc0b2c8e255b8a6d387c9f3d4b19d53e4c861cb6759c493c8d466_0\", \"is_ignored\": false, \"lines\": \"  \\u001b[1m\\u001b[24meyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\\u001b\", \"message\": \"JWT token detected\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-321: Use of Hard-coded Cryptographic Key\"], \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A02:2021 - Cryptographic Failures\"], \"references\": [\"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"kxU8E8\", \"url\": \"https://semgrep.dev/playground/r/o5Tgljp/generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"version_id\": \"o5Tgljp\"}}, \"shortlink\": \"https://sg.run/05N5\", \"source\": \"https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"source-rule-url\": \"https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py\", \"subcategory\": [\"audit\"], \"technology\": [\"secrets\", \"jwt\"], \"vulnerability_class\": [\"Cryptographic Issues\"]}, \"metavars\": {}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"json\", \"start\": {\"col\": 12, \"line\": 249, \"offset\": 22537}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 42, \"offset\": 1618}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"db0e9841b1183fb8764d633715cd7b2ca8e52cc980abede0f8bbe2eddf93c45bcdf3ead825f19e1c79d01c21d351c831a561820d8dce4b453e7e96893aba4157_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/allEndPoint\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"allEndPoints\", \"end\": {\"col\": 31, \"line\": 43, \"offset\": 1665}, \"start\": {\"col\": 19, \"line\": 43, \"offset\": 1653}}, \"$RETURNTYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 18, \"line\": 43, \"offset\": 1652}, \"start\": {\"col\": 12, \"line\": 43, \"offset\": 1646}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 42, \"offset\": 1604}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 57, \"offset\": 2109}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"8b80541eb876c22a01e966f487fd6ec7f2573a04ac1b6c65465c14601a8796a0be60158d599fbfbfa4ac764e53f8630deb25789694001d1c83df3496ed582768_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/VulnerabilityDefinitions\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"getVulnerabilityDefinitions\", \"end\": {\"col\": 69, \"line\": 58, \"offset\": 2207}, \"start\": {\"col\": 42, \"line\": 58, \"offset\": 2180}}, \"$RETURNTYPE\": {\"abstract_content\": \"List<VulnerabilityDefinition>\", \"end\": {\"col\": 41, \"line\": 58, \"offset\": 2179}, \"start\": {\"col\": 12, \"line\": 58, \"offset\": 2150}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 57, \"offset\": 2095}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 75, \"offset\": 2887}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"4d79c9d97d33e0489d181aec3b23a5772a8877f834f7a0285a6806a5022b808c9d3a7a6f79a70a7b77824ef1663c4769095cfc5c4dbfd466a4a3b2e3c775d669_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/allEndPointJson\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"allEndPointsJsonResponse\", \"end\": {\"col\": 67, \"line\": 76, \"offset\": 2974}, \"start\": {\"col\": 43, \"line\": 76, \"offset\": 2950}}, \"$RETURNTYPE\": {\"abstract_content\": \"List<AllEndPointsResponseBean>\", \"end\": {\"col\": 42, \"line\": 76, \"offset\": 2949}, \"start\": {\"col\": 12, \"line\": 76, \"offset\": 2919}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 75, \"offset\": 2873}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 90, \"offset\": 3399}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"f5c98169269200088cf322e0a264130c13d768aad55c39ead71e6f4b69729a5d3ade3487645d18cc70efc0c8cd62fa4d327f1971896cb8ac3a67975a2eb1ab31_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/scanner\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"getScannerRelatedInformation\", \"end\": {\"col\": 66, \"line\": 91, \"offset\": 3477}, \"start\": {\"col\": 38, \"line\": 91, \"offset\": 3449}}, \"$RETURNTYPE\": {\"abstract_content\": \"List<ScannerResponseBean>\", \"end\": {\"col\": 37, \"line\": 91, \"offset\": 3448}, \"start\": {\"col\": 12, \"line\": 91, \"offset\": 3423}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 90, \"offset\": 3385}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 105, \"offset\": 3974}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"985ffaac5f5de025cd03a2cb65ad8a1dd409ce99caf6cf890572bd6ceb345553ca71a763ab19e6fa993199d5732b38a671736b1b35ae8e62e38070799e01852c_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/scanner/metadata\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"getScannerRelatedMetaInformation\", \"end\": {\"col\": 68, \"line\": 106, \"offset\": 4063}, \"start\": {\"col\": 36, \"line\": 106, \"offset\": 4031}}, \"$RETURNTYPE\": {\"abstract_content\": \"ScannerMetaResponseBean ScannerMetaResponseBean ScannerMetaResponseBean ScannerMetaResponseBean\", \"end\": {\"col\": 35, \"line\": 106, \"offset\": 4030}, \"start\": {\"col\": 12, \"line\": 106, \"offset\": 4007}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 105, \"offset\": 3960}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 121, \"offset\": 4647}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"25a667c319d112d86e31f76653b2849dbf43b124cb4ad042892484949104c96fb9a5b01e5155977eedf275f51f73fc85ff950e4e8a825d7c25cd324c720b1391_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\\\"/sitemap.xml\\\")\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"sitemapForPassiveScanners\", \"end\": {\"col\": 44, \"line\": 122, \"offset\": 4707}, \"start\": {\"col\": 19, \"line\": 122, \"offset\": 4682}}, \"$RETURNTYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 18, \"line\": 122, \"offset\": 4681}, \"start\": {\"col\": 12, \"line\": 122, \"offset\": 4675}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java\", \"start\": {\"col\": 6, \"line\": 121, \"offset\": 4633}}, {\"check_id\": \"java.lang.security.audit.command-injection-process-builder.command-injection-process-builder\", \"end\": {\"col\": 97, \"line\": 50, \"offset\": 2383}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"66b15e3164096e997267bc1db5a79ed98b6cd129242da59f41eaca998130a656b117a12d2244b90fef21ebf951e37b615fa432e06d088a8b3a52fa7278f61fff_0\", \"is_ignored\": false, \"lines\": \"                        new ProcessBuilder(new String[] {\\\"cmd\\\", \\\"/c\\\", \\\"ping -n 2 \\\" + ipAddress})\", \"message\": \"A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"HIGH\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"4bUzzo\", \"url\": \"https://semgrep.dev/playground/r/YDTp2B7/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder\", \"version_id\": \"YDTp2B7\"}}, \"shortlink\": \"https://sg.run/gJJe\", \"source\": \"https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder\", \"subcategory\": [\"audit\"], \"technology\": [\"java\"], \"vulnerability_class\": [\"Command Injection\"]}, \"metavars\": {\"$ARG\": {\"abstract_content\": \"\\\"ping -n 2 \\\"+ipAddress\", \"end\": {\"col\": 95, \"line\": 50, \"offset\": 2381}, \"start\": {\"col\": 71, \"line\": 50, \"offset\": 2357}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/commandInjection/CommandInjection.java\", \"start\": {\"col\": 25, \"line\": 50, \"offset\": 2311}}, {\"check_id\": \"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"end\": {\"col\": 20, \"line\": 33, \"offset\": 1344}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"d9218cae413101ae89df6202faeb17dd2c9ea14a19e4775f84838a20ab18a0bc67f040f758c32220cb206bd3e2516860a2ad2cc8c4740958c6eaa989bf5654de_0\", \"is_ignored\": false, \"lines\": \"    @RequestMapping(\", \"message\": \"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-352: Cross-Site Request Forgery (CSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"wdUJ7q\", \"url\": \"https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"version_id\": \"l4T4vEd\"}}, \"shortlink\": \"https://sg.run/2xlq\", \"source\": \"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping\", \"source-rule-url\": \"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING\", \"subcategory\": [\"audit\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"Cross-Site Request Forgery (CSRF)\"]}, \"metavars\": {\"$METHOD\": {\"abstract_content\": \"fetchFile\", \"end\": {\"col\": 44, \"line\": 35, \"offset\": 1485}, \"start\": {\"col\": 35, \"line\": 35, \"offset\": 1476}}, \"$RETURNTYPE\": {\"abstract_content\": \"ResponseEntity<byte[]>\", \"end\": {\"col\": 34, \"line\": 35, \"offset\": 1475}, \"start\": {\"col\": 12, \"line\": 35, \"offset\": 1453}}}, \"severity\": \"WARNING\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 6, \"line\": 33, \"offset\": 1330}}, {\"check_id\": \"java.spring.security.injection.tainted-file-path.tainted-file-path\", \"end\": {\"col\": 44, \"line\": 41, \"offset\": 1819}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"fileName\", \"location\": {\"end\": {\"col\": 86, \"line\": 35, \"offset\": 1527}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 78, \"line\": 35, \"offset\": 1519}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 44, \"line\": 41, \"offset\": 1819}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 17, \"line\": 38, \"offset\": 1612}}, \"new FileInputStream(\\n                        unrestrictedFileUpload.getContentDispositionRoot().toFile()\\n                                + FrameworkConstants.SLASH\\n                                + fileName)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 86, \"line\": 35, \"offset\": 1527}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 78, \"line\": 35, \"offset\": 1519}}, \"fileName\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"8ed5edd577e74ccd84366e6155e64a1996e45c93b509cbb091c42247add8d04d4e237e5132f3dbbd243622824f23eea4e78499ed925c6448b709f5f5c30506f9_0\", \"is_ignored\": false, \"lines\": \"                new FileInputStream(\\n                        unrestrictedFileUpload.getContentDispositionRoot().toFile()\\n                                + FrameworkConstants.SLASH\\n                                + fileName);\", \"message\": \"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"HIGH\", \"cwe\": [\"CWE-23: Relative Path Traversal\"], \"impact\": \"HIGH\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A01:2021 - Broken Access Control\"], \"references\": [\"https://owasp.org/www-community/attacks/Path_Traversal\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"lBUxok\", \"url\": \"https://semgrep.dev/playground/r/DkT6nEd/java.spring.security.injection.tainted-file-path.tainted-file-path\", \"version_id\": \"DkT6nEd\"}}, \"shortlink\": \"https://sg.run/x9o0\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Path Traversal\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"PathVariable\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"fetchFile\", \"end\": {\"col\": 44, \"line\": 35, \"offset\": 1485}, \"start\": {\"col\": 35, \"line\": 35, \"offset\": 1476}}, \"$REQ\": {\"abstract_content\": \"PathVariable PathVariable PathVariable PathVariable PathVariable PathVariable\", \"end\": {\"col\": 58, \"line\": 35, \"offset\": 1499}, \"start\": {\"col\": 46, \"line\": 35, \"offset\": 1487}}, \"$SOURCE\": {\"abstract_content\": \"fileName\", \"end\": {\"col\": 86, \"line\": 35, \"offset\": 1527}, \"start\": {\"col\": 78, \"line\": 35, \"offset\": 1519}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 77, \"line\": 35, \"offset\": 1518}, \"start\": {\"col\": 71, \"line\": 35, \"offset\": 1512}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java\", \"start\": {\"col\": 17, \"line\": 38, \"offset\": 1612}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 53, \"line\": 39, \"offset\": 1679}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 34, \"offset\": 1444}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 47, \"line\": 34, \"offset\": 1433}}}, {\"content\": \"queryParameterURL\", \"location\": {\"end\": {\"col\": 33, \"line\": 36, \"offset\": 1533}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 16, \"line\": 36, \"offset\": 1516}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 53, \"line\": 39, \"offset\": 1679}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 27, \"line\": 39, \"offset\": 1653}}, \"new URL(queryParameterURL)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 34, \"offset\": 1444}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 47, \"line\": 34, \"offset\": 1433}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"924dbbb13be25f803a3594c26b4d354125e50239d376622a21b03baa04a285f93b43efc3c76d5e3f4c067865f36207ff3e12ad2d0b541deefe99ded0e5282c72_0\", \"is_ignored\": false, \"lines\": \"                URL url = new URL(queryParameterURL);\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevelUnsecure\", \"end\": {\"col\": 68, \"line\": 33, \"offset\": 1385}, \"start\": {\"col\": 35, \"line\": 33, \"offset\": 1352}}, \"$ONEARG\": {\"abstract_content\": \"queryParameterURL\", \"end\": {\"col\": 52, \"line\": 39, \"offset\": 1678}, \"propagated_value\": {\"svalue_abstract_content\": \"queryParams.get(URL_PARAM_KEY)\", \"svalue_end\": {\"col\": 66, \"line\": 36, \"offset\": 1566}, \"svalue_start\": {\"col\": 36, \"line\": 36, \"offset\": 1536}}, \"start\": {\"col\": 35, \"line\": 39, \"offset\": 1661}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 34, \"offset\": 1412}, \"start\": {\"col\": 14, \"line\": 34, \"offset\": 1400}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 34, \"offset\": 1444}, \"start\": {\"col\": 47, \"line\": 34, \"offset\": 1433}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 34, \"offset\": 1432}, \"start\": {\"col\": 27, \"line\": 34, \"offset\": 1413}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 27, \"line\": 39, \"offset\": 1653}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 53, \"line\": 59, \"offset\": 2628}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 54, \"offset\": 2342}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 47, \"line\": 54, \"offset\": 2331}}}, {\"content\": \"queryParameterURL\", \"location\": {\"end\": {\"col\": 33, \"line\": 56, \"offset\": 2431}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 16, \"line\": 56, \"offset\": 2414}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 53, \"line\": 59, \"offset\": 2628}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 27, \"line\": 59, \"offset\": 2602}}, \"new URL(queryParameterURL)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 54, \"offset\": 2342}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 47, \"line\": 54, \"offset\": 2331}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"3c826404f24c32fe1169f21bbcdf89a30dada46f43b833317edaffc9089c97be732c1e8e7159314c23a5368044008bae842815e6f0d3a6ae9e15562aad54aaee_0\", \"is_ignored\": false, \"lines\": \"                URL url = new URL(queryParameterURL);\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevelUnsecureLevel2\", \"end\": {\"col\": 74, \"line\": 53, \"offset\": 2283}, \"start\": {\"col\": 35, \"line\": 53, \"offset\": 2244}}, \"$ONEARG\": {\"abstract_content\": \"queryParameterURL\", \"end\": {\"col\": 52, \"line\": 59, \"offset\": 2627}, \"propagated_value\": {\"svalue_abstract_content\": \"queryParams.get(URL_PARAM_KEY)\", \"svalue_end\": {\"col\": 66, \"line\": 56, \"offset\": 2464}, \"svalue_start\": {\"col\": 36, \"line\": 56, \"offset\": 2434}}, \"start\": {\"col\": 35, \"line\": 59, \"offset\": 2610}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 54, \"offset\": 2310}, \"start\": {\"col\": 14, \"line\": 54, \"offset\": 2298}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 54, \"offset\": 2342}, \"start\": {\"col\": 47, \"line\": 54, \"offset\": 2331}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 54, \"offset\": 2330}, \"start\": {\"col\": 27, \"line\": 54, \"offset\": 2311}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java\", \"start\": {\"col\": 27, \"line\": 59, \"offset\": 2602}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 52, \"line\": 53, \"offset\": 2577}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 49, \"offset\": 2353}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 49, \"offset\": 2342}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 50, \"offset\": 2374}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 50, \"offset\": 2372}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 52, \"line\": 53, \"offset\": 2577}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 53, \"offset\": 2542}}, \"\\\"select * from cars where id=\\\" + id\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 49, \"offset\": 2353}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 49, \"offset\": 2342}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"806cfd929b5dae6dd398a2348ed8d9781ea670269a3ad39e11e54df32d7670ab5ddbfd0f88922181ca0308f17921e5ce0d8ec29d4778839877350585a3f3a378_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id=\\\" + id,\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel1\", \"end\": {\"col\": 58, \"line\": 48, \"offset\": 2294}, \"start\": {\"col\": 35, \"line\": 48, \"offset\": 2271}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 49, \"offset\": 2321}, \"start\": {\"col\": 14, \"line\": 49, \"offset\": 2309}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 49, \"offset\": 2353}, \"start\": {\"col\": 47, \"line\": 49, \"offset\": 2342}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id=\", \"end\": {\"col\": 46, \"line\": 53, \"offset\": 2571}, \"start\": {\"col\": 18, \"line\": 53, \"offset\": 2543}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 49, \"offset\": 2341}, \"start\": {\"col\": 27, \"line\": 49, \"offset\": 2322}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 53, \"offset\": 2542}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 59, \"line\": 77, \"offset\": 3755}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 72, \"offset\": 3433}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 72, \"offset\": 3422}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 73, \"offset\": 3454}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 73, \"offset\": 3452}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 59, \"line\": 77, \"offset\": 3755}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 77, \"offset\": 3713}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 72, \"offset\": 3433}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 72, \"offset\": 3422}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"85401b8e6803f0c014696d60069343d62793bec4132cd3fef227234b6cfb4db5e6dc13fc38ad796df20696e14d1412e41a0a25705888cd39c9a8c5f3c073fe1c_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id='\\\" + id + \\\"'\\\",\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel2\", \"end\": {\"col\": 58, \"line\": 71, \"offset\": 3374}, \"start\": {\"col\": 35, \"line\": 71, \"offset\": 3351}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 72, \"offset\": 3401}, \"start\": {\"col\": 14, \"line\": 72, \"offset\": 3389}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 72, \"offset\": 3433}, \"start\": {\"col\": 47, \"line\": 72, \"offset\": 3422}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 47, \"line\": 77, \"offset\": 3743}, \"start\": {\"col\": 18, \"line\": 77, \"offset\": 3714}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 72, \"offset\": 3421}, \"start\": {\"col\": 27, \"line\": 72, \"offset\": 3402}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 77, \"offset\": 3713}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 64, \"line\": 65, \"offset\": 3157}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 59, \"offset\": 2856}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 59, \"offset\": 2845}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 60, \"offset\": 2877}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 60, \"offset\": 2875}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 64, \"line\": 65, \"offset\": 3157}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 65, \"offset\": 3122}}, \"\\\"select * from cars where id=\\\" + id\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 59, \"offset\": 2856}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 59, \"offset\": 2845}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"8aeba9eecaf16daf777a25ef297ae980bb86383473a895d20af843e0e8590ea79f72b6f1c3a21904bddb76dff965b9d96aaa0efdebd2cb16d6e833869c49bf4f_0\", \"is_ignored\": false, \"lines\": \"                            \\\"select * from cars where id=\\\" + id,\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"doesCarInformationExistsLevel1\", \"end\": {\"col\": 65, \"line\": 58, \"offset\": 2797}, \"start\": {\"col\": 35, \"line\": 58, \"offset\": 2767}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 59, \"offset\": 2824}, \"start\": {\"col\": 14, \"line\": 59, \"offset\": 2812}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 59, \"offset\": 2856}, \"start\": {\"col\": 47, \"line\": 59, \"offset\": 2845}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id=\", \"end\": {\"col\": 58, \"line\": 65, \"offset\": 3151}, \"start\": {\"col\": 30, \"line\": 65, \"offset\": 3123}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 59, \"offset\": 2844}, \"start\": {\"col\": 27, \"line\": 59, \"offset\": 2825}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 65, \"offset\": 3122}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 71, \"line\": 110, \"offset\": 5691}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 104, \"offset\": 5383}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 104, \"offset\": 5372}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 105, \"offset\": 5404}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 105, \"offset\": 5402}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 71, \"line\": 110, \"offset\": 5691}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 110, \"offset\": 5649}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 104, \"offset\": 5383}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 104, \"offset\": 5372}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"70219803503a17ba21ff8264bbf548c7ef3c4980ab273833814e072b25b545834048c66b3e6783513533dd84b21a167aa6b08b45040013c0dbbc52be6d0e6508_0\", \"is_ignored\": false, \"lines\": \"                            \\\"select * from cars where id='\\\" + id + \\\"'\\\",\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"doesCarInformationExistsLevel2\", \"end\": {\"col\": 65, \"line\": 103, \"offset\": 5324}, \"start\": {\"col\": 35, \"line\": 103, \"offset\": 5294}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 104, \"offset\": 5351}, \"start\": {\"col\": 14, \"line\": 104, \"offset\": 5339}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 104, \"offset\": 5383}, \"start\": {\"col\": 47, \"line\": 104, \"offset\": 5372}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 59, \"line\": 110, \"offset\": 5679}, \"start\": {\"col\": 30, \"line\": 110, \"offset\": 5650}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 104, \"offset\": 5371}, \"start\": {\"col\": 27, \"line\": 104, \"offset\": 5352}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 110, \"offset\": 5649}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 71, \"line\": 158, \"offset\": 8507}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 150, \"offset\": 8071}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 150, \"offset\": 8060}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 18, \"line\": 151, \"offset\": 8092}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 16, \"line\": 151, \"offset\": 8090}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 71, \"line\": 158, \"offset\": 8507}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 158, \"offset\": 8465}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 150, \"offset\": 8071}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 150, \"offset\": 8060}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"bb10c71ea3a4be145d3774c86570c9f5267de6d2985f2a1a3ea6ec48e3e23656933571d45179f282c6ccba4e67ff465fffafcacfc1ff332b62d7203f37af0e23_0\", \"is_ignored\": false, \"lines\": \"                            \\\"select * from cars where id='\\\" + id + \\\"'\\\",\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"doesCarInformationExistsLevel3\", \"end\": {\"col\": 65, \"line\": 149, \"offset\": 8012}, \"start\": {\"col\": 35, \"line\": 149, \"offset\": 7982}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 150, \"offset\": 8039}, \"start\": {\"col\": 14, \"line\": 150, \"offset\": 8027}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 150, \"offset\": 8071}, \"start\": {\"col\": 47, \"line\": 150, \"offset\": 8060}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 59, \"line\": 158, \"offset\": 8495}, \"start\": {\"col\": 30, \"line\": 158, \"offset\": 8466}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 150, \"offset\": 8059}, \"start\": {\"col\": 27, \"line\": 150, \"offset\": 8040}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 29, \"line\": 158, \"offset\": 8465}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 87, \"line\": 209, \"offset\": 11379}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 200, \"offset\": 10841}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 200, \"offset\": 10830}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 24, \"line\": 201, \"offset\": 10868}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 22, \"line\": 201, \"offset\": 10866}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 87, \"line\": 209, \"offset\": 11379}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 45, \"line\": 209, \"offset\": 11337}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 200, \"offset\": 10841}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 47, \"line\": 200, \"offset\": 10830}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"73aa27e6fb50b5dc93ee75916c81602f6ec4d96d037212424395b4cf9e5dc5b54e941879519dfe6177e73de4b91921dcf4b8113023ed7503187f5aa30dc2c227_0\", \"is_ignored\": false, \"lines\": \"                                            \\\"select * from cars where id='\\\" + id + \\\"'\\\"),\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"doesCarInformationExistsLevel4\", \"end\": {\"col\": 65, \"line\": 199, \"offset\": 10782}, \"start\": {\"col\": 35, \"line\": 199, \"offset\": 10752}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 200, \"offset\": 10809}, \"start\": {\"col\": 14, \"line\": 200, \"offset\": 10797}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 200, \"offset\": 10841}, \"start\": {\"col\": 47, \"line\": 200, \"offset\": 10830}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 75, \"line\": 209, \"offset\": 11367}, \"start\": {\"col\": 46, \"line\": 209, \"offset\": 11338}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 200, \"offset\": 10829}, \"start\": {\"col\": 27, \"line\": 200, \"offset\": 10810}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 45, \"line\": 209, \"offset\": 11337}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 52, \"line\": 48, \"offset\": 2225}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 64, \"line\": 45, \"offset\": 2075}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 45, \"offset\": 2064}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 24, \"line\": 46, \"offset\": 2102}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 22, \"line\": 46, \"offset\": 2100}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 52, \"line\": 48, \"offset\": 2225}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 48, \"offset\": 2190}}, \"\\\"select * from cars where id=\\\" + id\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 64, \"line\": 45, \"offset\": 2075}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 45, \"offset\": 2064}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"fea467c7aace1e579c115f3e5f49b32b57c9c4612a1528f74dc8961e713eff7e04719435ec09bc15368538976f0b7fb3808c561a7a4652e0f9718cc34ec5b6bd_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id=\\\" + id, this::resultSetToResponse);\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel1\", \"end\": {\"col\": 66, \"line\": 44, \"offset\": 2010}, \"start\": {\"col\": 43, \"line\": 44, \"offset\": 1987}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 45, \"offset\": 2037}, \"start\": {\"col\": 14, \"line\": 45, \"offset\": 2025}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 64, \"line\": 45, \"offset\": 2075}, \"start\": {\"col\": 53, \"line\": 45, \"offset\": 2064}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id=\", \"end\": {\"col\": 46, \"line\": 48, \"offset\": 2219}, \"start\": {\"col\": 18, \"line\": 48, \"offset\": 2191}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 52, \"line\": 45, \"offset\": 2063}, \"start\": {\"col\": 33, \"line\": 45, \"offset\": 2044}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 48, \"offset\": 2190}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 59, \"line\": 63, \"offset\": 2974}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 64, \"line\": 60, \"offset\": 2817}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 60, \"offset\": 2806}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 24, \"line\": 61, \"offset\": 2844}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 22, \"line\": 61, \"offset\": 2842}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 59, \"line\": 63, \"offset\": 2974}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 63, \"offset\": 2932}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 64, \"line\": 60, \"offset\": 2817}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 60, \"offset\": 2806}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"063c4e0cb45eb014ed4de48340b8d8cebc4052d2ea82ec61929d347722f40b1e3ae025fa84d59ea18f5c02a1e87ea64efbe58748413dc92eb6898cde016fd20c_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id='\\\" + id + \\\"'\\\", this::resultSetToResponse);\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel2\", \"end\": {\"col\": 66, \"line\": 59, \"offset\": 2752}, \"start\": {\"col\": 43, \"line\": 59, \"offset\": 2729}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 60, \"offset\": 2779}, \"start\": {\"col\": 14, \"line\": 60, \"offset\": 2767}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 64, \"line\": 60, \"offset\": 2817}, \"start\": {\"col\": 53, \"line\": 60, \"offset\": 2806}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 47, \"line\": 63, \"offset\": 2962}, \"start\": {\"col\": 18, \"line\": 63, \"offset\": 2933}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 52, \"line\": 60, \"offset\": 2805}, \"start\": {\"col\": 33, \"line\": 60, \"offset\": 2786}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 63, \"offset\": 2932}}, {\"check_id\": \"java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"end\": {\"col\": 59, \"line\": 78, \"offset\": 3727}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 64, \"line\": 75, \"offset\": 3550}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 75, \"offset\": 3539}}}, {\"content\": \"id\", \"location\": {\"end\": {\"col\": 24, \"line\": 76, \"offset\": 3577}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 22, \"line\": 76, \"offset\": 3575}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 59, \"line\": 78, \"offset\": 3727}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 78, \"offset\": 3685}}, \"\\\"select * from cars where id='\\\" + id + \\\"'\\\"\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 64, \"line\": 75, \"offset\": 3550}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 53, \"line\": 75, \"offset\": 3539}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"87e936120c0a99aba88cc381809f13fe4efa5145c931b0088e470ff0bee49f6a089b8a2a675711a408ffc244f9fb03a447aec67202b35959517fa46fd91e729f_0\", \"is_ignored\": false, \"lines\": \"                \\\"select * from cars where id='\\\" + id + \\\"'\\\", this::resultSetToResponse);\", \"message\": \"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A01:2017 - Injection\", \"A03:2021 - Injection\"], \"references\": [\"https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"10UdRR\", \"url\": \"https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"version_id\": \"0bTLlny\"}}, \"shortlink\": \"https://sg.run/9rzz\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"spring\"], \"vulnerability_class\": [\"SQL Injection\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"select\", \"end\": {\"col\": 7, \"line\": 1, \"offset\": 6}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getCarInformationLevel3\", \"end\": {\"col\": 66, \"line\": 74, \"offset\": 3485}, \"start\": {\"col\": 43, \"line\": 74, \"offset\": 3462}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 75, \"offset\": 3512}, \"start\": {\"col\": 14, \"line\": 75, \"offset\": 3500}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 64, \"line\": 75, \"offset\": 3550}, \"start\": {\"col\": 53, \"line\": 75, \"offset\": 3539}}, \"$SQLSTR\": {\"abstract_content\": \"select * from cars where id='\", \"end\": {\"col\": 47, \"line\": 78, \"offset\": 3715}, \"start\": {\"col\": 18, \"line\": 78, \"offset\": 3686}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 52, \"line\": 75, \"offset\": 3538}, \"start\": {\"col\": 33, \"line\": 75, \"offset\": 3519}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java\", \"start\": {\"col\": 17, \"line\": 78, \"offset\": 3685}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 33, \"line\": 64, \"offset\": 2574}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"url\", \"location\": {\"end\": {\"col\": 86, \"line\": 61, \"offset\": 2468}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 83, \"line\": 61, \"offset\": 2465}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 33, \"line\": 64, \"offset\": 2574}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 21, \"line\": 64, \"offset\": 2562}}, \"new URL(url)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 86, \"line\": 61, \"offset\": 2468}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 83, \"line\": 61, \"offset\": 2465}}, \"url\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"2b1ac4780ef79bf693ff9798dc8877cbdce6767cb0f340f705d1caa2549bf0765bcd70efb981c92365117df469e6254122c58a7d05c51f6eb5d9281282dab787_0\", \"is_ignored\": false, \"lines\": \"            URL u = new URL(url);\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getGenericVulnerabilityResponseWhenURL\", \"end\": {\"col\": 51, \"line\": 61, \"offset\": 2433}, \"start\": {\"col\": 13, \"line\": 61, \"offset\": 2395}}, \"$ONEARG\": {\"abstract_content\": \"url\", \"end\": {\"col\": 32, \"line\": 64, \"offset\": 2573}, \"start\": {\"col\": 29, \"line\": 64, \"offset\": 2570}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 65, \"line\": 61, \"offset\": 2447}, \"start\": {\"col\": 53, \"line\": 61, \"offset\": 2435}}, \"$SOURCE\": {\"abstract_content\": \"url\", \"end\": {\"col\": 86, \"line\": 61, \"offset\": 2468}, \"start\": {\"col\": 83, \"line\": 61, \"offset\": 2465}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 82, \"line\": 61, \"offset\": 2464}, \"start\": {\"col\": 76, \"line\": 61, \"offset\": 2458}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 21, \"line\": 64, \"offset\": 2562}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 29, \"line\": 127, \"offset\": 5396}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"url\", \"location\": {\"end\": {\"col\": 47, \"line\": 125, \"offset\": 5280}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 44, \"line\": 125, \"offset\": 5277}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 29, \"line\": 127, \"offset\": 5396}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 17, \"line\": 127, \"offset\": 5384}}, \"new URL(url)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 47, \"line\": 125, \"offset\": 5280}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 44, \"line\": 125, \"offset\": 5277}}, \"url\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"3564117d0407e0f414b8ded443ce8b2c629949c79d4a3018bb2b620cab1834bce9fc800b8d4fd484dd21f2eef53a1e7604470096031e980ad1fc0ebde939ec73_0\", \"is_ignored\": false, \"lines\": \"            if (new URL(url).getHost().equals(\\\"169.254.169.254\\\")) {\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel3\", \"end\": {\"col\": 95, \"line\": 124, \"offset\": 5232}, \"start\": {\"col\": 69, \"line\": 124, \"offset\": 5206}}, \"$ONEARG\": {\"abstract_content\": \"url\", \"end\": {\"col\": 28, \"line\": 127, \"offset\": 5395}, \"start\": {\"col\": 25, \"line\": 127, \"offset\": 5392}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 125, \"offset\": 5259}, \"start\": {\"col\": 14, \"line\": 125, \"offset\": 5247}}, \"$SOURCE\": {\"abstract_content\": \"url\", \"end\": {\"col\": 47, \"line\": 125, \"offset\": 5280}, \"start\": {\"col\": 44, \"line\": 125, \"offset\": 5277}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 43, \"line\": 125, \"offset\": 5276}, \"start\": {\"col\": 37, \"line\": 125, \"offset\": 5270}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 17, \"line\": 127, \"offset\": 5384}}, {\"check_id\": \"java.spring.security.injection.tainted-url-host.tainted-url-host\", \"end\": {\"col\": 59, \"line\": 144, \"offset\": 6258}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"url\", \"location\": {\"end\": {\"col\": 47, \"line\": 142, \"offset\": 6112}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 44, \"line\": 142, \"offset\": 6109}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 59, \"line\": 144, \"offset\": 6258}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 47, \"line\": 144, \"offset\": 6246}}, \"new URL(url)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 47, \"line\": 142, \"offset\": 6112}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 44, \"line\": 142, \"offset\": 6109}}, \"url\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"992946b2e6ab66db40657c48034240eec0ea6a434b4f575912fe822db91bf7ca590e04c9efaa342b485794efd0187c8f69cfbeb2b4555788f324c30f74587638_0\", \"is_ignored\": false, \"lines\": \"            if (MetaDataServiceMock.isPresent(new URL(url))) {\", \"message\": \"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-918: Server-Side Request Forgery (SSRF)\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"interfile\": true, \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"MEDIUM\", \"owasp\": [\"A10:2021 - Server-Side Request Forgery (SSRF)\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"oqUZo8\", \"url\": \"https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"version_id\": \"qkT2xDj\"}}, \"shortlink\": \"https://sg.run/vkYn\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Server-Side Request Forgery (SSRF)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel4\", \"end\": {\"col\": 95, \"line\": 141, \"offset\": 6064}, \"start\": {\"col\": 69, \"line\": 141, \"offset\": 6038}}, \"$ONEARG\": {\"abstract_content\": \"url\", \"end\": {\"col\": 58, \"line\": 144, \"offset\": 6257}, \"start\": {\"col\": 55, \"line\": 144, \"offset\": 6254}}, \"$REQ\": {\"abstract_content\": \"RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam\", \"end\": {\"col\": 26, \"line\": 142, \"offset\": 6091}, \"start\": {\"col\": 14, \"line\": 142, \"offset\": 6079}}, \"$SOURCE\": {\"abstract_content\": \"url\", \"end\": {\"col\": 47, \"line\": 142, \"offset\": 6112}, \"start\": {\"col\": 44, \"line\": 142, \"offset\": 6109}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 43, \"line\": 142, \"offset\": 6108}, \"start\": {\"col\": 37, \"line\": 142, \"offset\": 6102}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java\", \"start\": {\"col\": 47, \"line\": 144, \"offset\": 6246}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 79, \"line\": 54, \"offset\": 2442}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 49, \"offset\": 2225}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 49, \"offset\": 2212}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 79, \"line\": 54, \"offset\": 2442}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 17, \"line\": 54, \"offset\": 2380}}, \"String.format(vulnerablePayloadWithPlaceHolder, imageLocation)\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 49, \"offset\": 2225}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 49, \"offset\": 2212}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_0\", \"is_ignored\": false, \"lines\": \"                String.format(vulnerablePayloadWithPlaceHolder, imageLocation), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 94, \"line\": 51, \"offset\": 2323}, \"start\": {\"col\": 52, \"line\": 51, \"offset\": 2281}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel1\", \"end\": {\"col\": 61, \"line\": 48, \"offset\": 2161}, \"start\": {\"col\": 35, \"line\": 48, \"offset\": 2135}}, \"$PAYLOAD\": {\"abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder imageLocation)\", \"end\": {\"col\": 79, \"line\": 54, \"offset\": 2442}, \"start\": {\"col\": 17, \"line\": 54, \"offset\": 2380}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 49, \"offset\": 2225}, \"start\": {\"col\": 50, \"line\": 49, \"offset\": 2212}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 49, \"offset\": 2211}, \"start\": {\"col\": 43, \"line\": 49, \"offset\": 2205}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 63, \"line\": 54, \"offset\": 2426}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 95, \"line\": 51, \"offset\": 2324}, \"svalue_start\": {\"col\": 51, \"line\": 51, \"offset\": 2280}}, \"start\": {\"col\": 31, \"line\": 54, \"offset\": 2394}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 17, \"line\": 54, \"offset\": 2380}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 44, \"line\": 70, \"offset\": 3196}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 64, \"offset\": 2957}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 64, \"offset\": 2944}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 23, \"line\": 68, \"offset\": 3085}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 16, \"line\": 68, \"offset\": 3078}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 44, \"line\": 70, \"offset\": 3196}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 70, \"offset\": 3189}}, \"payload\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 64, \"offset\": 2957}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 64, \"offset\": 2944}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_1\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<>(payload, HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 98, \"line\": 66, \"offset\": 3059}, \"start\": {\"col\": 52, \"line\": 66, \"offset\": 3013}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel2\", \"end\": {\"col\": 61, \"line\": 63, \"offset\": 2893}, \"start\": {\"col\": 35, \"line\": 63, \"offset\": 2867}}, \"$PAYLOAD\": {\"abstract_content\": \"payload\", \"end\": {\"col\": 44, \"line\": 70, \"offset\": 3196}, \"propagated_value\": {\"svalue_abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder imageLocation)\", \"svalue_end\": {\"col\": 88, \"line\": 68, \"offset\": 3150}, \"svalue_start\": {\"col\": 26, \"line\": 68, \"offset\": 3088}}, \"start\": {\"col\": 37, \"line\": 70, \"offset\": 3189}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 64, \"offset\": 2957}, \"start\": {\"col\": 50, \"line\": 64, \"offset\": 2944}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 64, \"offset\": 2943}, \"start\": {\"col\": 43, \"line\": 64, \"offset\": 2937}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 72, \"line\": 68, \"offset\": 3134}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 99, \"line\": 66, \"offset\": 3060}, \"svalue_start\": {\"col\": 51, \"line\": 66, \"offset\": 3012}}, \"start\": {\"col\": 40, \"line\": 68, \"offset\": 3102}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 70, \"offset\": 3189}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 44, \"line\": 89, \"offset\": 4085}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 80, \"offset\": 3754}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 80, \"offset\": 3741}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 23, \"line\": 84, \"offset\": 3878}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 16, \"line\": 84, \"offset\": 3871}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 44, \"line\": 89, \"offset\": 4085}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 89, \"offset\": 4078}}, \"payload\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 80, \"offset\": 3754}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 80, \"offset\": 3741}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_2\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<>(payload, HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 94, \"line\": 82, \"offset\": 3852}, \"start\": {\"col\": 52, \"line\": 82, \"offset\": 3810}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel3\", \"end\": {\"col\": 61, \"line\": 79, \"offset\": 3690}, \"start\": {\"col\": 35, \"line\": 79, \"offset\": 3664}}, \"$PAYLOAD\": {\"abstract_content\": \"payload\", \"end\": {\"col\": 44, \"line\": 89, \"offset\": 4085}, \"propagated_value\": {\"svalue_abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder StringEscapeUtils.escapeHtml4(imageLocation))\", \"svalue_end\": {\"col\": 70, \"line\": 87, \"offset\": 4039}, \"svalue_start\": {\"col\": 17, \"line\": 85, \"offset\": 3897}}, \"start\": {\"col\": 37, \"line\": 89, \"offset\": 4078}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 80, \"offset\": 3754}, \"start\": {\"col\": 50, \"line\": 80, \"offset\": 3741}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 80, \"offset\": 3740}, \"start\": {\"col\": 43, \"line\": 80, \"offset\": 3734}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 57, \"line\": 86, \"offset\": 3968}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 95, \"line\": 82, \"offset\": 3853}, \"svalue_start\": {\"col\": 51, \"line\": 82, \"offset\": 3809}}, \"start\": {\"col\": 25, \"line\": 86, \"offset\": 3936}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 89, \"offset\": 4078}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 55, \"line\": 113, \"offset\": 5251}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 101, \"offset\": 4754}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 101, \"offset\": 4741}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 20, \"line\": 107, \"offset\": 5004}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 13, \"line\": 107, \"offset\": 4997}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 55, \"line\": 113, \"offset\": 5251}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 113, \"offset\": 5233}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 101, \"offset\": 4754}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 101, \"offset\": 4741}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_3\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 94, \"line\": 103, \"offset\": 4852}, \"start\": {\"col\": 52, \"line\": 103, \"offset\": 4810}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel4\", \"end\": {\"col\": 61, \"line\": 100, \"offset\": 4690}, \"start\": {\"col\": 35, \"line\": 100, \"offset\": 4664}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 55, \"line\": 113, \"offset\": 5251}, \"start\": {\"col\": 37, \"line\": 113, \"offset\": 5233}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 101, \"offset\": 4754}, \"start\": {\"col\": 50, \"line\": 101, \"offset\": 4741}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 101, \"offset\": 4740}, \"start\": {\"col\": 43, \"line\": 101, \"offset\": 4734}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 61, \"line\": 109, \"offset\": 5108}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 95, \"line\": 103, \"offset\": 4853}, \"svalue_start\": {\"col\": 51, \"line\": 103, \"offset\": 4809}}, \"start\": {\"col\": 29, \"line\": 109, \"offset\": 5076}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 113, \"offset\": 5233}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 55, \"line\": 145, \"offset\": 6683}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 124, \"offset\": 5844}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 124, \"offset\": 5831}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 20, \"line\": 139, \"offset\": 6436}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 13, \"line\": 139, \"offset\": 6429}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 55, \"line\": 145, \"offset\": 6683}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 145, \"offset\": 6665}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 124, \"offset\": 5844}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 124, \"offset\": 5831}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_4\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 94, \"line\": 126, \"offset\": 5942}, \"start\": {\"col\": 52, \"line\": 126, \"offset\": 5900}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel5\", \"end\": {\"col\": 61, \"line\": 123, \"offset\": 5780}, \"start\": {\"col\": 35, \"line\": 123, \"offset\": 5754}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 55, \"line\": 145, \"offset\": 6683}, \"start\": {\"col\": 37, \"line\": 145, \"offset\": 6665}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 124, \"offset\": 5844}, \"start\": {\"col\": 50, \"line\": 124, \"offset\": 5831}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 124, \"offset\": 5830}, \"start\": {\"col\": 43, \"line\": 124, \"offset\": 5824}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 61, \"line\": 141, \"offset\": 6540}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=%s width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 95, \"line\": 126, \"offset\": 5943}, \"svalue_start\": {\"col\": 51, \"line\": 126, \"offset\": 5899}}, \"start\": {\"col\": 29, \"line\": 141, \"offset\": 6508}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 37, \"line\": 145, \"offset\": 6665}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 48, \"line\": 168, \"offset\": 7705}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 158, \"offset\": 7297}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 158, \"offset\": 7284}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 27, \"line\": 163, \"offset\": 7482}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 20, \"line\": 163, \"offset\": 7475}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 48, \"line\": 168, \"offset\": 7705}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 41, \"line\": 168, \"offset\": 7698}}, \"payload\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 158, \"offset\": 7297}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 158, \"offset\": 7284}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_5\", \"is_ignored\": false, \"lines\": \"            return new ResponseEntity<>(payload, HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 98, \"line\": 160, \"offset\": 7399}, \"start\": {\"col\": 52, \"line\": 160, \"offset\": 7353}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel6\", \"end\": {\"col\": 61, \"line\": 157, \"offset\": 7233}, \"start\": {\"col\": 35, \"line\": 157, \"offset\": 7207}}, \"$PAYLOAD\": {\"abstract_content\": \"payload\", \"end\": {\"col\": 48, \"line\": 168, \"offset\": 7705}, \"propagated_value\": {\"svalue_abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder StringEscapeUtils.escapeHtml4(imageLocation))\", \"svalue_end\": {\"col\": 74, \"line\": 166, \"offset\": 7655}, \"svalue_start\": {\"col\": 21, \"line\": 164, \"offset\": 7505}}, \"start\": {\"col\": 41, \"line\": 168, \"offset\": 7698}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 158, \"offset\": 7297}, \"start\": {\"col\": 50, \"line\": 158, \"offset\": 7284}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 158, \"offset\": 7283}, \"start\": {\"col\": 43, \"line\": 158, \"offset\": 7277}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 61, \"line\": 165, \"offset\": 7580}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 99, \"line\": 160, \"offset\": 7400}, \"svalue_start\": {\"col\": 51, \"line\": 160, \"offset\": 7352}}, \"start\": {\"col\": 29, \"line\": 165, \"offset\": 7548}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 41, \"line\": 168, \"offset\": 7698}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 48, \"line\": 198, \"offset\": 9010}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"imageLocation\", \"location\": {\"end\": {\"col\": 63, \"line\": 186, \"offset\": 8475}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 186, \"offset\": 8462}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 27, \"line\": 193, \"offset\": 8793}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 20, \"line\": 193, \"offset\": 8786}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 48, \"line\": 198, \"offset\": 9010}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 41, \"line\": 198, \"offset\": 9003}}, \"payload\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 63, \"line\": 186, \"offset\": 8475}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 50, \"line\": 186, \"offset\": 8462}}, \"imageLocation\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_6\", \"is_ignored\": false, \"lines\": \"            return new ResponseEntity<>(payload, HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$HTMLSTR\": {\"abstract_content\": \"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\", \"end\": {\"col\": 98, \"line\": 187, \"offset\": 8576}, \"start\": {\"col\": 52, \"line\": 187, \"offset\": 8530}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevelSecure\", \"end\": {\"col\": 66, \"line\": 185, \"offset\": 8411}, \"start\": {\"col\": 35, \"line\": 185, \"offset\": 8380}}, \"$PAYLOAD\": {\"abstract_content\": \"payload\", \"end\": {\"col\": 48, \"line\": 198, \"offset\": 9010}, \"propagated_value\": {\"svalue_abstract_content\": \"String.format(vulnerablePayloadWithPlaceHolder HtmlUtils.htmlEscapeHex(imageLocation))\", \"svalue_end\": {\"col\": 68, \"line\": 196, \"offset\": 8960}, \"svalue_start\": {\"col\": 21, \"line\": 194, \"offset\": 8816}}, \"start\": {\"col\": 41, \"line\": 198, \"offset\": 9003}}, \"$SOURCE\": {\"abstract_content\": \"imageLocation\", \"end\": {\"col\": 63, \"line\": 186, \"offset\": 8475}, \"start\": {\"col\": 50, \"line\": 186, \"offset\": 8462}}, \"$TYPE\": {\"abstract_content\": \"String\", \"end\": {\"col\": 49, \"line\": 186, \"offset\": 8461}, \"start\": {\"col\": 43, \"line\": 186, \"offset\": 8455}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 61, \"line\": 195, \"offset\": 8891}, \"propagated_value\": {\"svalue_abstract_content\": \"\\\"<img src=\\\\\\\"%s\\\\\\\" width=\\\\\\\"400\\\\\\\" height=\\\\\\\"300\\\\\\\"/>\\\"\", \"svalue_end\": {\"col\": 99, \"line\": 187, \"offset\": 8577}, \"svalue_start\": {\"col\": 51, \"line\": 187, \"offset\": 8529}}, \"start\": {\"col\": 29, \"line\": 195, \"offset\": 8859}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java\", \"start\": {\"col\": 41, \"line\": 198, \"offset\": 9003}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 61, \"line\": 38, \"offset\": 1728}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 32, \"offset\": 1371}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 32, \"offset\": 1360}}}, {\"content\": \"map\", \"location\": {\"end\": {\"col\": 43, \"line\": 35, \"offset\": 1536}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 40, \"line\": 35, \"offset\": 1533}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 20, \"line\": 36, \"offset\": 1584}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 13, \"line\": 36, \"offset\": 1577}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 61, \"line\": 38, \"offset\": 1728}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 38, \"offset\": 1710}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 32, \"offset\": 1371}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 32, \"offset\": 1360}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"d04b36f55a78a09c4524a8b9363418f097d56f5b3273cb8d7c012b2089939244526e181a38bae1f82371799feb9fba6071d7f60fd0a46dadf9a3eea40ea1938a_0\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$ERROR\": {\"abstract_content\": \"String\", \"end\": {\"col\": 41, \"line\": 38, \"offset\": 1708}, \"start\": {\"col\": 35, \"line\": 38, \"offset\": 1702}}, \"$HTMLSTR\": {\"abstract_content\": \"<div>%s<div>\", \"end\": {\"col\": 64, \"line\": 33, \"offset\": 1438}, \"start\": {\"col\": 52, \"line\": 33, \"offset\": 1426}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel1\", \"end\": {\"col\": 61, \"line\": 31, \"offset\": 1312}, \"start\": {\"col\": 35, \"line\": 31, \"offset\": 1286}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 61, \"line\": 38, \"offset\": 1728}, \"start\": {\"col\": 43, \"line\": 38, \"offset\": 1710}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 32, \"offset\": 1371}, \"start\": {\"col\": 47, \"line\": 32, \"offset\": 1360}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 32, \"offset\": 1359}, \"start\": {\"col\": 27, \"line\": 32, \"offset\": 1340}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 74, \"line\": 36, \"offset\": 1638}, \"start\": {\"col\": 42, \"line\": 36, \"offset\": 1606}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 38, \"offset\": 1710}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 61, \"line\": 61, \"offset\": 2948}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 51, \"offset\": 2399}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 51, \"offset\": 2388}}}, {\"content\": \"map\", \"location\": {\"end\": {\"col\": 43, \"line\": 55, \"offset\": 2640}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 40, \"line\": 55, \"offset\": 2637}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 24, \"line\": 58, \"offset\": 2790}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 17, \"line\": 58, \"offset\": 2783}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 61, \"line\": 61, \"offset\": 2948}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 61, \"offset\": 2930}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 51, \"offset\": 2399}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 51, \"offset\": 2388}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"d04b36f55a78a09c4524a8b9363418f097d56f5b3273cb8d7c012b2089939244526e181a38bae1f82371799feb9fba6071d7f60fd0a46dadf9a3eea40ea1938a_1\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$ERROR\": {\"abstract_content\": \"String\", \"end\": {\"col\": 41, \"line\": 61, \"offset\": 2928}, \"start\": {\"col\": 35, \"line\": 61, \"offset\": 2922}}, \"$HTMLSTR\": {\"abstract_content\": \"<div>%s<div>\", \"end\": {\"col\": 64, \"line\": 52, \"offset\": 2466}, \"start\": {\"col\": 52, \"line\": 52, \"offset\": 2454}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel2\", \"end\": {\"col\": 61, \"line\": 50, \"offset\": 2340}, \"start\": {\"col\": 35, \"line\": 50, \"offset\": 2314}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 61, \"line\": 61, \"offset\": 2948}, \"start\": {\"col\": 43, \"line\": 61, \"offset\": 2930}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 51, \"offset\": 2399}, \"start\": {\"col\": 47, \"line\": 51, \"offset\": 2388}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 51, \"offset\": 2387}, \"start\": {\"col\": 27, \"line\": 51, \"offset\": 2368}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 78, \"line\": 58, \"offset\": 2844}, \"start\": {\"col\": 46, \"line\": 58, \"offset\": 2812}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 61, \"offset\": 2930}}, {\"check_id\": \"java.spring.security.injection.tainted-html-string.tainted-html-string\", \"end\": {\"col\": 61, \"line\": 86, \"offset\": 4373}, \"extra\": {\"dataflow_trace\": {\"intermediate_vars\": [{\"content\": \"queryParams\", \"location\": {\"end\": {\"col\": 58, \"line\": 74, \"offset\": 3705}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 74, \"offset\": 3694}}}, {\"content\": \"map\", \"location\": {\"end\": {\"col\": 43, \"line\": 78, \"offset\": 3946}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 40, \"line\": 78, \"offset\": 3943}}}, {\"content\": \"payload\", \"location\": {\"end\": {\"col\": 24, \"line\": 83, \"offset\": 4215}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 17, \"line\": 83, \"offset\": 4208}}}], \"taint_sink\": [\"CliLoc\", [{\"end\": {\"col\": 61, \"line\": 86, \"offset\": 4373}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 86, \"offset\": 4355}}, \"payload.toString()\"]], \"taint_source\": [\"CliLoc\", [{\"end\": {\"col\": 58, \"line\": 74, \"offset\": 3705}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 47, \"line\": 74, \"offset\": 3694}}, \"queryParams\"]]}, \"engine_kind\": \"OSS\", \"fingerprint\": \"d04b36f55a78a09c4524a8b9363418f097d56f5b3273cb8d7c012b2089939244526e181a38bae1f82371799feb9fba6071d7f60fd0a46dadf9a3eea40ea1938a_2\", \"is_ignored\": false, \"lines\": \"        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);\", \"message\": \"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"MEDIUM\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"HIGH\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"YGUvkL\", \"url\": \"https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"version_id\": \"WrTWQLW\"}}, \"shortlink\": \"https://sg.run/ObdR\", \"source\": \"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string\", \"subcategory\": [\"vuln\"], \"technology\": [\"java\", \"spring\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$1\": {\"abstract_content\": \"RequestParam\", \"end\": {\"col\": 13, \"line\": 1, \"offset\": 12}, \"start\": {\"col\": 1, \"line\": 1, \"offset\": 0}}, \"$ERROR\": {\"abstract_content\": \"String\", \"end\": {\"col\": 41, \"line\": 86, \"offset\": 4353}, \"start\": {\"col\": 35, \"line\": 86, \"offset\": 4347}}, \"$HTMLSTR\": {\"abstract_content\": \"<div>%s<div>\", \"end\": {\"col\": 64, \"line\": 75, \"offset\": 3772}, \"start\": {\"col\": 52, \"line\": 75, \"offset\": 3760}}, \"$METHODNAME\": {\"abstract_content\": \"getVulnerablePayloadLevel3\", \"end\": {\"col\": 61, \"line\": 73, \"offset\": 3646}, \"start\": {\"col\": 35, \"line\": 73, \"offset\": 3620}}, \"$PAYLOAD\": {\"abstract_content\": \"payload.toString()\", \"end\": {\"col\": 61, \"line\": 86, \"offset\": 4373}, \"start\": {\"col\": 43, \"line\": 86, \"offset\": 4355}}, \"$SOURCE\": {\"abstract_content\": \"queryParams\", \"end\": {\"col\": 58, \"line\": 74, \"offset\": 3705}, \"start\": {\"col\": 47, \"line\": 74, \"offset\": 3694}}, \"$TYPE\": {\"abstract_content\": \"Map<String String>\", \"end\": {\"col\": 46, \"line\": 74, \"offset\": 3693}, \"start\": {\"col\": 27, \"line\": 74, \"offset\": 3674}}, \"$VAR\": {\"abstract_content\": \"vulnerablePayloadWithPlaceHolder\", \"end\": {\"col\": 78, \"line\": 83, \"offset\": 4269}, \"start\": {\"col\": 46, \"line\": 83, \"offset\": 4237}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java\", \"start\": {\"col\": 43, \"line\": 86, \"offset\": 4355}}, {\"check_id\": \"generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"end\": {\"col\": 233, \"line\": 1, \"offset\": 232}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3cd667e7e3f7218614f8cb73bd3d5d63a4bfa545aad29345db78b79d976639770eb2fbb5406b4788db94a738371dfc410a45ed6edbcdaec4a36e5c4c20ef50d7_0\", \"is_ignored\": false, \"lines\": \"NONE_ALGORITHM_ATTACK_CURL_PAYLOAD=curl 'http://localhost:9090/vulnerable/JWTVulnerability/LEVEL_6' -H 'Cookie: JWTToken=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.'\", \"message\": \"JWT token detected\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-321: Use of Hard-coded Cryptographic Key\"], \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A02:2021 - Cryptographic Failures\"], \"references\": [\"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"kxU8E8\", \"url\": \"https://semgrep.dev/playground/r/o5Tgljp/generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"version_id\": \"o5Tgljp\"}}, \"shortlink\": \"https://sg.run/05N5\", \"source\": \"https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token\", \"source-rule-url\": \"https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py\", \"subcategory\": [\"audit\"], \"technology\": [\"secrets\", \"jwt\"], \"vulnerability_class\": [\"Cryptographic Issues\"]}, \"metavars\": {}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/attackvectors/JWTVulnerabilityPayload.properties\", \"start\": {\"col\": 122, \"line\": 1, \"offset\": 121}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 64, \"line\": 22, \"offset\": 850}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"6750d594cda4be2d290f4f3fb009cd0216fb400a3ec83efc5ae6fc684580c7ebdc927370901b13d39687503e46e531fed3a51810bde4d40cb474e645f82c0b7b_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"response\\\").innerHTML = data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"response\\\")\", \"end\": {\"col\": 38, \"line\": 22, \"offset\": 824}, \"start\": {\"col\": 3, \"line\": 22, \"offset\": 789}}, \"$HTML\": {\"abstract_content\": \"data.content\", \"end\": {\"col\": 63, \"line\": 22, \"offset\": 849}, \"start\": {\"col\": 51, \"line\": 22, \"offset\": 837}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js\", \"start\": {\"col\": 3, \"line\": 22, \"offset\": 789}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 75, \"line\": 14, \"offset\": 458}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"976f8a40e2838a4206a5400b7fa9514fd5903f5a4dba06b6ab2a25fe44e9085bcdcce972be07e13b3a79fa7bbb65f6c759dcb922e6eba9d2edbdd63011233ab7_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"pingUtilityResponse\\\").innerHTML = data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"pingUtilityResponse\\\")\", \"end\": {\"col\": 49, \"line\": 14, \"offset\": 432}, \"start\": {\"col\": 3, \"line\": 14, \"offset\": 386}}, \"$HTML\": {\"abstract_content\": \"data.content\", \"end\": {\"col\": 74, \"line\": 14, \"offset\": 457}, \"start\": {\"col\": 62, \"line\": 14, \"offset\": 445}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js\", \"start\": {\"col\": 3, \"line\": 14, \"offset\": 386}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 72, \"line\": 18, \"offset\": 583}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"c3c1fd587f14433f7f6b1536b996ee540e0dc565b706a202b92cc365342252b714b8481a2c303d3422743dca3368426aeb3cdf56f464f7e3526cb50d7fc717a1_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"carInformation\\\").innerHTML =\\n      \\\"<img src='\\\" + data.carInformation.imagePath + \\\"' width='900'/>\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"carInformation\\\")\", \"end\": {\"col\": 46, \"line\": 17, \"offset\": 499}, \"start\": {\"col\": 5, \"line\": 17, \"offset\": 458}}, \"$HTML\": {\"abstract_content\": \"\\\"<img src='\\\"+data.carInformation.imagePath+\\\"' width='900'/>\\\"\", \"end\": {\"col\": 71, \"line\": 18, \"offset\": 582}, \"start\": {\"col\": 7, \"line\": 18, \"offset\": 518}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"start\": {\"col\": 5, \"line\": 17, \"offset\": 458}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 66, \"line\": 26, \"offset\": 979}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"186ec1bb444dd21eb99ca35437a46f90dac2099747f4a8c5eb126e4adf219b72877b42c6a0017bede5a2f290945d7d4c320b572a236f1a45474e6b8bad8ffd5a_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"verificationResponse\\\").innerHTML =\\n      \\\"JWT: \\\" + data.content + \\\" is not valid. Please try again\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"verificationResponse\\\")\", \"end\": {\"col\": 52, \"line\": 25, \"offset\": 901}, \"start\": {\"col\": 5, \"line\": 25, \"offset\": 854}}, \"$HTML\": {\"abstract_content\": \"\\\"JWT: \\\"+data.content+\\\" is not valid. Please try again\\\"\", \"end\": {\"col\": 65, \"line\": 26, \"offset\": 978}, \"start\": {\"col\": 7, \"line\": 26, \"offset\": 920}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js\", \"start\": {\"col\": 5, \"line\": 25, \"offset\": 854}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 66, \"line\": 25, \"offset\": 892}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"936498b5ef4e5546b1b8ee8156cd454346a54e95924d9c20114ebdc5d0dafadff87e30f508a11f85bf178fed4cabd019576043535a1f7cb9f047dfb01508c007_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"verificationResponse\\\").innerHTML =\\n      \\\"JWT: \\\" + data.content + \\\" is not valid. Please try again\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"verificationResponse\\\")\", \"end\": {\"col\": 52, \"line\": 24, \"offset\": 814}, \"start\": {\"col\": 5, \"line\": 24, \"offset\": 767}}, \"$HTML\": {\"abstract_content\": \"\\\"JWT: \\\"+data.content+\\\" is not valid. Please try again\\\"\", \"end\": {\"col\": 65, \"line\": 25, \"offset\": 891}, \"start\": {\"col\": 7, \"line\": 25, \"offset\": 833}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js\", \"start\": {\"col\": 5, \"line\": 24, \"offset\": 767}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 59, \"line\": 30, \"offset\": 994}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"12369a4254f305299ec328745c5e9fb76ee9921b6bcfd4e4a66273d9780cd9e83b994efd6c73e9ce035781493ace5dcaf31bb110837a203b49c82f972e8efc3b_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"jwt\\\").innerHTML = data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"jwt\\\")\", \"end\": {\"col\": 33, \"line\": 30, \"offset\": 968}, \"start\": {\"col\": 3, \"line\": 30, \"offset\": 938}}, \"$HTML\": {\"abstract_content\": \"data.content\", \"end\": {\"col\": 58, \"line\": 30, \"offset\": 993}, \"start\": {\"col\": 46, \"line\": 30, \"offset\": 981}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js\", \"start\": {\"col\": 3, \"line\": 30, \"offset\": 938}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 66, \"line\": 36, \"offset\": 1137}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"e0619fe07c2a78bc53022c739f7ab0179ec55a9be247afd2ed40fd74811214d65959063defd33017db548a0f179eb3b45a5f350ff8ea849ba03c3e1b86a4492a_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"verificationResponse\\\").innerHTML =\\n      \\\"JWT: \\\" + data.content + \\\" is not valid. Please try again\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"verificationResponse\\\")\", \"end\": {\"col\": 52, \"line\": 35, \"offset\": 1059}, \"start\": {\"col\": 5, \"line\": 35, \"offset\": 1012}}, \"$HTML\": {\"abstract_content\": \"\\\"JWT: \\\"+data.content+\\\" is not valid. Please try again\\\"\", \"end\": {\"col\": 65, \"line\": 36, \"offset\": 1136}, \"start\": {\"col\": 7, \"line\": 36, \"offset\": 1078}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js\", \"start\": {\"col\": 5, \"line\": 35, \"offset\": 1012}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 59, \"line\": 41, \"offset\": 1239}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"0e0e533b4d75ec124a5e4961d53295c2120bda1d78b24ca75a7b560809ef9981ee9e3e22021ed8f5742a880c82a131a55fd8faa0fd6c15e32018ee4c2bb38aaa_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"jwt\\\").innerHTML = data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"jwt\\\")\", \"end\": {\"col\": 33, \"line\": 41, \"offset\": 1213}, \"start\": {\"col\": 3, \"line\": 41, \"offset\": 1183}}, \"$HTML\": {\"abstract_content\": \"data.content\", \"end\": {\"col\": 58, \"line\": 41, \"offset\": 1238}, \"start\": {\"col\": 46, \"line\": 41, \"offset\": 1226}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js\", \"start\": {\"col\": 3, \"line\": 41, \"offset\": 1183}}, {\"check_id\": \"generic.secrets.security.detected-private-key.detected-private-key\", \"end\": {\"col\": 65, \"line\": 6, \"offset\": 238}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3f0c09a03b811710b3c47f9d883925c5811e10838b97751ea15c88455d9a66eafd27e301302dd7aa2f0013f3850c4cf737a79a211c4cfa6ba0f939c4e71a0b7b_0\", \"is_ignored\": false, \"lines\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDG86CoStCZbgTi\", \"message\": \"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-798: Use of Hard-coded Credentials\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"MEDIUM\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2021 - Identification and Authentication Failures\"], \"references\": [\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"7KUQ0p\", \"url\": \"https://semgrep.dev/playground/r/rxTyLRv/generic.secrets.security.detected-private-key.detected-private-key\", \"version_id\": \"rxTyLRv\"}}, \"shortlink\": \"https://sg.run/b7dr\", \"source\": \"https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key\", \"source-rule-url\": \"https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\", \"subcategory\": [\"audit\"], \"technology\": [\"secrets\"], \"vulnerability_class\": [\"Hard-coded Secrets\"]}, \"metavars\": {\"$KEY\": {\"abstract_content\": \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDG86CoStCZbgTi\", \"end\": {\"col\": 65, \"line\": 6, \"offset\": 238}, \"start\": {\"col\": 1, \"line\": 6, \"offset\": 174}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/JWTVulnerability/keys/private_key.pem\", \"start\": {\"col\": 1, \"line\": 5, \"offset\": 146}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 73, \"line\": 35, \"offset\": 1166}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"7a7ea3600f5359f7988e2ade0c5e3a75f82e654ff36c62a003c3529f08e83d29b65f2e580408129f47aefca2af980d47fd85287885c7ccba414dfeec9ae8d6bc_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"Information\\\").innerHTML = tableInformation;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"Information\\\")\", \"end\": {\"col\": 43, \"line\": 35, \"offset\": 1136}, \"start\": {\"col\": 5, \"line\": 35, \"offset\": 1098}}, \"$HTML\": {\"abstract_content\": \"tableInformation\", \"end\": {\"col\": 72, \"line\": 35, \"offset\": 1165}, \"propagated_value\": {\"svalue_abstract_content\": \"tableInformation+\\\"</table>\\\"\", \"svalue_end\": {\"col\": 53, \"line\": 34, \"offset\": 1092}, \"svalue_start\": {\"col\": 24, \"line\": 34, \"offset\": 1063}}, \"start\": {\"col\": 56, \"line\": 35, \"offset\": 1149}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js\", \"start\": {\"col\": 5, \"line\": 35, \"offset\": 1098}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 36, \"line\": 17, \"offset\": 453}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"13eb77cce81e51eaf8f8fdc540da11e2324fe4556750ce493d0e08e3f5c2fd22697731ebbbf291e3ed0f748da5ba13e7dd923d5c3d7b42f49e76ffb5f9fc7ed5_0\", \"is_ignored\": false, \"lines\": \"  postDiv.innerHTML = post.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"postDiv\", \"end\": {\"col\": 10, \"line\": 17, \"offset\": 427}, \"start\": {\"col\": 3, \"line\": 17, \"offset\": 420}}, \"$HTML\": {\"abstract_content\": \"post.content\", \"end\": {\"col\": 35, \"line\": 17, \"offset\": 452}, \"start\": {\"col\": 23, \"line\": 17, \"offset\": 440}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js\", \"start\": {\"col\": 3, \"line\": 17, \"offset\": 420}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 56, \"line\": 22, \"offset\": 612}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3ac16783e7b4b42dcd7ea9942da239e5e83b8074f8b71d0d45c6c7d6e6d988feb304061869157d94454bbdd8a2fa6e9604fb561f1156d522c8f9db1ff1d4dc3d_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"allPosts\\\").innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"allPosts\\\")\", \"end\": {\"col\": 38, \"line\": 22, \"offset\": 594}, \"start\": {\"col\": 3, \"line\": 22, \"offset\": 559}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 55, \"line\": 22, \"offset\": 611}, \"start\": {\"col\": 51, \"line\": 22, \"offset\": 607}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js\", \"start\": {\"col\": 3, \"line\": 22, \"offset\": 559}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 78, \"line\": 24, \"offset\": 793}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"063f0b45a6d61a20cc8bd779ecdb927d1f724b4e09d979d691903395246437372370af37a418bf4259d4f0795e47e63eff894a8eae369eaabf6f6d66f33ef182_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"projectsResponse\\\").innerHTML = tableInformation;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"projectsResponse\\\")\", \"end\": {\"col\": 48, \"line\": 24, \"offset\": 763}, \"start\": {\"col\": 5, \"line\": 24, \"offset\": 720}}, \"$HTML\": {\"abstract_content\": \"tableInformation\", \"end\": {\"col\": 77, \"line\": 24, \"offset\": 792}, \"propagated_value\": {\"svalue_abstract_content\": \"tableInformation+\\\"</tr>\\\"\", \"svalue_end\": {\"col\": 50, \"line\": 23, \"offset\": 714}, \"svalue_start\": {\"col\": 24, \"line\": 23, \"offset\": 688}}, \"start\": {\"col\": 61, \"line\": 24, \"offset\": 776}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js\", \"start\": {\"col\": 5, \"line\": 24, \"offset\": 720}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 55, \"line\": 17, \"offset\": 537}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"4789c55af64d74f7efdefe093e8b4e47213f2038b1ad4f6ea4a1065840cd167255c7756fe6a802fd23609c5fe70c28decaf8ec997cff069b5aff9bab0c928752_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"carInformation\\\").innerHTML =\\n    \\\"<img src='\\\" + data.imagePath + \\\"' width='900'/>\\\";\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"carInformation\\\")\", \"end\": {\"col\": 44, \"line\": 16, \"offset\": 470}, \"start\": {\"col\": 3, \"line\": 16, \"offset\": 429}}, \"$HTML\": {\"abstract_content\": \"\\\"<img src='\\\"+data.imagePath+\\\"' width='900'/>\\\"\", \"end\": {\"col\": 54, \"line\": 17, \"offset\": 536}, \"start\": {\"col\": 5, \"line\": 17, \"offset\": 487}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js\", \"start\": {\"col\": 3, \"line\": 16, \"offset\": 429}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 20, \"line\": 16, \"offset\": 585}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"e8823ff4a0b9a10ce6cee70e178fefffb6a4a11e5965628718b867fea90e3502d8ed77e792b8a920ae1d6b65c9daefe0bac33a624ff36a9215ba5cfc20d7e084_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"uploaded_file_info\\\").innerHTML = data.isValid\\n    ? \\\"File uploaded at location:\\\" + data.content\\n    : data.content;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"uploaded_file_info\\\")\", \"end\": {\"col\": 48, \"line\": 14, \"offset\": 490}, \"start\": {\"col\": 3, \"line\": 14, \"offset\": 445}}, \"$HTML\": {\"abstract_content\": \"data.isValid\\\"File uploaded at location:\\\"+data.content data.content\", \"end\": {\"col\": 19, \"line\": 16, \"offset\": 584}, \"start\": {\"col\": 61, \"line\": 14, \"offset\": 503}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js\", \"start\": {\"col\": 3, \"line\": 14, \"offset\": 445}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 53, \"line\": 16, \"offset\": 484}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"e120f1bde64fd24bedb04807140b6acc99741d4eb0e31b7966ad96c9c1d52cf36a8b110af3bd3e721db86fd6da4a8dd930e64423d1e16a00cf621a11b33bb239_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"image\\\").innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"image\\\")\", \"end\": {\"col\": 35, \"line\": 16, \"offset\": 466}, \"start\": {\"col\": 3, \"line\": 16, \"offset\": 434}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 52, \"line\": 16, \"offset\": 483}, \"start\": {\"col\": 48, \"line\": 16, \"offset\": 479}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js\", \"start\": {\"col\": 3, \"line\": 16, \"offset\": 434}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 36, \"line\": 15, \"offset\": 499}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"6c8d47cab3be0c79385ec928b3ce78b6ad6b24cc1244f4cdc80b68e86c02f0f271df7c9d848a08b2f05c9451fd56e252a58bc225a9a5ea1dc208d6a63ebc9562_0\", \"is_ignored\": false, \"lines\": \"  parentContainer.innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"parentContainer\", \"end\": {\"col\": 18, \"line\": 15, \"offset\": 481}, \"propagated_value\": {\"svalue_abstract_content\": \"document.getElementById(\\\"parentContainer\\\")\", \"svalue_end\": {\"col\": 67, \"line\": 14, \"offset\": 462}, \"svalue_start\": {\"col\": 25, \"line\": 14, \"offset\": 420}}, \"start\": {\"col\": 3, \"line\": 15, \"offset\": 466}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 35, \"line\": 15, \"offset\": 498}, \"start\": {\"col\": 31, \"line\": 15, \"offset\": 494}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js\", \"start\": {\"col\": 3, \"line\": 15, \"offset\": 466}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 53, \"line\": 14, \"offset\": 455}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"7ce57ebd246c20b9d2fbb13ff82ec6386439828650f5e8302280a206fe1e81fd8a916073cd2aadff1de50b36e82ba573ec8608d83c15ca878664624654af21a2_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"image\\\").innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"image\\\")\", \"end\": {\"col\": 35, \"line\": 14, \"offset\": 437}, \"start\": {\"col\": 3, \"line\": 14, \"offset\": 405}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 52, \"line\": 14, \"offset\": 454}, \"start\": {\"col\": 48, \"line\": 14, \"offset\": 450}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js\", \"start\": {\"col\": 3, \"line\": 14, \"offset\": 405}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 40, \"line\": 18, \"offset\": 550}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"5cb50b2ec19b0660b454d607d8e2bc874b071fc76575c469c287cfbb4590376e81955d273c9aa26459963b0807ea0857df05523bae3cf76afe39acd03b11072f_0\", \"is_ignored\": false, \"lines\": \"  bookNameElement.innerHTML = bookName;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"bookNameElement\", \"end\": {\"col\": 18, \"line\": 18, \"offset\": 528}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"name\\\")\", \"svalue_end\": {\"col\": 65, \"line\": 17, \"offset\": 509}, \"svalue_start\": {\"col\": 25, \"line\": 17, \"offset\": 469}}, \"start\": {\"col\": 3, \"line\": 18, \"offset\": 513}}, \"$HTML\": {\"abstract_content\": \"bookName\", \"end\": {\"col\": 39, \"line\": 18, \"offset\": 549}, \"start\": {\"col\": 31, \"line\": 18, \"offset\": 541}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 18, \"offset\": 513}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 36, \"line\": 22, \"offset\": 697}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"e3f9474d8a859ff4559edfae7953e1c9accc1f995a1254a8a218e3c89d70ea20afe6c5a318122f35bfd71ebeefa766e7f74f7d56fd7c8d8dcc4020d3f3efd31d_0\", \"is_ignored\": false, \"lines\": \"  authorElement.innerHTML = author;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"authorElement\", \"end\": {\"col\": 16, \"line\": 22, \"offset\": 677}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"author\\\")\", \"svalue_end\": {\"col\": 65, \"line\": 21, \"offset\": 660}, \"svalue_start\": {\"col\": 23, \"line\": 21, \"offset\": 618}}, \"start\": {\"col\": 3, \"line\": 22, \"offset\": 664}}, \"$HTML\": {\"abstract_content\": \"author\", \"end\": {\"col\": 35, \"line\": 22, \"offset\": 696}, \"start\": {\"col\": 29, \"line\": 22, \"offset\": 690}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 22, \"offset\": 664}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 32, \"line\": 26, \"offset\": 834}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"ebc16eeb9b20f914470de7c5889a88679de3c9771814384e9e4327f4568c96bf4f975cb7a1474f49552900162c8b3a54d4b6b1c78a2af0965796b0950b9b516e_0\", \"is_ignored\": false, \"lines\": \"  isbnElement.innerHTML = isbn;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"isbnElement\", \"end\": {\"col\": 14, \"line\": 26, \"offset\": 816}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"isbn\\\")\", \"svalue_end\": {\"col\": 61, \"line\": 25, \"offset\": 801}, \"svalue_start\": {\"col\": 21, \"line\": 25, \"offset\": 761}}, \"start\": {\"col\": 3, \"line\": 26, \"offset\": 805}}, \"$HTML\": {\"abstract_content\": \"isbn\", \"end\": {\"col\": 31, \"line\": 26, \"offset\": 833}, \"start\": {\"col\": 27, \"line\": 26, \"offset\": 829}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 26, \"offset\": 805}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 42, \"line\": 30, \"offset\": 989}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"3f80e3df9d29aac867699a7f408742ed6f4625611a5c5b0b0d8c75291bcebb2babd7a9a2e553f692d5a45ed127351fa9cceef864efb52bcbc2d0af127cb71f22_0\", \"is_ignored\": false, \"lines\": \"  publisherElement.innerHTML = publisher;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"publisherElement\", \"end\": {\"col\": 19, \"line\": 30, \"offset\": 966}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"publisher\\\")\", \"svalue_end\": {\"col\": 71, \"line\": 29, \"offset\": 946}, \"svalue_start\": {\"col\": 26, \"line\": 29, \"offset\": 901}}, \"start\": {\"col\": 3, \"line\": 30, \"offset\": 950}}, \"$HTML\": {\"abstract_content\": \"publisher\", \"end\": {\"col\": 41, \"line\": 30, \"offset\": 988}, \"start\": {\"col\": 32, \"line\": 30, \"offset\": 979}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 30, \"offset\": 950}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 42, \"line\": 34, \"offset\": 1142}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"1c06a2b567a5064aa8b76c8eeb9cefe55ec930cb36fd04c026b83012cc5a87c13835c412ca52a320573f6b1d7e90e0987ddc19c367a0f06831392e89ddf7bb7f_0\", \"is_ignored\": false, \"lines\": \"  otherElement.innerHTML = otherComments;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"otherElement\", \"end\": {\"col\": 15, \"line\": 34, \"offset\": 1115}, \"propagated_value\": {\"svalue_abstract_content\": \"xmlRequestDocument.createElement(\\\"others\\\")\", \"svalue_end\": {\"col\": 64, \"line\": 33, \"offset\": 1099}, \"svalue_start\": {\"col\": 22, \"line\": 33, \"offset\": 1057}}, \"start\": {\"col\": 3, \"line\": 34, \"offset\": 1103}}, \"$HTML\": {\"abstract_content\": \"otherComments\", \"end\": {\"col\": 41, \"line\": 34, \"offset\": 1141}, \"start\": {\"col\": 28, \"line\": 34, \"offset\": 1128}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 34, \"offset\": 1103}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 63, \"line\": 78, \"offset\": 2393}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"43232b43885df337c3f95a19694192d48623c3a094dec04a58b292250b8c4b35f64852dd479438efe1a181576508c3dea49d49e71d50c0e5deb002be1eb0a8d6_0\", \"is_ignored\": false, \"lines\": \"  document.getElementById(\\\"bookInformation\\\").innerHTML = data;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"bookInformation\\\")\", \"end\": {\"col\": 45, \"line\": 78, \"offset\": 2375}, \"start\": {\"col\": 3, \"line\": 78, \"offset\": 2333}}, \"$HTML\": {\"abstract_content\": \"data\", \"end\": {\"col\": 62, \"line\": 78, \"offset\": 2392}, \"start\": {\"col\": 58, \"line\": 78, \"offset\": 2388}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js\", \"start\": {\"col\": 3, \"line\": 78, \"offset\": 2333}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 52, \"line\": 58, \"offset\": 1990}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"386f691e5ae145fe641a800b6481b11408654da135b63c0853e75f6b3e3f49828ee3fd3d8af497c9e9441f3a3c08a9c668967fa7031fa5f30c3e7cc8c2e2cc4a_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"vulnerabilityDescription\\\").innerHTML =\\n      vulnerableAppEndPointData[id][\\\"Description\\\"];\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"vulnerabilityDescription\\\")\", \"end\": {\"col\": 56, \"line\": 57, \"offset\": 1926}, \"start\": {\"col\": 5, \"line\": 57, \"offset\": 1875}}, \"$HTML\": {\"abstract_content\": \"vulnerableAppEndPointData[id][\\\"Description\\\"]\", \"end\": {\"col\": 51, \"line\": 58, \"offset\": 1989}, \"start\": {\"col\": 7, \"line\": 58, \"offset\": 1945}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 5, \"line\": 57, \"offset\": 1875}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 44, \"line\": 72, \"offset\": 2640}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"513e2df88c08d76621160ec98c0370d152f61e3cc49d61720af407016a3669c654fabee6040e130fda3c649b9ee4d990430473bb10948e5d4afb0d35ef736354_0\", \"is_ignored\": false, \"lines\": \"      detailTitle.innerHTML = responseText;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"detailTitle\", \"end\": {\"col\": 18, \"line\": 72, \"offset\": 2614}, \"start\": {\"col\": 7, \"line\": 72, \"offset\": 2603}}, \"$HTML\": {\"abstract_content\": \"responseText\", \"end\": {\"col\": 43, \"line\": 72, \"offset\": 2639}, \"start\": {\"col\": 31, \"line\": 72, \"offset\": 2627}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 7, \"line\": 72, \"offset\": 2603}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 79, \"line\": 108, \"offset\": 3753}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"fcffed7e036b8561bce1c9ec1852f3ca02f53c69e332438c9741ce9f06d86ccec84d7c6476c406e70af4217157fab497c11f645454604d47ba8dbce287f398ba_0\", \"is_ignored\": false, \"lines\": \"  span.innerHTML = isSecure ? variantTooltip.secure : variantTooltip.unsecure;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"span\", \"end\": {\"col\": 7, \"line\": 108, \"offset\": 3681}, \"start\": {\"col\": 3, \"line\": 108, \"offset\": 3677}}, \"$HTML\": {\"abstract_content\": \"isSecure variantTooltip.secure variantTooltip.unsecure\", \"end\": {\"col\": 78, \"line\": 108, \"offset\": 3752}, \"start\": {\"col\": 20, \"line\": 108, \"offset\": 3694}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 3, \"line\": 108, \"offset\": 3677}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 74, \"line\": 163, \"offset\": 5341}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"4458aa98cde7481ef24b6189c40b98743f70d45069b2c2025f43a1249037ea3c6096c4c25ee549046b78d5be533cf77ef21c48df36cd1431d956f9e3fffa7b86_0\", \"is_ignored\": false, \"lines\": \"    detailTitle.innerHTML = vulnerableAppEndPointData[id][\\\"Description\\\"];\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"detailTitle\", \"end\": {\"col\": 16, \"line\": 163, \"offset\": 5283}, \"start\": {\"col\": 5, \"line\": 163, \"offset\": 5272}}, \"$HTML\": {\"abstract_content\": \"vulnerableAppEndPointData[id][\\\"Description\\\"]\", \"end\": {\"col\": 73, \"line\": 163, \"offset\": 5340}, \"start\": {\"col\": 29, \"line\": 163, \"offset\": 5296}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 5, \"line\": 163, \"offset\": 5272}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 72, \"line\": 169, \"offset\": 5526}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"4458aa98cde7481ef24b6189c40b98743f70d45069b2c2025f43a1249037ea3c6096c4c25ee549046b78d5be533cf77ef21c48df36cd1431d956f9e3fffa7b86_1\", \"is_ignored\": false, \"lines\": \"  detailTitle.innerHTML = vulnerableAppEndPointData[id][\\\"Description\\\"];\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"detailTitle\", \"end\": {\"col\": 14, \"line\": 169, \"offset\": 5468}, \"start\": {\"col\": 3, \"line\": 169, \"offset\": 5457}}, \"$HTML\": {\"abstract_content\": \"vulnerableAppEndPointData[id][\\\"Description\\\"]\", \"end\": {\"col\": 71, \"line\": 169, \"offset\": 5525}, \"start\": {\"col\": 27, \"line\": 169, \"offset\": 5481}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 3, \"line\": 169, \"offset\": 5457}}, {\"check_id\": \"javascript.browser.security.insecure-document-method.insecure-document-method\", \"end\": {\"col\": 62, \"line\": 308, \"offset\": 9891}, \"extra\": {\"engine_kind\": \"OSS\", \"fingerprint\": \"12cbb93df3339a028803e1e63167a59486459f97ce38bd67127c81c6b407d16920627f7dfad654f9ad4ad5af215bb3b7651318491026d49756a8fff4c8324c6a_0\", \"is_ignored\": false, \"lines\": \"    document.getElementById(\\\"helpText\\\").innerHTML = helpText;\", \"message\": \"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities\", \"metadata\": {\"category\": \"security\", \"confidence\": \"LOW\", \"cwe\": [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], \"cwe2021-top25\": true, \"cwe2022-top25\": true, \"impact\": \"LOW\", \"license\": \"Commons Clause License Condition v1.0[LGPL-2.1-only]\", \"likelihood\": \"LOW\", \"owasp\": [\"A07:2017 - Cross-Site Scripting (XSS)\", \"A03:2021 - Injection\"], \"references\": [\"https://owasp.org/Top10/A03_2021-Injection\"], \"semgrep.dev\": {\"rule\": {\"origin\": \"community\", \"rule_id\": \"ReUg41\", \"url\": \"https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method\", \"version_id\": \"O9TNO1x\"}}, \"shortlink\": \"https://sg.run/LwA9\", \"source\": \"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method\", \"subcategory\": [\"audit\"], \"technology\": [\"browser\"], \"vulnerability_class\": [\"Cross-Site-Scripting (XSS)\"]}, \"metavars\": {\"$EL\": {\"abstract_content\": \"document.getElementById(\\\"helpText\\\")\", \"end\": {\"col\": 40, \"line\": 308, \"offset\": 9869}, \"start\": {\"col\": 5, \"line\": 308, \"offset\": 9834}}, \"$HTML\": {\"abstract_content\": \"helpText\", \"end\": {\"col\": 61, \"line\": 308, \"offset\": 9890}, \"propagated_value\": {\"svalue_abstract_content\": \"helpText+\\\"</ol>\\\"\", \"svalue_end\": {\"col\": 34, \"line\": 307, \"offset\": 9828}, \"svalue_start\": {\"col\": 16, \"line\": 307, \"offset\": 9810}}, \"start\": {\"col\": 53, \"line\": 308, \"offset\": 9882}}}, \"severity\": \"ERROR\", \"validation_state\": \"NO_VALIDATOR\"}, \"path\": \"src/main/resources/static/vulnerableApp.js\", \"start\": {\"col\": 5, \"line\": 308, \"offset\": 9834}}], \"skipped_rules\": [], \"version\": \"1.51.0\"}", "message": "JWT token detected", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-321: Use of Hard-coded Cryptographic Key"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "kxU8E8", "url": "https://semgrep.dev/playground/r/o5Tgljp/generic.secrets.security.detected-jwt-token.detected-jwt-token", "version_id": "o5Tgljp"}}, "shortlink": "https://sg.run/05N5", "source": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token", "source-rule-url": "https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py", "subcategory": ["audit"], "technology": ["secrets", "jwt"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "semgrep.json", "start": {"col": 157133, "line": 1, "offset": 157132}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 20, "line": 42, "offset": 1618}, "extra": {"engine_kind": "OSS", "fingerprint": "db0e9841b1183fb8764d633715cd7b2ca8e52cc980abede0f8bbe2eddf93c45bcdf3ead825f19e1c79d01c21d351c831a561820d8dce4b453e7e96893aba4157_0", "is_ignored": false, "lines": "    @RequestMapping(\"/allEndPoint\")", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "l4T4vEd"}}, "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "allEndPoints", "end": {"col": 31, "line": 43, "offset": 1665}, "start": {"col": 19, "line": 43, "offset": 1653}}, "$RETURNTYPE": {"abstract_content": "String", "end": {"col": 18, "line": 43, "offset": 1652}, "start": {"col": 12, "line": 43, "offset": 1646}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java", "start": {"col": 6, "line": 42, "offset": 1604}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 20, "line": 57, "offset": 2109}, "extra": {"engine_kind": "OSS", "fingerprint": "8b80541eb876c22a01e966f487fd6ec7f2573a04ac1b6c65465c14601a8796a0be60158d599fbfbfa4ac764e53f8630deb25789694001d1c83df3496ed582768_0", "is_ignored": false, "lines": "    @RequestMapping(\"/VulnerabilityDefinitions\")", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "l4T4vEd"}}, "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "getVulnerabilityDefinitions", "end": {"col": 69, "line": 58, "offset": 2207}, "start": {"col": 42, "line": 58, "offset": 2180}}, "$RETURNTYPE": {"abstract_content": "List<VulnerabilityDefinition>", "end": {"col": 41, "line": 58, "offset": 2179}, "start": {"col": 12, "line": 58, "offset": 2150}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java", "start": {"col": 6, "line": 57, "offset": 2095}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 20, "line": 75, "offset": 2887}, "extra": {"engine_kind": "OSS", "fingerprint": "4d79c9d97d33e0489d181aec3b23a5772a8877f834f7a0285a6806a5022b808c9d3a7a6f79a70a7b77824ef1663c4769095cfc5c4dbfd466a4a3b2e3c775d669_0", "is_ignored": false, "lines": "    @RequestMapping(\"/allEndPointJson\")", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "l4T4vEd"}}, "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "allEndPointsJsonResponse", "end": {"col": 67, "line": 76, "offset": 2974}, "start": {"col": 43, "line": 76, "offset": 2950}}, "$RETURNTYPE": {"abstract_content": "List<AllEndPointsResponseBean>", "end": {"col": 42, "line": 76, "offset": 2949}, "start": {"col": 12, "line": 76, "offset": 2919}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java", "start": {"col": 6, "line": 75, "offset": 2873}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 20, "line": 90, "offset": 3399}, "extra": {"engine_kind": "OSS", "fingerprint": "f5c98169269200088cf322e0a264130c13d768aad55c39ead71e6f4b69729a5d3ade3487645d18cc70efc0c8cd62fa4d327f1971896cb8ac3a67975a2eb1ab31_0", "is_ignored": false, "lines": "    @RequestMapping(\"/scanner\")", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "l4T4vEd"}}, "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "getScannerRelatedInformation", "end": {"col": 66, "line": 91, "offset": 3477}, "start": {"col": 38, "line": 91, "offset": 3449}}, "$RETURNTYPE": {"abstract_content": "List<ScannerResponseBean>", "end": {"col": 37, "line": 91, "offset": 3448}, "start": {"col": 12, "line": 91, "offset": 3423}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java", "start": {"col": 6, "line": 90, "offset": 3385}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 20, "line": 105, "offset": 3974}, "extra": {"engine_kind": "OSS", "fingerprint": "985ffaac5f5de025cd03a2cb65ad8a1dd409ce99caf6cf890572bd6ceb345553ca71a763ab19e6fa993199d5732b38a671736b1b35ae8e62e38070799e01852c_0", "is_ignored": false, "lines": "    @RequestMapping(\"/scanner/metadata\")", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "l4T4vEd"}}, "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "getScannerRelatedMetaInformation", "end": {"col": 68, "line": 106, "offset": 4063}, "start": {"col": 36, "line": 106, "offset": 4031}}, "$RETURNTYPE": {"abstract_content": "ScannerMetaResponseBean ScannerMetaResponseBean ScannerMetaResponseBean ScannerMetaResponseBean", "end": {"col": 35, "line": 106, "offset": 4030}, "start": {"col": 12, "line": 106, "offset": 4007}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java", "start": {"col": 6, "line": 105, "offset": 3960}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 20, "line": 121, "offset": 4647}, "extra": {"engine_kind": "OSS", "fingerprint": "25a667c319d112d86e31f76653b2849dbf43b124cb4ad042892484949104c96fb9a5b01e5155977eedf275f51f73fc85ff950e4e8a825d7c25cd324c720b1391_0", "is_ignored": false, "lines": "    @RequestMapping(\"/sitemap.xml\")", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "l4T4vEd"}}, "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "sitemapForPassiveScanners", "end": {"col": 44, "line": 122, "offset": 4707}, "start": {"col": 19, "line": 122, "offset": 4682}}, "$RETURNTYPE": {"abstract_content": "String", "end": {"col": 18, "line": 122, "offset": 4681}, "start": {"col": 12, "line": 122, "offset": 4675}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java", "start": {"col": 6, "line": 121, "offset": 4633}}, {"check_id": "java.lang.security.audit.command-injection-process-builder.command-injection-process-builder", "end": {"col": 97, "line": 50, "offset": 2383}, "extra": {"engine_kind": "OSS", "fingerprint": "66b15e3164096e997267bc1db5a79ed98b6cd129242da59f41eaca998130a656b117a12d2244b90fef21ebf951e37b615fa432e06d088a8b3a52fa7278f61fff_0", "is_ignored": false, "lines": "                        new ProcessBuilder(new String[] {\"cmd\", \"/c\", \"ping -n 2 \" + ipAddress})", "message": "A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "4bUzzo", "url": "https://semgrep.dev/playground/r/YDTp2B7/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder", "version_id": "YDTp2B7"}}, "shortlink": "https://sg.run/gJJe", "source": "https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder", "subcategory": ["audit"], "technology": ["java"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$ARG": {"abstract_content": "\"ping -n 2 \"+ipAddress", "end": {"col": 95, "line": 50, "offset": 2381}, "start": {"col": 71, "line": 50, "offset": 2357}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/commandInjection/CommandInjection.java", "start": {"col": 25, "line": 50, "offset": 2311}}, {"check_id": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "end": {"col": 20, "line": 33, "offset": 1344}, "extra": {"engine_kind": "OSS", "fingerprint": "d9218cae413101ae89df6202faeb17dd2c9ea14a19e4775f84838a20ab18a0bc67f040f758c32220cb206bd3e2516860a2ad2cc8c4740958c6eaa989bf5654de_0", "is_ignored": false, "lines": "    @RequestMapping(", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "wdUJ7q", "url": "https://semgrep.dev/playground/r/l4T4vEd/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "version_id": "l4T4vEd"}}, "shortlink": "https://sg.run/2xlq", "source": "https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping", "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "subcategory": ["audit"], "technology": ["spring"], "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]}, "metavars": {"$METHOD": {"abstract_content": "fetchFile", "end": {"col": 44, "line": 35, "offset": 1485}, "start": {"col": 35, "line": 35, "offset": 1476}}, "$RETURNTYPE": {"abstract_content": "ResponseEntity<byte[]>", "end": {"col": 34, "line": 35, "offset": 1475}, "start": {"col": 12, "line": 35, "offset": 1453}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java", "start": {"col": 6, "line": 33, "offset": 1330}}, {"check_id": "java.spring.security.injection.tainted-file-path.tainted-file-path", "end": {"col": 44, "line": 41, "offset": 1819}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "fileName", "location": {"end": {"col": 86, "line": 35, "offset": 1527}, "path": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java", "start": {"col": 78, "line": 35, "offset": 1519}}}], "taint_sink": ["CliLoc", [{"end": {"col": 44, "line": 41, "offset": 1819}, "path": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java", "start": {"col": 17, "line": 38, "offset": 1612}}, "new FileInputStream(\n                        unrestrictedFileUpload.getContentDispositionRoot().toFile()\n                                + FrameworkConstants.SLASH\n                                + fileName)"]], "taint_source": ["CliLoc", [{"end": {"col": 86, "line": 35, "offset": 1527}, "path": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java", "start": {"col": 78, "line": 35, "offset": 1519}}, "fileName"]]}, "engine_kind": "OSS", "fingerprint": "8ed5edd577e74ccd84366e6155e64a1996e45c93b509cbb091c42247add8d04d4e237e5132f3dbbd243622824f23eea4e78499ed925c6448b709f5f5c30506f9_0", "is_ignored": false, "lines": "                new FileInputStream(\n                        unrestrictedFileUpload.getContentDispositionRoot().toFile()\n                                + FrameworkConstants.SLASH\n                                + fileName);", "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-23: Relative Path Traversal"], "impact": "HIGH", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/www-community/attacks/Path_Traversal"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "lBUxok", "url": "https://semgrep.dev/playground/r/DkT6nEd/java.spring.security.injection.tainted-file-path.tainted-file-path", "version_id": "DkT6nEd"}}, "shortlink": "https://sg.run/x9o0", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Path Traversal"]}, "metavars": {"$1": {"abstract_content": "PathVariable", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "fetchFile", "end": {"col": 44, "line": 35, "offset": 1485}, "start": {"col": 35, "line": 35, "offset": 1476}}, "$REQ": {"abstract_content": "PathVariable PathVariable PathVariable PathVariable PathVariable PathVariable", "end": {"col": 58, "line": 35, "offset": 1499}, "start": {"col": 46, "line": 35, "offset": 1487}}, "$SOURCE": {"abstract_content": "fileName", "end": {"col": 86, "line": 35, "offset": 1527}, "start": {"col": 78, "line": 35, "offset": 1519}}, "$TYPE": {"abstract_content": "String", "end": {"col": 77, "line": 35, "offset": 1518}, "start": {"col": 71, "line": 35, "offset": 1512}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java", "start": {"col": 17, "line": 38, "offset": 1612}}, {"check_id": "java.spring.security.injection.tainted-url-host.tainted-url-host", "end": {"col": 53, "line": 39, "offset": 1679}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 34, "offset": 1444}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 47, "line": 34, "offset": 1433}}}, {"content": "queryParameterURL", "location": {"end": {"col": 33, "line": 36, "offset": 1533}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 16, "line": 36, "offset": 1516}}}], "taint_sink": ["CliLoc", [{"end": {"col": 53, "line": 39, "offset": 1679}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 27, "line": 39, "offset": 1653}}, "new URL(queryParameterURL)"]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 34, "offset": 1444}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 47, "line": 34, "offset": 1433}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "924dbbb13be25f803a3594c26b4d354125e50239d376622a21b03baa04a285f93b43efc3c76d5e3f4c067865f36207ff3e12ad2d0b541deefe99ded0e5282c72_0", "is_ignored": false, "lines": "                URL url = new URL(queryParameterURL);", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "oqUZo8", "url": "https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host", "version_id": "qkT2xDj"}}, "shortlink": "https://sg.run/vkYn", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevelUnsecure", "end": {"col": 68, "line": 33, "offset": 1385}, "start": {"col": 35, "line": 33, "offset": 1352}}, "$ONEARG": {"abstract_content": "queryParameterURL", "end": {"col": 52, "line": 39, "offset": 1678}, "propagated_value": {"svalue_abstract_content": "queryParams.get(URL_PARAM_KEY)", "svalue_end": {"col": 66, "line": 36, "offset": 1566}, "svalue_start": {"col": 36, "line": 36, "offset": 1536}}, "start": {"col": 35, "line": 39, "offset": 1661}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 34, "offset": 1412}, "start": {"col": 14, "line": 34, "offset": 1400}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 34, "offset": 1444}, "start": {"col": 47, "line": 34, "offset": 1433}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 34, "offset": 1432}, "start": {"col": 27, "line": 34, "offset": 1413}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 27, "line": 39, "offset": 1653}}, {"check_id": "java.spring.security.injection.tainted-url-host.tainted-url-host", "end": {"col": 53, "line": 59, "offset": 2628}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 54, "offset": 2342}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 47, "line": 54, "offset": 2331}}}, {"content": "queryParameterURL", "location": {"end": {"col": 33, "line": 56, "offset": 2431}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 16, "line": 56, "offset": 2414}}}], "taint_sink": ["CliLoc", [{"end": {"col": 53, "line": 59, "offset": 2628}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 27, "line": 59, "offset": 2602}}, "new URL(queryParameterURL)"]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 54, "offset": 2342}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 47, "line": 54, "offset": 2331}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "3c826404f24c32fe1169f21bbcdf89a30dada46f43b833317edaffc9089c97be732c1e8e7159314c23a5368044008bae842815e6f0d3a6ae9e15562aad54aaee_0", "is_ignored": false, "lines": "                URL url = new URL(queryParameterURL);", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "oqUZo8", "url": "https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host", "version_id": "qkT2xDj"}}, "shortlink": "https://sg.run/vkYn", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevelUnsecureLevel2", "end": {"col": 74, "line": 53, "offset": 2283}, "start": {"col": 35, "line": 53, "offset": 2244}}, "$ONEARG": {"abstract_content": "queryParameterURL", "end": {"col": 52, "line": 59, "offset": 2627}, "propagated_value": {"svalue_abstract_content": "queryParams.get(URL_PARAM_KEY)", "svalue_end": {"col": 66, "line": 56, "offset": 2464}, "svalue_start": {"col": 36, "line": 56, "offset": 2434}}, "start": {"col": 35, "line": 59, "offset": 2610}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 54, "offset": 2310}, "start": {"col": 14, "line": 54, "offset": 2298}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 54, "offset": 2342}, "start": {"col": 47, "line": 54, "offset": 2331}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 54, "offset": 2330}, "start": {"col": 27, "line": 54, "offset": 2311}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java", "start": {"col": 27, "line": 59, "offset": 2602}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 52, "line": 53, "offset": 2577}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 49, "offset": 2353}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 47, "line": 49, "offset": 2342}}}, {"content": "id", "location": {"end": {"col": 18, "line": 50, "offset": 2374}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 16, "line": 50, "offset": 2372}}}], "taint_sink": ["CliLoc", [{"end": {"col": 52, "line": 53, "offset": 2577}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 17, "line": 53, "offset": 2542}}, "\"select * from cars where id=\" + id"]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 49, "offset": 2353}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 47, "line": 49, "offset": 2342}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "806cfd929b5dae6dd398a2348ed8d9781ea670269a3ad39e11e54df32d7670ab5ddbfd0f88922181ca0308f17921e5ce0d8ec29d4778839877350585a3f3a378_0", "is_ignored": false, "lines": "                \"select * from cars where id=\" + id,", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "0bTLlny"}}, "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "select", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getCarInformationLevel1", "end": {"col": 58, "line": 48, "offset": 2294}, "start": {"col": 35, "line": 48, "offset": 2271}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 49, "offset": 2321}, "start": {"col": 14, "line": 49, "offset": 2309}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 49, "offset": 2353}, "start": {"col": 47, "line": 49, "offset": 2342}}, "$SQLSTR": {"abstract_content": "select * from cars where id=", "end": {"col": 46, "line": 53, "offset": 2571}, "start": {"col": 18, "line": 53, "offset": 2543}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 49, "offset": 2341}, "start": {"col": 27, "line": 49, "offset": 2322}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 17, "line": 53, "offset": 2542}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 59, "line": 77, "offset": 3755}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 72, "offset": 3433}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 47, "line": 72, "offset": 3422}}}, {"content": "id", "location": {"end": {"col": 18, "line": 73, "offset": 3454}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 16, "line": 73, "offset": 3452}}}], "taint_sink": ["CliLoc", [{"end": {"col": 59, "line": 77, "offset": 3755}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 17, "line": 77, "offset": 3713}}, "\"select * from cars where id='\" + id + \"'\""]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 72, "offset": 3433}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 47, "line": 72, "offset": 3422}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "85401b8e6803f0c014696d60069343d62793bec4132cd3fef227234b6cfb4db5e6dc13fc38ad796df20696e14d1412e41a0a25705888cd39c9a8c5f3c073fe1c_0", "is_ignored": false, "lines": "                \"select * from cars where id='\" + id + \"'\",", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "0bTLlny"}}, "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "select", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getCarInformationLevel2", "end": {"col": 58, "line": 71, "offset": 3374}, "start": {"col": 35, "line": 71, "offset": 3351}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 72, "offset": 3401}, "start": {"col": 14, "line": 72, "offset": 3389}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 72, "offset": 3433}, "start": {"col": 47, "line": 72, "offset": 3422}}, "$SQLSTR": {"abstract_content": "select * from cars where id='", "end": {"col": 47, "line": 77, "offset": 3743}, "start": {"col": 18, "line": 77, "offset": 3714}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 72, "offset": 3421}, "start": {"col": 27, "line": 72, "offset": 3402}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java", "start": {"col": 17, "line": 77, "offset": 3713}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 64, "line": 65, "offset": 3157}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 59, "offset": 2856}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 47, "line": 59, "offset": 2845}}}, {"content": "id", "location": {"end": {"col": 18, "line": 60, "offset": 2877}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 16, "line": 60, "offset": 2875}}}], "taint_sink": ["CliLoc", [{"end": {"col": 64, "line": 65, "offset": 3157}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 29, "line": 65, "offset": 3122}}, "\"select * from cars where id=\" + id"]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 59, "offset": 2856}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 47, "line": 59, "offset": 2845}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "8aeba9eecaf16daf777a25ef297ae980bb86383473a895d20af843e0e8590ea79f72b6f1c3a21904bddb76dff965b9d96aaa0efdebd2cb16d6e833869c49bf4f_0", "is_ignored": false, "lines": "                            \"select * from cars where id=\" + id,", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "0bTLlny"}}, "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "select", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "doesCarInformationExistsLevel1", "end": {"col": 65, "line": 58, "offset": 2797}, "start": {"col": 35, "line": 58, "offset": 2767}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 59, "offset": 2824}, "start": {"col": 14, "line": 59, "offset": 2812}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 59, "offset": 2856}, "start": {"col": 47, "line": 59, "offset": 2845}}, "$SQLSTR": {"abstract_content": "select * from cars where id=", "end": {"col": 58, "line": 65, "offset": 3151}, "start": {"col": 30, "line": 65, "offset": 3123}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 59, "offset": 2844}, "start": {"col": 27, "line": 59, "offset": 2825}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 29, "line": 65, "offset": 3122}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 71, "line": 110, "offset": 5691}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 104, "offset": 5383}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 47, "line": 104, "offset": 5372}}}, {"content": "id", "location": {"end": {"col": 18, "line": 105, "offset": 5404}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 16, "line": 105, "offset": 5402}}}], "taint_sink": ["CliLoc", [{"end": {"col": 71, "line": 110, "offset": 5691}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 29, "line": 110, "offset": 5649}}, "\"select * from cars where id='\" + id + \"'\""]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 104, "offset": 5383}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 47, "line": 104, "offset": 5372}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "70219803503a17ba21ff8264bbf548c7ef3c4980ab273833814e072b25b545834048c66b3e6783513533dd84b21a167aa6b08b45040013c0dbbc52be6d0e6508_0", "is_ignored": false, "lines": "                            \"select * from cars where id='\" + id + \"'\",", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "0bTLlny"}}, "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "select", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "doesCarInformationExistsLevel2", "end": {"col": 65, "line": 103, "offset": 5324}, "start": {"col": 35, "line": 103, "offset": 5294}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 104, "offset": 5351}, "start": {"col": 14, "line": 104, "offset": 5339}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 104, "offset": 5383}, "start": {"col": 47, "line": 104, "offset": 5372}}, "$SQLSTR": {"abstract_content": "select * from cars where id='", "end": {"col": 59, "line": 110, "offset": 5679}, "start": {"col": 30, "line": 110, "offset": 5650}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 104, "offset": 5371}, "start": {"col": 27, "line": 104, "offset": 5352}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 29, "line": 110, "offset": 5649}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 71, "line": 158, "offset": 8507}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 150, "offset": 8071}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 47, "line": 150, "offset": 8060}}}, {"content": "id", "location": {"end": {"col": 18, "line": 151, "offset": 8092}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 16, "line": 151, "offset": 8090}}}], "taint_sink": ["CliLoc", [{"end": {"col": 71, "line": 158, "offset": 8507}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 29, "line": 158, "offset": 8465}}, "\"select * from cars where id='\" + id + \"'\""]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 150, "offset": 8071}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 47, "line": 150, "offset": 8060}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "bb10c71ea3a4be145d3774c86570c9f5267de6d2985f2a1a3ea6ec48e3e23656933571d45179f282c6ccba4e67ff465fffafcacfc1ff332b62d7203f37af0e23_0", "is_ignored": false, "lines": "                            \"select * from cars where id='\" + id + \"'\",", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "0bTLlny"}}, "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "select", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "doesCarInformationExistsLevel3", "end": {"col": 65, "line": 149, "offset": 8012}, "start": {"col": 35, "line": 149, "offset": 7982}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 150, "offset": 8039}, "start": {"col": 14, "line": 150, "offset": 8027}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 150, "offset": 8071}, "start": {"col": 47, "line": 150, "offset": 8060}}, "$SQLSTR": {"abstract_content": "select * from cars where id='", "end": {"col": 59, "line": 158, "offset": 8495}, "start": {"col": 30, "line": 158, "offset": 8466}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 150, "offset": 8059}, "start": {"col": 27, "line": 150, "offset": 8040}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 29, "line": 158, "offset": 8465}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 87, "line": 209, "offset": 11379}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 200, "offset": 10841}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 47, "line": 200, "offset": 10830}}}, {"content": "id", "location": {"end": {"col": 24, "line": 201, "offset": 10868}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 22, "line": 201, "offset": 10866}}}], "taint_sink": ["CliLoc", [{"end": {"col": 87, "line": 209, "offset": 11379}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 45, "line": 209, "offset": 11337}}, "\"select * from cars where id='\" + id + \"'\""]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 200, "offset": 10841}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 47, "line": 200, "offset": 10830}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "73aa27e6fb50b5dc93ee75916c81602f6ec4d96d037212424395b4cf9e5dc5b54e941879519dfe6177e73de4b91921dcf4b8113023ed7503187f5aa30dc2c227_0", "is_ignored": false, "lines": "                                            \"select * from cars where id='\" + id + \"'\"),", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "0bTLlny"}}, "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "select", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "doesCarInformationExistsLevel4", "end": {"col": 65, "line": 199, "offset": 10782}, "start": {"col": 35, "line": 199, "offset": 10752}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 200, "offset": 10809}, "start": {"col": 14, "line": 200, "offset": 10797}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 200, "offset": 10841}, "start": {"col": 47, "line": 200, "offset": 10830}}, "$SQLSTR": {"abstract_content": "select * from cars where id='", "end": {"col": 75, "line": 209, "offset": 11367}, "start": {"col": 46, "line": 209, "offset": 11338}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 200, "offset": 10829}, "start": {"col": 27, "line": 200, "offset": 10810}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java", "start": {"col": 45, "line": 209, "offset": 11337}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 52, "line": 48, "offset": 2225}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 64, "line": 45, "offset": 2075}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 53, "line": 45, "offset": 2064}}}, {"content": "id", "location": {"end": {"col": 24, "line": 46, "offset": 2102}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 22, "line": 46, "offset": 2100}}}], "taint_sink": ["CliLoc", [{"end": {"col": 52, "line": 48, "offset": 2225}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 17, "line": 48, "offset": 2190}}, "\"select * from cars where id=\" + id"]], "taint_source": ["CliLoc", [{"end": {"col": 64, "line": 45, "offset": 2075}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 53, "line": 45, "offset": 2064}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "fea467c7aace1e579c115f3e5f49b32b57c9c4612a1528f74dc8961e713eff7e04719435ec09bc15368538976f0b7fb3808c561a7a4652e0f9718cc34ec5b6bd_0", "is_ignored": false, "lines": "                \"select * from cars where id=\" + id, this::resultSetToResponse);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "0bTLlny"}}, "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "select", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getCarInformationLevel1", "end": {"col": 66, "line": 44, "offset": 2010}, "start": {"col": 43, "line": 44, "offset": 1987}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 45, "offset": 2037}, "start": {"col": 14, "line": 45, "offset": 2025}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 64, "line": 45, "offset": 2075}, "start": {"col": 53, "line": 45, "offset": 2064}}, "$SQLSTR": {"abstract_content": "select * from cars where id=", "end": {"col": 46, "line": 48, "offset": 2219}, "start": {"col": 18, "line": 48, "offset": 2191}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 52, "line": 45, "offset": 2063}, "start": {"col": 33, "line": 45, "offset": 2044}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 17, "line": 48, "offset": 2190}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 59, "line": 63, "offset": 2974}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 64, "line": 60, "offset": 2817}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 53, "line": 60, "offset": 2806}}}, {"content": "id", "location": {"end": {"col": 24, "line": 61, "offset": 2844}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 22, "line": 61, "offset": 2842}}}], "taint_sink": ["CliLoc", [{"end": {"col": 59, "line": 63, "offset": 2974}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 17, "line": 63, "offset": 2932}}, "\"select * from cars where id='\" + id + \"'\""]], "taint_source": ["CliLoc", [{"end": {"col": 64, "line": 60, "offset": 2817}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 53, "line": 60, "offset": 2806}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "063c4e0cb45eb014ed4de48340b8d8cebc4052d2ea82ec61929d347722f40b1e3ae025fa84d59ea18f5c02a1e87ea64efbe58748413dc92eb6898cde016fd20c_0", "is_ignored": false, "lines": "                \"select * from cars where id='\" + id + \"'\", this::resultSetToResponse);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "0bTLlny"}}, "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "select", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getCarInformationLevel2", "end": {"col": 66, "line": 59, "offset": 2752}, "start": {"col": 43, "line": 59, "offset": 2729}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 60, "offset": 2779}, "start": {"col": 14, "line": 60, "offset": 2767}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 64, "line": 60, "offset": 2817}, "start": {"col": 53, "line": 60, "offset": 2806}}, "$SQLSTR": {"abstract_content": "select * from cars where id='", "end": {"col": 47, "line": 63, "offset": 2962}, "start": {"col": 18, "line": 63, "offset": 2933}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 52, "line": 60, "offset": 2805}, "start": {"col": 33, "line": 60, "offset": 2786}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 17, "line": 63, "offset": 2932}}, {"check_id": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 59, "line": 78, "offset": 3727}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 64, "line": 75, "offset": 3550}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 53, "line": 75, "offset": 3539}}}, {"content": "id", "location": {"end": {"col": 24, "line": 76, "offset": 3577}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 22, "line": 76, "offset": 3575}}}], "taint_sink": ["CliLoc", [{"end": {"col": 59, "line": 78, "offset": 3727}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 17, "line": 78, "offset": 3685}}, "\"select * from cars where id='\" + id + \"'\""]], "taint_source": ["CliLoc", [{"end": {"col": 64, "line": 75, "offset": 3550}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 53, "line": 75, "offset": 3539}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "87e936120c0a99aba88cc381809f13fe4efa5145c931b0088e470ff0bee49f6a089b8a2a675711a408ffc244f9fb03a447aec67202b35959517fa46fd91e729f_0", "is_ignored": false, "lines": "                \"select * from cars where id='\" + id + \"'\", this::resultSetToResponse);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "10UdRR", "url": "https://semgrep.dev/playground/r/0bTLlny/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "0bTLlny"}}, "shortlink": "https://sg.run/9rzz", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["spring"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "select", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getCarInformationLevel3", "end": {"col": 66, "line": 74, "offset": 3485}, "start": {"col": 43, "line": 74, "offset": 3462}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 75, "offset": 3512}, "start": {"col": 14, "line": 75, "offset": 3500}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 64, "line": 75, "offset": 3550}, "start": {"col": 53, "line": 75, "offset": 3539}}, "$SQLSTR": {"abstract_content": "select * from cars where id='", "end": {"col": 47, "line": 78, "offset": 3715}, "start": {"col": 18, "line": 78, "offset": 3686}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 52, "line": 75, "offset": 3538}, "start": {"col": 33, "line": 75, "offset": 3519}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java", "start": {"col": 17, "line": 78, "offset": 3685}}, {"check_id": "java.spring.security.injection.tainted-url-host.tainted-url-host", "end": {"col": 33, "line": 64, "offset": 2574}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "url", "location": {"end": {"col": 86, "line": 61, "offset": 2468}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 83, "line": 61, "offset": 2465}}}], "taint_sink": ["CliLoc", [{"end": {"col": 33, "line": 64, "offset": 2574}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 21, "line": 64, "offset": 2562}}, "new URL(url)"]], "taint_source": ["CliLoc", [{"end": {"col": 86, "line": 61, "offset": 2468}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 83, "line": 61, "offset": 2465}}, "url"]]}, "engine_kind": "OSS", "fingerprint": "2b1ac4780ef79bf693ff9798dc8877cbdce6767cb0f340f705d1caa2549bf0765bcd70efb981c92365117df469e6254122c58a7d05c51f6eb5d9281282dab787_0", "is_ignored": false, "lines": "            URL u = new URL(url);", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "oqUZo8", "url": "https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host", "version_id": "qkT2xDj"}}, "shortlink": "https://sg.run/vkYn", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getGenericVulnerabilityResponseWhenURL", "end": {"col": 51, "line": 61, "offset": 2433}, "start": {"col": 13, "line": 61, "offset": 2395}}, "$ONEARG": {"abstract_content": "url", "end": {"col": 32, "line": 64, "offset": 2573}, "start": {"col": 29, "line": 64, "offset": 2570}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 65, "line": 61, "offset": 2447}, "start": {"col": 53, "line": 61, "offset": 2435}}, "$SOURCE": {"abstract_content": "url", "end": {"col": 86, "line": 61, "offset": 2468}, "start": {"col": 83, "line": 61, "offset": 2465}}, "$TYPE": {"abstract_content": "String", "end": {"col": 82, "line": 61, "offset": 2464}, "start": {"col": 76, "line": 61, "offset": 2458}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 21, "line": 64, "offset": 2562}}, {"check_id": "java.spring.security.injection.tainted-url-host.tainted-url-host", "end": {"col": 29, "line": 127, "offset": 5396}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "url", "location": {"end": {"col": 47, "line": 125, "offset": 5280}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 44, "line": 125, "offset": 5277}}}], "taint_sink": ["CliLoc", [{"end": {"col": 29, "line": 127, "offset": 5396}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 17, "line": 127, "offset": 5384}}, "new URL(url)"]], "taint_source": ["CliLoc", [{"end": {"col": 47, "line": 125, "offset": 5280}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 44, "line": 125, "offset": 5277}}, "url"]]}, "engine_kind": "OSS", "fingerprint": "3564117d0407e0f414b8ded443ce8b2c629949c79d4a3018bb2b620cab1834bce9fc800b8d4fd484dd21f2eef53a1e7604470096031e980ad1fc0ebde939ec73_0", "is_ignored": false, "lines": "            if (new URL(url).getHost().equals(\"169.254.169.254\")) {", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "oqUZo8", "url": "https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host", "version_id": "qkT2xDj"}}, "shortlink": "https://sg.run/vkYn", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel3", "end": {"col": 95, "line": 124, "offset": 5232}, "start": {"col": 69, "line": 124, "offset": 5206}}, "$ONEARG": {"abstract_content": "url", "end": {"col": 28, "line": 127, "offset": 5395}, "start": {"col": 25, "line": 127, "offset": 5392}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 125, "offset": 5259}, "start": {"col": 14, "line": 125, "offset": 5247}}, "$SOURCE": {"abstract_content": "url", "end": {"col": 47, "line": 125, "offset": 5280}, "start": {"col": 44, "line": 125, "offset": 5277}}, "$TYPE": {"abstract_content": "String", "end": {"col": 43, "line": 125, "offset": 5276}, "start": {"col": 37, "line": 125, "offset": 5270}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 17, "line": 127, "offset": 5384}}, {"check_id": "java.spring.security.injection.tainted-url-host.tainted-url-host", "end": {"col": 59, "line": 144, "offset": 6258}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "url", "location": {"end": {"col": 47, "line": 142, "offset": 6112}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 44, "line": 142, "offset": 6109}}}], "taint_sink": ["CliLoc", [{"end": {"col": 59, "line": 144, "offset": 6258}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 47, "line": 144, "offset": 6246}}, "new URL(url)"]], "taint_source": ["CliLoc", [{"end": {"col": 47, "line": 142, "offset": 6112}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 44, "line": 142, "offset": 6109}}, "url"]]}, "engine_kind": "OSS", "fingerprint": "992946b2e6ab66db40657c48034240eec0ea6a434b4f575912fe822db91bf7ca590e04c9efaa342b485794efd0187c8f69cfbeb2b4555788f324c30f74587638_0", "is_ignored": false, "lines": "            if (MetaDataServiceMock.isPresent(new URL(url))) {", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "interfile": true, "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "oqUZo8", "url": "https://semgrep.dev/playground/r/qkT2xDj/java.spring.security.injection.tainted-url-host.tainted-url-host", "version_id": "qkT2xDj"}}, "shortlink": "https://sg.run/vkYn", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel4", "end": {"col": 95, "line": 141, "offset": 6064}, "start": {"col": 69, "line": 141, "offset": 6038}}, "$ONEARG": {"abstract_content": "url", "end": {"col": 58, "line": 144, "offset": 6257}, "start": {"col": 55, "line": 144, "offset": 6254}}, "$REQ": {"abstract_content": "RequestParam RequestParam RequestParam RequestParam RequestParam RequestParam", "end": {"col": 26, "line": 142, "offset": 6091}, "start": {"col": 14, "line": 142, "offset": 6079}}, "$SOURCE": {"abstract_content": "url", "end": {"col": 47, "line": 142, "offset": 6112}, "start": {"col": 44, "line": 142, "offset": 6109}}, "$TYPE": {"abstract_content": "String", "end": {"col": 43, "line": 142, "offset": 6108}, "start": {"col": 37, "line": 142, "offset": 6102}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java", "start": {"col": 47, "line": 144, "offset": 6246}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 79, "line": 54, "offset": 2442}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "imageLocation", "location": {"end": {"col": 63, "line": 49, "offset": 2225}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 49, "offset": 2212}}}], "taint_sink": ["CliLoc", [{"end": {"col": 79, "line": 54, "offset": 2442}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 17, "line": 54, "offset": 2380}}, "String.format(vulnerablePayloadWithPlaceHolder, imageLocation)"]], "taint_source": ["CliLoc", [{"end": {"col": 63, "line": 49, "offset": 2225}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 49, "offset": 2212}}, "imageLocation"]]}, "engine_kind": "OSS", "fingerprint": "e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_0", "is_ignored": false, "lines": "                String.format(vulnerablePayloadWithPlaceHolder, imageLocation), HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$HTMLSTR": {"abstract_content": "<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>", "end": {"col": 94, "line": 51, "offset": 2323}, "start": {"col": 52, "line": 51, "offset": 2281}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel1", "end": {"col": 61, "line": 48, "offset": 2161}, "start": {"col": 35, "line": 48, "offset": 2135}}, "$PAYLOAD": {"abstract_content": "String.format(vulnerablePayloadWithPlaceHolder imageLocation)", "end": {"col": 79, "line": 54, "offset": 2442}, "start": {"col": 17, "line": 54, "offset": 2380}}, "$SOURCE": {"abstract_content": "imageLocation", "end": {"col": 63, "line": 49, "offset": 2225}, "start": {"col": 50, "line": 49, "offset": 2212}}, "$TYPE": {"abstract_content": "String", "end": {"col": 49, "line": 49, "offset": 2211}, "start": {"col": 43, "line": 49, "offset": 2205}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 63, "line": 54, "offset": 2426}, "propagated_value": {"svalue_abstract_content": "\"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>\"", "svalue_end": {"col": 95, "line": 51, "offset": 2324}, "svalue_start": {"col": 51, "line": 51, "offset": 2280}}, "start": {"col": 31, "line": 54, "offset": 2394}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 17, "line": 54, "offset": 2380}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 44, "line": 70, "offset": 3196}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "imageLocation", "location": {"end": {"col": 63, "line": 64, "offset": 2957}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 64, "offset": 2944}}}, {"content": "payload", "location": {"end": {"col": 23, "line": 68, "offset": 3085}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 16, "line": 68, "offset": 3078}}}], "taint_sink": ["CliLoc", [{"end": {"col": 44, "line": 70, "offset": 3196}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 37, "line": 70, "offset": 3189}}, "payload"]], "taint_source": ["CliLoc", [{"end": {"col": 63, "line": 64, "offset": 2957}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 64, "offset": 2944}}, "imageLocation"]]}, "engine_kind": "OSS", "fingerprint": "e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_1", "is_ignored": false, "lines": "        return new ResponseEntity<>(payload, HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$HTMLSTR": {"abstract_content": "<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>", "end": {"col": 98, "line": 66, "offset": 3059}, "start": {"col": 52, "line": 66, "offset": 3013}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel2", "end": {"col": 61, "line": 63, "offset": 2893}, "start": {"col": 35, "line": 63, "offset": 2867}}, "$PAYLOAD": {"abstract_content": "payload", "end": {"col": 44, "line": 70, "offset": 3196}, "propagated_value": {"svalue_abstract_content": "String.format(vulnerablePayloadWithPlaceHolder imageLocation)", "svalue_end": {"col": 88, "line": 68, "offset": 3150}, "svalue_start": {"col": 26, "line": 68, "offset": 3088}}, "start": {"col": 37, "line": 70, "offset": 3189}}, "$SOURCE": {"abstract_content": "imageLocation", "end": {"col": 63, "line": 64, "offset": 2957}, "start": {"col": 50, "line": 64, "offset": 2944}}, "$TYPE": {"abstract_content": "String", "end": {"col": 49, "line": 64, "offset": 2943}, "start": {"col": 43, "line": 64, "offset": 2937}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 72, "line": 68, "offset": 3134}, "propagated_value": {"svalue_abstract_content": "\"<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>\"", "svalue_end": {"col": 99, "line": 66, "offset": 3060}, "svalue_start": {"col": 51, "line": 66, "offset": 3012}}, "start": {"col": 40, "line": 68, "offset": 3102}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 37, "line": 70, "offset": 3189}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 44, "line": 89, "offset": 4085}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "imageLocation", "location": {"end": {"col": 63, "line": 80, "offset": 3754}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 80, "offset": 3741}}}, {"content": "payload", "location": {"end": {"col": 23, "line": 84, "offset": 3878}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 16, "line": 84, "offset": 3871}}}], "taint_sink": ["CliLoc", [{"end": {"col": 44, "line": 89, "offset": 4085}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 37, "line": 89, "offset": 4078}}, "payload"]], "taint_source": ["CliLoc", [{"end": {"col": 63, "line": 80, "offset": 3754}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 80, "offset": 3741}}, "imageLocation"]]}, "engine_kind": "OSS", "fingerprint": "e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_2", "is_ignored": false, "lines": "        return new ResponseEntity<>(payload, HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$HTMLSTR": {"abstract_content": "<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>", "end": {"col": 94, "line": 82, "offset": 3852}, "start": {"col": 52, "line": 82, "offset": 3810}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel3", "end": {"col": 61, "line": 79, "offset": 3690}, "start": {"col": 35, "line": 79, "offset": 3664}}, "$PAYLOAD": {"abstract_content": "payload", "end": {"col": 44, "line": 89, "offset": 4085}, "propagated_value": {"svalue_abstract_content": "String.format(vulnerablePayloadWithPlaceHolder StringEscapeUtils.escapeHtml4(imageLocation))", "svalue_end": {"col": 70, "line": 87, "offset": 4039}, "svalue_start": {"col": 17, "line": 85, "offset": 3897}}, "start": {"col": 37, "line": 89, "offset": 4078}}, "$SOURCE": {"abstract_content": "imageLocation", "end": {"col": 63, "line": 80, "offset": 3754}, "start": {"col": 50, "line": 80, "offset": 3741}}, "$TYPE": {"abstract_content": "String", "end": {"col": 49, "line": 80, "offset": 3740}, "start": {"col": 43, "line": 80, "offset": 3734}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 57, "line": 86, "offset": 3968}, "propagated_value": {"svalue_abstract_content": "\"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>\"", "svalue_end": {"col": 95, "line": 82, "offset": 3853}, "svalue_start": {"col": 51, "line": 82, "offset": 3809}}, "start": {"col": 25, "line": 86, "offset": 3936}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 37, "line": 89, "offset": 4078}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 55, "line": 113, "offset": 5251}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "imageLocation", "location": {"end": {"col": 63, "line": 101, "offset": 4754}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 101, "offset": 4741}}}, {"content": "payload", "location": {"end": {"col": 20, "line": 107, "offset": 5004}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 13, "line": 107, "offset": 4997}}}], "taint_sink": ["CliLoc", [{"end": {"col": 55, "line": 113, "offset": 5251}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 37, "line": 113, "offset": 5233}}, "payload.toString()"]], "taint_source": ["CliLoc", [{"end": {"col": 63, "line": 101, "offset": 4754}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 101, "offset": 4741}}, "imageLocation"]]}, "engine_kind": "OSS", "fingerprint": "e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_3", "is_ignored": false, "lines": "        return new ResponseEntity<>(payload.toString(), HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$HTMLSTR": {"abstract_content": "<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>", "end": {"col": 94, "line": 103, "offset": 4852}, "start": {"col": 52, "line": 103, "offset": 4810}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel4", "end": {"col": 61, "line": 100, "offset": 4690}, "start": {"col": 35, "line": 100, "offset": 4664}}, "$PAYLOAD": {"abstract_content": "payload.toString()", "end": {"col": 55, "line": 113, "offset": 5251}, "start": {"col": 37, "line": 113, "offset": 5233}}, "$SOURCE": {"abstract_content": "imageLocation", "end": {"col": 63, "line": 101, "offset": 4754}, "start": {"col": 50, "line": 101, "offset": 4741}}, "$TYPE": {"abstract_content": "String", "end": {"col": 49, "line": 101, "offset": 4740}, "start": {"col": 43, "line": 101, "offset": 4734}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 61, "line": 109, "offset": 5108}, "propagated_value": {"svalue_abstract_content": "\"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>\"", "svalue_end": {"col": 95, "line": 103, "offset": 4853}, "svalue_start": {"col": 51, "line": 103, "offset": 4809}}, "start": {"col": 29, "line": 109, "offset": 5076}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 37, "line": 113, "offset": 5233}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 55, "line": 145, "offset": 6683}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "imageLocation", "location": {"end": {"col": 63, "line": 124, "offset": 5844}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 124, "offset": 5831}}}, {"content": "payload", "location": {"end": {"col": 20, "line": 139, "offset": 6436}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 13, "line": 139, "offset": 6429}}}], "taint_sink": ["CliLoc", [{"end": {"col": 55, "line": 145, "offset": 6683}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 37, "line": 145, "offset": 6665}}, "payload.toString()"]], "taint_source": ["CliLoc", [{"end": {"col": 63, "line": 124, "offset": 5844}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 124, "offset": 5831}}, "imageLocation"]]}, "engine_kind": "OSS", "fingerprint": "e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_4", "is_ignored": false, "lines": "        return new ResponseEntity<>(payload.toString(), HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$HTMLSTR": {"abstract_content": "<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>", "end": {"col": 94, "line": 126, "offset": 5942}, "start": {"col": 52, "line": 126, "offset": 5900}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel5", "end": {"col": 61, "line": 123, "offset": 5780}, "start": {"col": 35, "line": 123, "offset": 5754}}, "$PAYLOAD": {"abstract_content": "payload.toString()", "end": {"col": 55, "line": 145, "offset": 6683}, "start": {"col": 37, "line": 145, "offset": 6665}}, "$SOURCE": {"abstract_content": "imageLocation", "end": {"col": 63, "line": 124, "offset": 5844}, "start": {"col": 50, "line": 124, "offset": 5831}}, "$TYPE": {"abstract_content": "String", "end": {"col": 49, "line": 124, "offset": 5830}, "start": {"col": 43, "line": 124, "offset": 5824}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 61, "line": 141, "offset": 6540}, "propagated_value": {"svalue_abstract_content": "\"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>\"", "svalue_end": {"col": 95, "line": 126, "offset": 5943}, "svalue_start": {"col": 51, "line": 126, "offset": 5899}}, "start": {"col": 29, "line": 141, "offset": 6508}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 37, "line": 145, "offset": 6665}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 48, "line": 168, "offset": 7705}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "imageLocation", "location": {"end": {"col": 63, "line": 158, "offset": 7297}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 158, "offset": 7284}}}, {"content": "payload", "location": {"end": {"col": 27, "line": 163, "offset": 7482}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 20, "line": 163, "offset": 7475}}}], "taint_sink": ["CliLoc", [{"end": {"col": 48, "line": 168, "offset": 7705}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 41, "line": 168, "offset": 7698}}, "payload"]], "taint_source": ["CliLoc", [{"end": {"col": 63, "line": 158, "offset": 7297}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 158, "offset": 7284}}, "imageLocation"]]}, "engine_kind": "OSS", "fingerprint": "e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_5", "is_ignored": false, "lines": "            return new ResponseEntity<>(payload, HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$HTMLSTR": {"abstract_content": "<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>", "end": {"col": 98, "line": 160, "offset": 7399}, "start": {"col": 52, "line": 160, "offset": 7353}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel6", "end": {"col": 61, "line": 157, "offset": 7233}, "start": {"col": 35, "line": 157, "offset": 7207}}, "$PAYLOAD": {"abstract_content": "payload", "end": {"col": 48, "line": 168, "offset": 7705}, "propagated_value": {"svalue_abstract_content": "String.format(vulnerablePayloadWithPlaceHolder StringEscapeUtils.escapeHtml4(imageLocation))", "svalue_end": {"col": 74, "line": 166, "offset": 7655}, "svalue_start": {"col": 21, "line": 164, "offset": 7505}}, "start": {"col": 41, "line": 168, "offset": 7698}}, "$SOURCE": {"abstract_content": "imageLocation", "end": {"col": 63, "line": 158, "offset": 7297}, "start": {"col": 50, "line": 158, "offset": 7284}}, "$TYPE": {"abstract_content": "String", "end": {"col": 49, "line": 158, "offset": 7283}, "start": {"col": 43, "line": 158, "offset": 7277}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 61, "line": 165, "offset": 7580}, "propagated_value": {"svalue_abstract_content": "\"<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>\"", "svalue_end": {"col": 99, "line": 160, "offset": 7400}, "svalue_start": {"col": 51, "line": 160, "offset": 7352}}, "start": {"col": 29, "line": 165, "offset": 7548}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 41, "line": 168, "offset": 7698}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 48, "line": 198, "offset": 9010}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "imageLocation", "location": {"end": {"col": 63, "line": 186, "offset": 8475}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 186, "offset": 8462}}}, {"content": "payload", "location": {"end": {"col": 27, "line": 193, "offset": 8793}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 20, "line": 193, "offset": 8786}}}], "taint_sink": ["CliLoc", [{"end": {"col": 48, "line": 198, "offset": 9010}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 41, "line": 198, "offset": 9003}}, "payload"]], "taint_source": ["CliLoc", [{"end": {"col": 63, "line": 186, "offset": 8475}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 50, "line": 186, "offset": 8462}}, "imageLocation"]]}, "engine_kind": "OSS", "fingerprint": "e3ef56c9b10b67bb8907546d9da771c036680b9fbde98a14b8d1152aeb25f69d00cc7343a0ebbe68f51b7b1b024cb71156c07c1ef2b547bbe83975cd1197e146_6", "is_ignored": false, "lines": "            return new ResponseEntity<>(payload, HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$HTMLSTR": {"abstract_content": "<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>", "end": {"col": 98, "line": 187, "offset": 8576}, "start": {"col": 52, "line": 187, "offset": 8530}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevelSecure", "end": {"col": 66, "line": 185, "offset": 8411}, "start": {"col": 35, "line": 185, "offset": 8380}}, "$PAYLOAD": {"abstract_content": "payload", "end": {"col": 48, "line": 198, "offset": 9010}, "propagated_value": {"svalue_abstract_content": "String.format(vulnerablePayloadWithPlaceHolder HtmlUtils.htmlEscapeHex(imageLocation))", "svalue_end": {"col": 68, "line": 196, "offset": 8960}, "svalue_start": {"col": 21, "line": 194, "offset": 8816}}, "start": {"col": 41, "line": 198, "offset": 9003}}, "$SOURCE": {"abstract_content": "imageLocation", "end": {"col": 63, "line": 186, "offset": 8475}, "start": {"col": 50, "line": 186, "offset": 8462}}, "$TYPE": {"abstract_content": "String", "end": {"col": 49, "line": 186, "offset": 8461}, "start": {"col": 43, "line": 186, "offset": 8455}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 61, "line": 195, "offset": 8891}, "propagated_value": {"svalue_abstract_content": "\"<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>\"", "svalue_end": {"col": 99, "line": 187, "offset": 8577}, "svalue_start": {"col": 51, "line": 187, "offset": 8529}}, "start": {"col": 29, "line": 195, "offset": 8859}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java", "start": {"col": 41, "line": 198, "offset": 9003}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 61, "line": 38, "offset": 1728}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 32, "offset": 1371}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 47, "line": 32, "offset": 1360}}}, {"content": "map", "location": {"end": {"col": 43, "line": 35, "offset": 1536}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 40, "line": 35, "offset": 1533}}}, {"content": "payload", "location": {"end": {"col": 20, "line": 36, "offset": 1584}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 13, "line": 36, "offset": 1577}}}], "taint_sink": ["CliLoc", [{"end": {"col": 61, "line": 38, "offset": 1728}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 43, "line": 38, "offset": 1710}}, "payload.toString()"]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 32, "offset": 1371}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 47, "line": 32, "offset": 1360}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "d04b36f55a78a09c4524a8b9363418f097d56f5b3273cb8d7c012b2089939244526e181a38bae1f82371799feb9fba6071d7f60fd0a46dadf9a3eea40ea1938a_0", "is_ignored": false, "lines": "        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ERROR": {"abstract_content": "String", "end": {"col": 41, "line": 38, "offset": 1708}, "start": {"col": 35, "line": 38, "offset": 1702}}, "$HTMLSTR": {"abstract_content": "<div>%s<div>", "end": {"col": 64, "line": 33, "offset": 1438}, "start": {"col": 52, "line": 33, "offset": 1426}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel1", "end": {"col": 61, "line": 31, "offset": 1312}, "start": {"col": 35, "line": 31, "offset": 1286}}, "$PAYLOAD": {"abstract_content": "payload.toString()", "end": {"col": 61, "line": 38, "offset": 1728}, "start": {"col": 43, "line": 38, "offset": 1710}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 32, "offset": 1371}, "start": {"col": 47, "line": 32, "offset": 1360}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 32, "offset": 1359}, "start": {"col": 27, "line": 32, "offset": 1340}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 74, "line": 36, "offset": 1638}, "start": {"col": 42, "line": 36, "offset": 1606}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 43, "line": 38, "offset": 1710}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 61, "line": 61, "offset": 2948}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 51, "offset": 2399}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 47, "line": 51, "offset": 2388}}}, {"content": "map", "location": {"end": {"col": 43, "line": 55, "offset": 2640}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 40, "line": 55, "offset": 2637}}}, {"content": "payload", "location": {"end": {"col": 24, "line": 58, "offset": 2790}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 17, "line": 58, "offset": 2783}}}], "taint_sink": ["CliLoc", [{"end": {"col": 61, "line": 61, "offset": 2948}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 43, "line": 61, "offset": 2930}}, "payload.toString()"]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 51, "offset": 2399}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 47, "line": 51, "offset": 2388}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "d04b36f55a78a09c4524a8b9363418f097d56f5b3273cb8d7c012b2089939244526e181a38bae1f82371799feb9fba6071d7f60fd0a46dadf9a3eea40ea1938a_1", "is_ignored": false, "lines": "        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ERROR": {"abstract_content": "String", "end": {"col": 41, "line": 61, "offset": 2928}, "start": {"col": 35, "line": 61, "offset": 2922}}, "$HTMLSTR": {"abstract_content": "<div>%s<div>", "end": {"col": 64, "line": 52, "offset": 2466}, "start": {"col": 52, "line": 52, "offset": 2454}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel2", "end": {"col": 61, "line": 50, "offset": 2340}, "start": {"col": 35, "line": 50, "offset": 2314}}, "$PAYLOAD": {"abstract_content": "payload.toString()", "end": {"col": 61, "line": 61, "offset": 2948}, "start": {"col": 43, "line": 61, "offset": 2930}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 51, "offset": 2399}, "start": {"col": 47, "line": 51, "offset": 2388}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 51, "offset": 2387}, "start": {"col": 27, "line": 51, "offset": 2368}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 78, "line": 58, "offset": 2844}, "start": {"col": 46, "line": 58, "offset": 2812}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 43, "line": 61, "offset": 2930}}, {"check_id": "java.spring.security.injection.tainted-html-string.tainted-html-string", "end": {"col": 61, "line": 86, "offset": 4373}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "queryParams", "location": {"end": {"col": 58, "line": 74, "offset": 3705}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 47, "line": 74, "offset": 3694}}}, {"content": "map", "location": {"end": {"col": 43, "line": 78, "offset": 3946}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 40, "line": 78, "offset": 3943}}}, {"content": "payload", "location": {"end": {"col": 24, "line": 83, "offset": 4215}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 17, "line": 83, "offset": 4208}}}], "taint_sink": ["CliLoc", [{"end": {"col": 61, "line": 86, "offset": 4373}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 43, "line": 86, "offset": 4355}}, "payload.toString()"]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 74, "offset": 3705}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 47, "line": 74, "offset": 3694}}, "queryParams"]]}, "engine_kind": "OSS", "fingerprint": "d04b36f55a78a09c4524a8b9363418f097d56f5b3273cb8d7c012b2089939244526e181a38bae1f82371799feb9fba6071d7f60fd0a46dadf9a3eea40ea1938a_2", "is_ignored": false, "lines": "        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "YGUvkL", "url": "https://semgrep.dev/playground/r/WrTWQLW/java.spring.security.injection.tainted-html-string.tainted-html-string", "version_id": "WrTWQLW"}}, "shortlink": "https://sg.run/ObdR", "source": "https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string", "subcategory": ["vuln"], "technology": ["java", "spring"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "RequestParam", "end": {"col": 13, "line": 1, "offset": 12}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ERROR": {"abstract_content": "String", "end": {"col": 41, "line": 86, "offset": 4353}, "start": {"col": 35, "line": 86, "offset": 4347}}, "$HTMLSTR": {"abstract_content": "<div>%s<div>", "end": {"col": 64, "line": 75, "offset": 3772}, "start": {"col": 52, "line": 75, "offset": 3760}}, "$METHODNAME": {"abstract_content": "getVulnerablePayloadLevel3", "end": {"col": 61, "line": 73, "offset": 3646}, "start": {"col": 35, "line": 73, "offset": 3620}}, "$PAYLOAD": {"abstract_content": "payload.toString()", "end": {"col": 61, "line": 86, "offset": 4373}, "start": {"col": 43, "line": 86, "offset": 4355}}, "$SOURCE": {"abstract_content": "queryParams", "end": {"col": 58, "line": 74, "offset": 3705}, "start": {"col": 47, "line": 74, "offset": 3694}}, "$TYPE": {"abstract_content": "Map<String String>", "end": {"col": 46, "line": 74, "offset": 3693}, "start": {"col": 27, "line": 74, "offset": 3674}}, "$VAR": {"abstract_content": "vulnerablePayloadWithPlaceHolder", "end": {"col": 78, "line": 83, "offset": 4269}, "start": {"col": 46, "line": 83, "offset": 4237}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java", "start": {"col": 43, "line": 86, "offset": 4355}}, {"check_id": "generic.secrets.security.detected-jwt-token.detected-jwt-token", "end": {"col": 233, "line": 1, "offset": 232}, "extra": {"engine_kind": "OSS", "fingerprint": "3cd667e7e3f7218614f8cb73bd3d5d63a4bfa545aad29345db78b79d976639770eb2fbb5406b4788db94a738371dfc410a45ed6edbcdaec4a36e5c4c20ef50d7_0", "is_ignored": false, "lines": "NONE_ALGORITHM_ATTACK_CURL_PAYLOAD=curl 'http://localhost:9090/vulnerable/JWTVulnerability/LEVEL_6' -H 'Cookie: JWTToken=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.'", "message": "JWT token detected", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-321: Use of Hard-coded Cryptographic Key"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "kxU8E8", "url": "https://semgrep.dev/playground/r/o5Tgljp/generic.secrets.security.detected-jwt-token.detected-jwt-token", "version_id": "o5Tgljp"}}, "shortlink": "https://sg.run/05N5", "source": "https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token", "source-rule-url": "https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py", "subcategory": ["audit"], "technology": ["secrets", "jwt"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/attackvectors/JWTVulnerabilityPayload.properties", "start": {"col": 122, "line": 1, "offset": 121}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 64, "line": 22, "offset": 850}, "extra": {"engine_kind": "OSS", "fingerprint": "6750d594cda4be2d290f4f3fb009cd0216fb400a3ec83efc5ae6fc684580c7ebdc927370901b13d39687503e46e531fed3a51810bde4d40cb474e645f82c0b7b_0", "is_ignored": false, "lines": "  document.getElementById(\"response\").innerHTML = data.content;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"response\")", "end": {"col": 38, "line": 22, "offset": 824}, "start": {"col": 3, "line": 22, "offset": 789}}, "$HTML": {"abstract_content": "data.content", "end": {"col": 63, "line": 22, "offset": 849}, "start": {"col": 51, "line": 22, "offset": 837}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js", "start": {"col": 3, "line": 22, "offset": 789}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 75, "line": 14, "offset": 458}, "extra": {"engine_kind": "OSS", "fingerprint": "976f8a40e2838a4206a5400b7fa9514fd5903f5a4dba06b6ab2a25fe44e9085bcdcce972be07e13b3a79fa7bbb65f6c759dcb922e6eba9d2edbdd63011233ab7_0", "is_ignored": false, "lines": "  document.getElementById(\"pingUtilityResponse\").innerHTML = data.content;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"pingUtilityResponse\")", "end": {"col": 49, "line": 14, "offset": 432}, "start": {"col": 3, "line": 14, "offset": 386}}, "$HTML": {"abstract_content": "data.content", "end": {"col": 74, "line": 14, "offset": 457}, "start": {"col": 62, "line": 14, "offset": 445}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js", "start": {"col": 3, "line": 14, "offset": 386}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 72, "line": 18, "offset": 583}, "extra": {"engine_kind": "OSS", "fingerprint": "c3c1fd587f14433f7f6b1536b996ee540e0dc565b706a202b92cc365342252b714b8481a2c303d3422743dca3368426aeb3cdf56f464f7e3526cb50d7fc717a1_0", "is_ignored": false, "lines": "    document.getElementById(\"carInformation\").innerHTML =\n      \"<img src='\" + data.carInformation.imagePath + \"' width='900'/>\";", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"carInformation\")", "end": {"col": 46, "line": 17, "offset": 499}, "start": {"col": 5, "line": 17, "offset": 458}}, "$HTML": {"abstract_content": "\"<img src='\"+data.carInformation.imagePath+\"' width='900'/>\"", "end": {"col": 71, "line": 18, "offset": 582}, "start": {"col": 7, "line": 18, "offset": 518}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js", "start": {"col": 5, "line": 17, "offset": 458}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 66, "line": 26, "offset": 979}, "extra": {"engine_kind": "OSS", "fingerprint": "186ec1bb444dd21eb99ca35437a46f90dac2099747f4a8c5eb126e4adf219b72877b42c6a0017bede5a2f290945d7d4c320b572a236f1a45474e6b8bad8ffd5a_0", "is_ignored": false, "lines": "    document.getElementById(\"verificationResponse\").innerHTML =\n      \"JWT: \" + data.content + \" is not valid. Please try again\";", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"verificationResponse\")", "end": {"col": 52, "line": 25, "offset": 901}, "start": {"col": 5, "line": 25, "offset": 854}}, "$HTML": {"abstract_content": "\"JWT: \"+data.content+\" is not valid. Please try again\"", "end": {"col": 65, "line": 26, "offset": 978}, "start": {"col": 7, "line": 26, "offset": 920}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js", "start": {"col": 5, "line": 25, "offset": 854}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 66, "line": 25, "offset": 892}, "extra": {"engine_kind": "OSS", "fingerprint": "936498b5ef4e5546b1b8ee8156cd454346a54e95924d9c20114ebdc5d0dafadff87e30f508a11f85bf178fed4cabd019576043535a1f7cb9f047dfb01508c007_0", "is_ignored": false, "lines": "    document.getElementById(\"verificationResponse\").innerHTML =\n      \"JWT: \" + data.content + \" is not valid. Please try again\";", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"verificationResponse\")", "end": {"col": 52, "line": 24, "offset": 814}, "start": {"col": 5, "line": 24, "offset": 767}}, "$HTML": {"abstract_content": "\"JWT: \"+data.content+\" is not valid. Please try again\"", "end": {"col": 65, "line": 25, "offset": 891}, "start": {"col": 7, "line": 25, "offset": 833}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js", "start": {"col": 5, "line": 24, "offset": 767}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 59, "line": 30, "offset": 994}, "extra": {"engine_kind": "OSS", "fingerprint": "12369a4254f305299ec328745c5e9fb76ee9921b6bcfd4e4a66273d9780cd9e83b994efd6c73e9ce035781493ace5dcaf31bb110837a203b49c82f972e8efc3b_0", "is_ignored": false, "lines": "  document.getElementById(\"jwt\").innerHTML = data.content;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"jwt\")", "end": {"col": 33, "line": 30, "offset": 968}, "start": {"col": 3, "line": 30, "offset": 938}}, "$HTML": {"abstract_content": "data.content", "end": {"col": 58, "line": 30, "offset": 993}, "start": {"col": 46, "line": 30, "offset": 981}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js", "start": {"col": 3, "line": 30, "offset": 938}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 66, "line": 36, "offset": 1137}, "extra": {"engine_kind": "OSS", "fingerprint": "e0619fe07c2a78bc53022c739f7ab0179ec55a9be247afd2ed40fd74811214d65959063defd33017db548a0f179eb3b45a5f350ff8ea849ba03c3e1b86a4492a_0", "is_ignored": false, "lines": "    document.getElementById(\"verificationResponse\").innerHTML =\n      \"JWT: \" + data.content + \" is not valid. Please try again\";", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"verificationResponse\")", "end": {"col": 52, "line": 35, "offset": 1059}, "start": {"col": 5, "line": 35, "offset": 1012}}, "$HTML": {"abstract_content": "\"JWT: \"+data.content+\" is not valid. Please try again\"", "end": {"col": 65, "line": 36, "offset": 1136}, "start": {"col": 7, "line": 36, "offset": 1078}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js", "start": {"col": 5, "line": 35, "offset": 1012}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 59, "line": 41, "offset": 1239}, "extra": {"engine_kind": "OSS", "fingerprint": "0e0e533b4d75ec124a5e4961d53295c2120bda1d78b24ca75a7b560809ef9981ee9e3e22021ed8f5742a880c82a131a55fd8faa0fd6c15e32018ee4c2bb38aaa_0", "is_ignored": false, "lines": "  document.getElementById(\"jwt\").innerHTML = data.content;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"jwt\")", "end": {"col": 33, "line": 41, "offset": 1213}, "start": {"col": 3, "line": 41, "offset": 1183}}, "$HTML": {"abstract_content": "data.content", "end": {"col": 58, "line": 41, "offset": 1238}, "start": {"col": 46, "line": 41, "offset": 1226}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js", "start": {"col": 3, "line": 41, "offset": 1183}}, {"check_id": "generic.secrets.security.detected-private-key.detected-private-key", "end": {"col": 65, "line": 6, "offset": 238}, "extra": {"engine_kind": "OSS", "fingerprint": "3f0c09a03b811710b3c47f9d883925c5811e10838b97751ea15c88455d9a66eafd27e301302dd7aa2f0013f3850c4cf737a79a211c4cfa6ba0f939c4e71a0b7b_0", "is_ignored": false, "lines": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDG86CoStCZbgTi", "message": "Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-798: Use of Hard-coded Credentials"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "7KUQ0p", "url": "https://semgrep.dev/playground/r/rxTyLRv/generic.secrets.security.detected-private-key.detected-private-key", "version_id": "rxTyLRv"}}, "shortlink": "https://sg.run/b7dr", "source": "https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key", "source-rule-url": "https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go", "subcategory": ["audit"], "technology": ["secrets"], "vulnerability_class": ["Hard-coded Secrets"]}, "metavars": {"$KEY": {"abstract_content": "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDG86CoStCZbgTi", "end": {"col": 65, "line": 6, "offset": 238}, "start": {"col": 1, "line": 6, "offset": 174}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/JWTVulnerability/keys/private_key.pem", "start": {"col": 1, "line": 5, "offset": 146}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 73, "line": 35, "offset": 1166}, "extra": {"engine_kind": "OSS", "fingerprint": "7a7ea3600f5359f7988e2ade0c5e3a75f82e654ff36c62a003c3529f08e83d29b65f2e580408129f47aefca2af980d47fd85287885c7ccba414dfeec9ae8d6bc_0", "is_ignored": false, "lines": "    document.getElementById(\"Information\").innerHTML = tableInformation;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"Information\")", "end": {"col": 43, "line": 35, "offset": 1136}, "start": {"col": 5, "line": 35, "offset": 1098}}, "$HTML": {"abstract_content": "tableInformation", "end": {"col": 72, "line": 35, "offset": 1165}, "propagated_value": {"svalue_abstract_content": "tableInformation+\"</table>\"", "svalue_end": {"col": 53, "line": 34, "offset": 1092}, "svalue_start": {"col": 24, "line": 34, "offset": 1063}}, "start": {"col": 56, "line": 35, "offset": 1149}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js", "start": {"col": 5, "line": 35, "offset": 1098}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 36, "line": 17, "offset": 453}, "extra": {"engine_kind": "OSS", "fingerprint": "13eb77cce81e51eaf8f8fdc540da11e2324fe4556750ce493d0e08e3f5c2fd22697731ebbbf291e3ed0f748da5ba13e7dd923d5c3d7b42f49e76ffb5f9fc7ed5_0", "is_ignored": false, "lines": "  postDiv.innerHTML = post.content;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "postDiv", "end": {"col": 10, "line": 17, "offset": 427}, "start": {"col": 3, "line": 17, "offset": 420}}, "$HTML": {"abstract_content": "post.content", "end": {"col": 35, "line": 17, "offset": 452}, "start": {"col": 23, "line": 17, "offset": 440}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js", "start": {"col": 3, "line": 17, "offset": 420}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 56, "line": 22, "offset": 612}, "extra": {"engine_kind": "OSS", "fingerprint": "3ac16783e7b4b42dcd7ea9942da239e5e83b8074f8b71d0d45c6c7d6e6d988feb304061869157d94454bbdd8a2fa6e9604fb561f1156d522c8f9db1ff1d4dc3d_0", "is_ignored": false, "lines": "  document.getElementById(\"allPosts\").innerHTML = data;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"allPosts\")", "end": {"col": 38, "line": 22, "offset": 594}, "start": {"col": 3, "line": 22, "offset": 559}}, "$HTML": {"abstract_content": "data", "end": {"col": 55, "line": 22, "offset": 611}, "start": {"col": 51, "line": 22, "offset": 607}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js", "start": {"col": 3, "line": 22, "offset": 559}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 78, "line": 24, "offset": 793}, "extra": {"engine_kind": "OSS", "fingerprint": "063f0b45a6d61a20cc8bd779ecdb927d1f724b4e09d979d691903395246437372370af37a418bf4259d4f0795e47e63eff894a8eae369eaabf6f6d66f33ef182_0", "is_ignored": false, "lines": "    document.getElementById(\"projectsResponse\").innerHTML = tableInformation;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"projectsResponse\")", "end": {"col": 48, "line": 24, "offset": 763}, "start": {"col": 5, "line": 24, "offset": 720}}, "$HTML": {"abstract_content": "tableInformation", "end": {"col": 77, "line": 24, "offset": 792}, "propagated_value": {"svalue_abstract_content": "tableInformation+\"</tr>\"", "svalue_end": {"col": 50, "line": 23, "offset": 714}, "svalue_start": {"col": 24, "line": 23, "offset": 688}}, "start": {"col": 61, "line": 24, "offset": 776}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js", "start": {"col": 5, "line": 24, "offset": 720}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 55, "line": 17, "offset": 537}, "extra": {"engine_kind": "OSS", "fingerprint": "4789c55af64d74f7efdefe093e8b4e47213f2038b1ad4f6ea4a1065840cd167255c7756fe6a802fd23609c5fe70c28decaf8ec997cff069b5aff9bab0c928752_0", "is_ignored": false, "lines": "  document.getElementById(\"carInformation\").innerHTML =\n    \"<img src='\" + data.imagePath + \"' width='900'/>\";", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"carInformation\")", "end": {"col": 44, "line": 16, "offset": 470}, "start": {"col": 3, "line": 16, "offset": 429}}, "$HTML": {"abstract_content": "\"<img src='\"+data.imagePath+\"' width='900'/>\"", "end": {"col": 54, "line": 17, "offset": 536}, "start": {"col": 5, "line": 17, "offset": 487}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js", "start": {"col": 3, "line": 16, "offset": 429}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 20, "line": 16, "offset": 585}, "extra": {"engine_kind": "OSS", "fingerprint": "e8823ff4a0b9a10ce6cee70e178fefffb6a4a11e5965628718b867fea90e3502d8ed77e792b8a920ae1d6b65c9daefe0bac33a624ff36a9215ba5cfc20d7e084_0", "is_ignored": false, "lines": "  document.getElementById(\"uploaded_file_info\").innerHTML = data.isValid\n    ? \"File uploaded at location:\" + data.content\n    : data.content;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"uploaded_file_info\")", "end": {"col": 48, "line": 14, "offset": 490}, "start": {"col": 3, "line": 14, "offset": 445}}, "$HTML": {"abstract_content": "data.isValid\"File uploaded at location:\"+data.content data.content", "end": {"col": 19, "line": 16, "offset": 584}, "start": {"col": 61, "line": 14, "offset": 503}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js", "start": {"col": 3, "line": 14, "offset": 445}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 53, "line": 16, "offset": 484}, "extra": {"engine_kind": "OSS", "fingerprint": "e120f1bde64fd24bedb04807140b6acc99741d4eb0e31b7966ad96c9c1d52cf36a8b110af3bd3e721db86fd6da4a8dd930e64423d1e16a00cf621a11b33bb239_0", "is_ignored": false, "lines": "  document.getElementById(\"image\").innerHTML = data;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"image\")", "end": {"col": 35, "line": 16, "offset": 466}, "start": {"col": 3, "line": 16, "offset": 434}}, "$HTML": {"abstract_content": "data", "end": {"col": 52, "line": 16, "offset": 483}, "start": {"col": 48, "line": 16, "offset": 479}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js", "start": {"col": 3, "line": 16, "offset": 434}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 36, "line": 15, "offset": 499}, "extra": {"engine_kind": "OSS", "fingerprint": "6c8d47cab3be0c79385ec928b3ce78b6ad6b24cc1244f4cdc80b68e86c02f0f271df7c9d848a08b2f05c9451fd56e252a58bc225a9a5ea1dc208d6a63ebc9562_0", "is_ignored": false, "lines": "  parentContainer.innerHTML = data;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "parentContainer", "end": {"col": 18, "line": 15, "offset": 481}, "propagated_value": {"svalue_abstract_content": "document.getElementById(\"parentContainer\")", "svalue_end": {"col": 67, "line": 14, "offset": 462}, "svalue_start": {"col": 25, "line": 14, "offset": 420}}, "start": {"col": 3, "line": 15, "offset": 466}}, "$HTML": {"abstract_content": "data", "end": {"col": 35, "line": 15, "offset": 498}, "start": {"col": 31, "line": 15, "offset": 494}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js", "start": {"col": 3, "line": 15, "offset": 466}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 53, "line": 14, "offset": 455}, "extra": {"engine_kind": "OSS", "fingerprint": "7ce57ebd246c20b9d2fbb13ff82ec6386439828650f5e8302280a206fe1e81fd8a916073cd2aadff1de50b36e82ba573ec8608d83c15ca878664624654af21a2_0", "is_ignored": false, "lines": "  document.getElementById(\"image\").innerHTML = data;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"image\")", "end": {"col": 35, "line": 14, "offset": 437}, "start": {"col": 3, "line": 14, "offset": 405}}, "$HTML": {"abstract_content": "data", "end": {"col": 52, "line": 14, "offset": 454}, "start": {"col": 48, "line": 14, "offset": 450}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js", "start": {"col": 3, "line": 14, "offset": 405}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 40, "line": 18, "offset": 550}, "extra": {"engine_kind": "OSS", "fingerprint": "5cb50b2ec19b0660b454d607d8e2bc874b071fc76575c469c287cfbb4590376e81955d273c9aa26459963b0807ea0857df05523bae3cf76afe39acd03b11072f_0", "is_ignored": false, "lines": "  bookNameElement.innerHTML = bookName;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "bookNameElement", "end": {"col": 18, "line": 18, "offset": 528}, "propagated_value": {"svalue_abstract_content": "xmlRequestDocument.createElement(\"name\")", "svalue_end": {"col": 65, "line": 17, "offset": 509}, "svalue_start": {"col": 25, "line": 17, "offset": 469}}, "start": {"col": 3, "line": 18, "offset": 513}}, "$HTML": {"abstract_content": "bookName", "end": {"col": 39, "line": 18, "offset": 549}, "start": {"col": 31, "line": 18, "offset": 541}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js", "start": {"col": 3, "line": 18, "offset": 513}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 36, "line": 22, "offset": 697}, "extra": {"engine_kind": "OSS", "fingerprint": "e3f9474d8a859ff4559edfae7953e1c9accc1f995a1254a8a218e3c89d70ea20afe6c5a318122f35bfd71ebeefa766e7f74f7d56fd7c8d8dcc4020d3f3efd31d_0", "is_ignored": false, "lines": "  authorElement.innerHTML = author;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "authorElement", "end": {"col": 16, "line": 22, "offset": 677}, "propagated_value": {"svalue_abstract_content": "xmlRequestDocument.createElement(\"author\")", "svalue_end": {"col": 65, "line": 21, "offset": 660}, "svalue_start": {"col": 23, "line": 21, "offset": 618}}, "start": {"col": 3, "line": 22, "offset": 664}}, "$HTML": {"abstract_content": "author", "end": {"col": 35, "line": 22, "offset": 696}, "start": {"col": 29, "line": 22, "offset": 690}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js", "start": {"col": 3, "line": 22, "offset": 664}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 32, "line": 26, "offset": 834}, "extra": {"engine_kind": "OSS", "fingerprint": "ebc16eeb9b20f914470de7c5889a88679de3c9771814384e9e4327f4568c96bf4f975cb7a1474f49552900162c8b3a54d4b6b1c78a2af0965796b0950b9b516e_0", "is_ignored": false, "lines": "  isbnElement.innerHTML = isbn;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "isbnElement", "end": {"col": 14, "line": 26, "offset": 816}, "propagated_value": {"svalue_abstract_content": "xmlRequestDocument.createElement(\"isbn\")", "svalue_end": {"col": 61, "line": 25, "offset": 801}, "svalue_start": {"col": 21, "line": 25, "offset": 761}}, "start": {"col": 3, "line": 26, "offset": 805}}, "$HTML": {"abstract_content": "isbn", "end": {"col": 31, "line": 26, "offset": 833}, "start": {"col": 27, "line": 26, "offset": 829}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js", "start": {"col": 3, "line": 26, "offset": 805}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 42, "line": 30, "offset": 989}, "extra": {"engine_kind": "OSS", "fingerprint": "3f80e3df9d29aac867699a7f408742ed6f4625611a5c5b0b0d8c75291bcebb2babd7a9a2e553f692d5a45ed127351fa9cceef864efb52bcbc2d0af127cb71f22_0", "is_ignored": false, "lines": "  publisherElement.innerHTML = publisher;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "publisherElement", "end": {"col": 19, "line": 30, "offset": 966}, "propagated_value": {"svalue_abstract_content": "xmlRequestDocument.createElement(\"publisher\")", "svalue_end": {"col": 71, "line": 29, "offset": 946}, "svalue_start": {"col": 26, "line": 29, "offset": 901}}, "start": {"col": 3, "line": 30, "offset": 950}}, "$HTML": {"abstract_content": "publisher", "end": {"col": 41, "line": 30, "offset": 988}, "start": {"col": 32, "line": 30, "offset": 979}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js", "start": {"col": 3, "line": 30, "offset": 950}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 42, "line": 34, "offset": 1142}, "extra": {"engine_kind": "OSS", "fingerprint": "1c06a2b567a5064aa8b76c8eeb9cefe55ec930cb36fd04c026b83012cc5a87c13835c412ca52a320573f6b1d7e90e0987ddc19c367a0f06831392e89ddf7bb7f_0", "is_ignored": false, "lines": "  otherElement.innerHTML = otherComments;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "otherElement", "end": {"col": 15, "line": 34, "offset": 1115}, "propagated_value": {"svalue_abstract_content": "xmlRequestDocument.createElement(\"others\")", "svalue_end": {"col": 64, "line": 33, "offset": 1099}, "svalue_start": {"col": 22, "line": 33, "offset": 1057}}, "start": {"col": 3, "line": 34, "offset": 1103}}, "$HTML": {"abstract_content": "otherComments", "end": {"col": 41, "line": 34, "offset": 1141}, "start": {"col": 28, "line": 34, "offset": 1128}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js", "start": {"col": 3, "line": 34, "offset": 1103}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 63, "line": 78, "offset": 2393}, "extra": {"engine_kind": "OSS", "fingerprint": "43232b43885df337c3f95a19694192d48623c3a094dec04a58b292250b8c4b35f64852dd479438efe1a181576508c3dea49d49e71d50c0e5deb002be1eb0a8d6_0", "is_ignored": false, "lines": "  document.getElementById(\"bookInformation\").innerHTML = data;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"bookInformation\")", "end": {"col": 45, "line": 78, "offset": 2375}, "start": {"col": 3, "line": 78, "offset": 2333}}, "$HTML": {"abstract_content": "data", "end": {"col": 62, "line": 78, "offset": 2392}, "start": {"col": 58, "line": 78, "offset": 2388}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js", "start": {"col": 3, "line": 78, "offset": 2333}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 52, "line": 58, "offset": 1990}, "extra": {"engine_kind": "OSS", "fingerprint": "386f691e5ae145fe641a800b6481b11408654da135b63c0853e75f6b3e3f49828ee3fd3d8af497c9e9441f3a3c08a9c668967fa7031fa5f30c3e7cc8c2e2cc4a_0", "is_ignored": false, "lines": "    document.getElementById(\"vulnerabilityDescription\").innerHTML =\n      vulnerableAppEndPointData[id][\"Description\"];", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"vulnerabilityDescription\")", "end": {"col": 56, "line": 57, "offset": 1926}, "start": {"col": 5, "line": 57, "offset": 1875}}, "$HTML": {"abstract_content": "vulnerableAppEndPointData[id][\"Description\"]", "end": {"col": 51, "line": 58, "offset": 1989}, "start": {"col": 7, "line": 58, "offset": 1945}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/vulnerableApp.js", "start": {"col": 5, "line": 57, "offset": 1875}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 44, "line": 72, "offset": 2640}, "extra": {"engine_kind": "OSS", "fingerprint": "513e2df88c08d76621160ec98c0370d152f61e3cc49d61720af407016a3669c654fabee6040e130fda3c649b9ee4d990430473bb10948e5d4afb0d35ef736354_0", "is_ignored": false, "lines": "      detailTitle.innerHTML = responseText;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "detailTitle", "end": {"col": 18, "line": 72, "offset": 2614}, "start": {"col": 7, "line": 72, "offset": 2603}}, "$HTML": {"abstract_content": "responseText", "end": {"col": 43, "line": 72, "offset": 2639}, "start": {"col": 31, "line": 72, "offset": 2627}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/vulnerableApp.js", "start": {"col": 7, "line": 72, "offset": 2603}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 79, "line": 108, "offset": 3753}, "extra": {"engine_kind": "OSS", "fingerprint": "fcffed7e036b8561bce1c9ec1852f3ca02f53c69e332438c9741ce9f06d86ccec84d7c6476c406e70af4217157fab497c11f645454604d47ba8dbce287f398ba_0", "is_ignored": false, "lines": "  span.innerHTML = isSecure ? variantTooltip.secure : variantTooltip.unsecure;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "span", "end": {"col": 7, "line": 108, "offset": 3681}, "start": {"col": 3, "line": 108, "offset": 3677}}, "$HTML": {"abstract_content": "isSecure variantTooltip.secure variantTooltip.unsecure", "end": {"col": 78, "line": 108, "offset": 3752}, "start": {"col": 20, "line": 108, "offset": 3694}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/vulnerableApp.js", "start": {"col": 3, "line": 108, "offset": 3677}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 74, "line": 163, "offset": 5341}, "extra": {"engine_kind": "OSS", "fingerprint": "4458aa98cde7481ef24b6189c40b98743f70d45069b2c2025f43a1249037ea3c6096c4c25ee549046b78d5be533cf77ef21c48df36cd1431d956f9e3fffa7b86_0", "is_ignored": false, "lines": "    detailTitle.innerHTML = vulnerableAppEndPointData[id][\"Description\"];", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "detailTitle", "end": {"col": 16, "line": 163, "offset": 5283}, "start": {"col": 5, "line": 163, "offset": 5272}}, "$HTML": {"abstract_content": "vulnerableAppEndPointData[id][\"Description\"]", "end": {"col": 73, "line": 163, "offset": 5340}, "start": {"col": 29, "line": 163, "offset": 5296}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/vulnerableApp.js", "start": {"col": 5, "line": 163, "offset": 5272}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 72, "line": 169, "offset": 5526}, "extra": {"engine_kind": "OSS", "fingerprint": "4458aa98cde7481ef24b6189c40b98743f70d45069b2c2025f43a1249037ea3c6096c4c25ee549046b78d5be533cf77ef21c48df36cd1431d956f9e3fffa7b86_1", "is_ignored": false, "lines": "  detailTitle.innerHTML = vulnerableAppEndPointData[id][\"Description\"];", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "detailTitle", "end": {"col": 14, "line": 169, "offset": 5468}, "start": {"col": 3, "line": 169, "offset": 5457}}, "$HTML": {"abstract_content": "vulnerableAppEndPointData[id][\"Description\"]", "end": {"col": 71, "line": 169, "offset": 5525}, "start": {"col": 27, "line": 169, "offset": 5481}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/vulnerableApp.js", "start": {"col": 3, "line": 169, "offset": 5457}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 62, "line": 308, "offset": 9891}, "extra": {"engine_kind": "OSS", "fingerprint": "12cbb93df3339a028803e1e63167a59486459f97ce38bd67127c81c6b407d16920627f7dfad654f9ad4ad5af215bb3b7651318491026d49756a8fff4c8324c6a_0", "is_ignored": false, "lines": "    document.getElementById(\"helpText\").innerHTML = helpText;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"helpText\")", "end": {"col": 40, "line": 308, "offset": 9869}, "start": {"col": 5, "line": 308, "offset": 9834}}, "$HTML": {"abstract_content": "helpText", "end": {"col": 61, "line": 308, "offset": 9890}, "propagated_value": {"svalue_abstract_content": "helpText+\"</ol>\"", "svalue_end": {"col": 34, "line": 307, "offset": 9828}, "svalue_start": {"col": 16, "line": 307, "offset": 9810}}, "start": {"col": 53, "line": 308, "offset": 9882}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "src/main/resources/static/vulnerableApp.js", "start": {"col": 5, "line": 308, "offset": 9834}}], "skipped_rules": [], "version": "1.51.0"}